<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NeoVim Avante 使用指南</title>
      <link href="/2024/11/06/neovim-avante-skill/"/>
      <url>/2024/11/06/neovim-avante-skill/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><p>从 <a href="https://github.com/features/copilot">Github Copilot</a> 内测申请, 到后来作为体验小组成员, 推动公司统一购买, 已经使用了较长的时间. 积累的一些使用技巧, 我会在这边文章中进行分享, 如果有不对或需要补充的地方, 欢迎在评论区指出.</p><p>我会结合一些实际使用的例子从如下几个方面来分享:</p><ul><li>代码补全</li><li>Inline Chat 修改代码</li><li>Chat 修改代码</li></ul><blockquote><p>本文的示例会使用 <code>Idea</code>, <code>VSCode</code>, <code>NeoVim</code> 等编辑器, 但是 <code>Copilot</code> 的使用方式是一样的.</p></blockquote><h1 id="1-代码补全"><a href="#1-代码补全" class="headerlink" title="1 代码补全"></a>1 代码补全</h1><p>代码补全作为 <code>Copilot</code> 的核心功能, 也是刚开始使用时, 感知最明显的功能. 开启 <code>Copilot</code> 后, 直接开始编写代码, 会发现 <code>Copilot</code> 会根据你的输入, 生成一些代码片段, 你可以选择使用, 也可以继续输入, <code>Copilot</code> 会根据你的输入, 继续生成代码.</p><h2 id="1-1-通过上下文-生成代码补全"><a href="#1-1-通过上下文-生成代码补全" class="headerlink" title="1.1 通过上下文, 生成代码补全"></a>1.1 通过上下文, 生成代码补全</h2><p>如下, 我们在 <code>TypeScript</code> 中有一个文件用于写 <code>API</code> 的地方, 当我们准备添加一个 <code>delAttribute</code> 方式时, 我们如数 <code>export const delAttribute</code> 之后, 就提示了代码, 可以按 <code>Tab</code> 或者设置快捷键让提示代码上屏</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202411271034673.gif" alt="Copilot Hint"></p><h2 id="1-2-通过注释-生成代码补全"><a href="#1-2-通过注释-生成代码补全" class="headerlink" title="1.2 通过注释, 生成代码补全"></a>1.2 通过注释, 生成代码补全</h2><p>我们还可以通过写注释的方式, 让 <code>Copilot</code> 更加精准的给我们生成提示代码, 如下在 <code>Vue3</code> 工程中, 需要通过计算属性的方式, 做一些处理, 我们可以现将注释写出来, 然后 <code>Copilot</code> 会根据注释, 生成代码 </p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202411271054707.gif" alt="Hint from comments"></p><h1 id="2-Inline-Chat-修改代码"><a href="#2-Inline-Chat-修改代码" class="headerlink" title="2 Inline Chat 修改代码"></a>2 Inline Chat 修改代码</h1><p>选中代码段, 然后打开 <code>Copilot Inline Chat</code>, 输入需要修改的问题并回车, <code>Copilot</code> 就会直接按照描述来修改代码</p><p>如下图, 我们在国际化文件中添加了中文, 然后复制到西班牙语的文件中, 需要修改为西班牙语, 我们可以直接调用 <code>Copilot Inline Chat</code> 来修改</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202411271103290.gif" alt="Inline Chat"></p><h1 id="3-Chat-修改代码"><a href="#3-Chat-修改代码" class="headerlink" title="3 Chat 修改代码"></a>3 Chat 修改代码</h1><p>我们可以直接在 <code>Chat</code> 聊天框中, 输入需要修改的问题, <code>Copilot</code> 会根据你的描述, 生成代码, 如果不满意, 可以继续聊天, 返回满意的代码后, 点击 <code>Accept</code> 就可以将代码应用到编辑器中.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202412021204553.png" alt="Github Chat"></p><h1 id="4-最后"><a href="#4-最后" class="headerlink" title="4 最后"></a>4 最后</h1><p>使用 <code>Copilot</code> 的这两年, 对于我来说, 并没有提高太多的开发效率, 但是已经离不开 <code>Copilot</code> 了, 因为它带来的舒适地开发体验, 对开发人员来说更加重要.</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai </tag>
            
            <tag> copilot </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Installing Ollama offline and loading offline models</title>
      <link href="/2024/10/10/install-ollama-offline-english/"/>
      <url>/2024/10/10/install-ollama-offline-english/</url>
      
        <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>I’ve been playing <code>ollama</code> locally for a long time, today I’m going to install <code>ollama</code> on the server, but the server doesn’t have an extranet, so I can only install it offline, I’ve looked for offline tutorials but there are fewer of them, so I’m going to write my own, so that I can check it out in the future.</p><h2 id="Install-Ollama-Offline"><a href="#Install-Ollama-Offline" class="headerlink" title="Install Ollama Offline"></a>Install Ollama Offline</h2><h3 id="Download-the-Installer"><a href="#Download-the-Installer" class="headerlink" title="Download the Installer"></a>Download the Installer</h3><p>Download the appropriate installation package from the official <a href="https://github.com/ollama/ollama/releases">Release</a> page, based on the server’s CPU type. After downloading, upload the package to the server.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410101649580.png" alt="Ollama Release"></p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>Extract the installation package <code>ollama linux amd64.tgz</code>, navigate to the extracted directory, and run the <code>install.sh</code> script to complete the installation.</p><pre><code class="bash"># Extract the installation packagetar -zxvf Ollama\ Linux\ AMD64.tgz# Move the ollama executable to the /usr/bin directorysudo mv bin/ollama /usr/bin/ollama</code></pre><h2 id="Start-and-Enable-Auto-Start"><a href="#Start-and-Enable-Auto-Start" class="headerlink" title="Start and Enable Auto-Start"></a>Start and Enable Auto-Start</h2><ol><li>Create an execution user. This step can be skipped; you can directly set <code>root</code> or any other user with <code>ollama</code> execution permissions.</li></ol><pre><code class="bash">sudo useradd -r -s /bin/false -U -m -d /usr/share/ollama ollamasudo usermod -a -G ollama $(whoami)</code></pre><ol start="2"><li>Create a configuration file</li></ol><p>Create the file <code>/etc/systemd/system/ollama.service</code> and populate it with the following content, filling in the <code>User</code> and <code>Group</code> fields based on your choice in the previous step.</p><pre><code class="bash">[Unit]Description=Ollama ServiceAfter=network-online.target[Service]ExecStart=/usr/bin/ollama serveUser=ollamaGroup=ollamaRestart=alwaysRestartSec=3Environment=&quot;PATH=$PATH&quot;[Install]WantedBy=default.target</code></pre><p>Then execute the following commands</p><pre><code class="bash"># Load the configurationsudo systemctl daemon-reload# Enable auto-start on bootsudo systemctl enable ollama# Start the ollama servicesudo systemctl start ollama</code></pre><h1 id="Offline-Model-Installation"><a href="#Offline-Model-Installation" class="headerlink" title="Offline Model Installation"></a>Offline Model Installation</h1><p>Here, we will use the <code>gguf</code> model installation method. The installation methods for models are quite similar, and you can refer to the following steps.</p><h2 id="Qwen2-5-3b"><a href="#Qwen2-5-3b" class="headerlink" title="Qwen2.5-3b"></a>Qwen2.5-3b</h2><p>1.Download the model. You can search for the corresponding gguf version of the model on <a href="https://huggingface.co/Qwen/Qwen1.5-0.5B-Chat-GGUF/tree/main">huggingface</a>, such as searching for <em>qwen2.5-3b-gguf</em>.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410120953995.png" alt="search huggingface model"></p><p>You can choose any fine-tuned version; here, we refer to the model version selected on <code>ollama</code>, as shown in the figure below.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121437723.png" alt="ollama qwen2.5-3b model"></p><p>In the model we just found, click on <code>Files and versions</code>, locate the version found in ollama, and click download.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121440090.png" alt="download qwen2.5-3b"></p><p>2.Upload the downloaded file to the server directory <code>/data/ollama</code> and rename it to <code>qwen2.5-3b.gguf</code> (renaming for easier reference later).<br>3.Create a file named <code>Modelfile</code> in the <code>/data/ollama</code> directory and add the following content.</p><pre><code class="dockerfile"># Model name from the previous stepFROM ./qwen2.5-3b.gguf# You can find the template for the model on the ollama website, such as the template address for qwen2.5-3b: https://ollama.com/library/qwen2.5:3b/blobs/eb4402837c78# Directly copy the Template from ollama into the three double quotes belowTEMPLATE &quot;&quot;&quot;&#123;&#123;- if .Messages &#125;&#125;&#123;&#123;- if or .System .Tools &#125;&#125;&lt;|im_start|&gt;system&#123;&#123;- if .System &#125;&#125;&#123;&#123; .System &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- if .Tools &#125;&#125;# ToolsYou may call one or more functions to assist with the user query.You are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:&lt;tools&gt;&#123;&#123;- range .Tools &#125;&#125;&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&#123; .Function &#125;&#125;&#125;&#123;&#123;- end &#125;&#125;&lt;/tools&gt;For each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:&lt;tool_call&gt;&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;&lt;/tool_call&gt;&#123;&#123;- end &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- range $i, $_ := .Messages &#125;&#125;&#123;&#123;- $last := eq (len (slice $.Messages $i)) 1 -&#125;&#125;&#123;&#123;- if eq .Role "user" &#125;&#125;&lt;|im_start|&gt;user&#123;&#123; .Content &#125;&#125;&lt;|im_end|&gt;&#123;&#123; else if eq .Role "assistant" &#125;&#125;&lt;|im_start|&gt;assistant&#123;&#123; if .Content &#125;&#125;&#123;&#123; .Content &#125;&#125;&#123;&#123;- else if .ToolCalls &#125;&#125;&lt;tool_call&gt;&#123;&#123; range .ToolCalls &#125;&#125;&#123;&quot;name&quot;: &quot;&#123;&#123; .Function.Name &#125;&#125;&quot;, &quot;arguments&quot;: &#123;&#123; .Function.Arguments &#125;&#125;&#125;&#123;&#123; end &#125;&#125;&lt;/tool_call&gt;&#123;&#123;- end &#125;&#125;&#123;&#123; if not $last &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- else if eq .Role "tool" &#125;&#125;&lt;|im_start|&gt;user&lt;tool_response&gt;&#123;&#123; .Content &#125;&#125;&lt;/tool_response&gt;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- if and (ne .Role "assistant") $last &#125;&#125;&lt;|im_start|&gt;assistant&#123;&#123; end &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- else &#125;&#125;&#123;&#123;- if .System &#125;&#125;&lt;|im_start|&gt;system&#123;&#123; .System &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&#123;&#123; if .Prompt &#125;&#125;&lt;|im_start|&gt;user&#123;&#123; .Prompt &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&lt;|im_start|&gt;assistant&#123;&#123; end &#125;&#125;&#123;&#123; .Response &#125;&#125;&#123;&#123; if .Response &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&quot;&quot;&quot;# This step refers to the parameters on ollama; however, there are no parameters for qwen2.5-3b on ollama. You can add them in the following format.PARAMETER stop &quot;&lt;|im_start|&gt;&quot;PARAMETER stop &quot;&lt;|im_end|&gt;&quot;</code></pre><p>4.Execute the following commands to load and run the offline model.</p><pre><code class="bash"># Create and run the qwen2.5 model using the model description fileollama create qwen2.5 -f Modelfile# Check the list of running models to see if it is activeollama ls# Use the API to call the model and check if it is running properlycurl --location --request POST &#39;http://127.0.0.1:11434/api/generate&#39; \--header &#39;Content-Type: application/json&#39; \--data &#39;&#123;    &quot;model&quot;: &quot;qwen2.5&quot;,    &quot;stream&quot;: false,    &quot;prompt&quot;: &quot;Hello, what is the first solar term of the 24 solar terms?&quot;&#125;&#39; \-w &quot;Time Total: %&#123;time_total&#125;s\n&quot;</code></pre><p>As shown in the figure below, a normal response indicates that the model has been successfully installed.<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121030889.png" alt="api/generate"></p><h2 id="Llama3-2-3b"><a href="#Llama3-2-3b" class="headerlink" title="Llama3.2-3b"></a>Llama3.2-3b</h2><p>1.Download the model. You can search for the corresponding gguf version of the model on <a href="https://huggingface.co/QuantFactory/Llama-3.2-3B-GGUF">huggingface</a>, such as searching for <code>llama3.2-3b-gguf</code>.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121034782.png" alt="search huggingface model"></p><p>You can choose any fine-tuned version; here we refer to the model version selected on ollama, as shown in the figure below.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121445150.png" alt="ollama llama3.2-3b model"></p><p>We directly click on <code>Files and versions</code> in the model we just found, find the version available on ollama, and click to download.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121448569.png" alt="download llama3.2-3b"></p><p>2.Upload the downloaded file to the server directory <code>/data/ollama</code>, and rename it to <code>llama3.2-3b.gguf</code> (renamed for easier reference later).</p><p>3.Create a file named <code>Modelfile</code> in the <code>/data/ollama</code> directory and add the following content.</p><pre><code class="dockerfile"># Model name from the previous stepFROM ./llama3.2-3b.gguf# You can find templates in the model repository on the ollama website, for example, the template address for llama3.2-3b: https://ollama.com/library/llama3.2/blobs/966de95ca8a6# Directly copy the Template from ollama into the three double quotes belowTEMPLATE &quot;&quot;&quot;&lt;|start_header_id|&gt;system&lt;|end_header_id|&gt;Cutting Knowledge Date: December 2023&#123;&#123; if .System &#125;&#125;&#123;&#123; .System &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- if .Tools &#125;&#125;When you receive a tool call response, use the output to format an answer to the orginal user question.You are a helpful assistant with tool calling capabilities.&#123;&#123;- end &#125;&#125;&lt;|eot_id|&gt;&#123;&#123;- range $i, $_ := .Messages &#125;&#125;&#123;&#123;- $last := eq (len (slice $.Messages $i)) 1 &#125;&#125;&#123;&#123;- if eq .Role "user" &#125;&#125;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;&#123;&#123;- if and $.Tools $last &#125;&#125;Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.Respond in the format &#123;&quot;name&quot;: function name, &quot;parameters&quot;: dictionary of argument name and its value&#125;. Do not use variables.&#123;&#123; range $.Tools &#125;&#125;&#123;&#123;- . &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; .Content &#125;&#125;&lt;|eot_id|&gt;&#123;&#123;- else &#125;&#125;&#123;&#123; .Content &#125;&#125;&lt;|eot_id|&gt;&#123;&#123;- end &#125;&#125;&#123;&#123; if $last &#125;&#125;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- else if eq .Role "assistant" &#125;&#125;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;&#123;&#123;- if .ToolCalls &#125;&#125;&#123;&#123; range .ToolCalls &#125;&#125;&#123;&quot;name&quot;: &quot;&#123;&#123; .Function.Name &#125;&#125;&quot;, &quot;parameters&quot;: &#123;&#123; .Function.Arguments &#125;&#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123;- else &#125;&#125;&#123;&#123; .Content &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123; if not $last &#125;&#125;&lt;|eot_id|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- else if eq .Role "tool" &#125;&#125;&lt;|start_header_id|&gt;ipython&lt;|end_header_id|&gt;&#123;&#123; .Content &#125;&#125;&lt;|eot_id|&gt;&#123;&#123; if $last &#125;&#125;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- end &#125;&#125;&quot;&quot;&quot;# This step references the parameters from ollama. For llama3.2-3b, the params can be found at: https://ollama.com/library/llama3.2/blobs/56bb8bd477a5PARAMETER stop &quot;&lt;|start_header_id|&gt;&quot;PARAMETER stop &quot;&lt;|end_header_id|&gt;&quot;PARAMETER stop &quot;&lt;|eot_id|&gt;&quot;</code></pre><p>4.Execute the following commands to load and run the offline model.</p><pre><code class="bash"># Create and run the llama3.2 model using the model description fileollama create llama3.2 -f Modelfile# Check the list of running models to see if it is activeollama ls# Call the model through the API to check if it is functioning properlycurl --location --request POST &#39;http://127.0.0.1:11434/api/generate&#39; \--header &#39;Content-Type: application/json&#39; \--data &#39;&#123;    &quot;model&quot;: &quot;llama3.2&quot;,    &quot;stream&quot;: false,    &quot;prompt&quot;: &quot;Hello, what is the first solar term of the 24 solar terms?&quot;&#125;&#39; \-w &quot;Time Total: %&#123;time_total&#125;s&quot;</code></pre><p>As shown in the image below, the model returns the response correctly, indicating that it has been successfully installed.<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121041193.png" alt="api/generate"></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p><code>Ollama</code> is a very useful tool for installing models. I hope everyone enjoys using it! If you encounter any installation issues or have tips to share, feel free to discuss them in the comments~~~</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ollama </tag>
            
            <tag> Offline </tag>
            
            <tag> Tutorial </tag>
            
            <tag> Installation Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离线安装 Ollama及加载离线模型</title>
      <link href="/2024/10/10/install-ollama-offline/"/>
      <url>/2024/10/10/install-ollama-offline/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本地已经玩了 <code>ollama</code> 很长时间了, 今天打算把 <code>ollama</code> 安装到服务器上, 但是服务器没有外网, 所以只能离线安装了, 找了一下离线装教程还是比较少了, 所以自己写一篇, 以便以后查阅.</p><h1 id="离线安装-Ollama"><a href="#离线安装-Ollama" class="headerlink" title="离线安装 Ollama"></a>离线安装 Ollama</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>在官方 <a href="https://github.com/ollama/ollama/releases">Release</a> 中进行下载, 根据服务器的 cpu 类型下载对应的安装包, 下载完成后上传到服务器上.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410101649580.png" alt="Ollama Relase"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>解压安装包 <code>ollama linux amd64.tgz</code>, 进入到解压后的目录, 执行 <code>install.sh</code> 脚本进行安装.</p><pre><code class="bash"># 解压安装包tar -zxvf Ollama\ Linux\ AMD64.tgz# 将 ollama 执行命令移动到 /usr/bin 目录下sudo mv bin/ollama /usr/bin/ollama</code></pre><h2 id="启动并添加开机启动"><a href="#启动并添加开机启动" class="headerlink" title="启动并添加开机启动"></a>启动并添加开机启动</h2><p>1.创建执行用户, 这一步可以忽略, 可以直接设置 <code>root</code> 或其他有 <code>ollama</code> 执行权限的用户都可以</p><pre><code class="bash">sudo useradd -r -s /bin/false -U -m -d /usr/share/ollama ollamasudo usermod -a -G ollama $(whoami)</code></pre><p>2.创建配置文件</p><p>创建文件 <code>/etc/systemd/system/ollama.service</code>, 并填充如下内容, 其中的 <code>User</code> 和 <code>Group</code> 根据上一步的选择填写</p><pre><code class="bash">[Unit]Description=Ollama ServiceAfter=network-online.target[Service]ExecStart=/usr/bin/ollama serveUser=ollamaGroup=ollamaRestart=alwaysRestartSec=3Environment=&quot;PATH=$PATH&quot;[Install]WantedBy=default.target</code></pre><p>然后执行如下命令</p><pre><code class="bash"># 加载配置sudo systemctl daemon-reload# 设置开机启动sudo systemctl enable ollama# 启动 ollama 服务sudo systemctl start ollama</code></pre><h1 id="离线安装模型"><a href="#离线安装模型" class="headerlink" title="离线安装模型"></a>离线安装模型</h1><p>如下使用 <code>gguf</code> 模型安装方式, 模型安装的方式都差不多, 可以参考如下方式</p><h2 id="Qwen2-5-3b"><a href="#Qwen2-5-3b" class="headerlink" title="Qwen2.5-3b"></a>Qwen2.5-3b</h2><p>1.下载模型, 可以到 <a href="https://huggingface.co/Qwen/Qwen1.5-0.5B-Chat-GGUF/tree/main">huggingface</a> 上搜索对应模型的 gguf 版本, 如搜索 <em>qwen2.5-3b-gguf</em></p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410120953995.png" alt="search huggingface model"></p><p>具体选那个微调版本都可以, 我们这里参考 <code>ollama</code> 上选择的模型版本, 如下图</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121437723.png" alt="ollama qwen2.5-3b model"></p><p>我们直接在刚才找到的模型中, 点击 <code>Files and versions</code>, 找到在 ollama 中找到的版本, 点击下载</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121440090.png" alt="download qwen2.5-3b"></p><p>2.将下载后的文件上传到服务器的目录 <code>/data/ollama</code>, 并重命名为 qwen2.5-3b.gguf, (重命名为了方便后面引用)<br>3.在 <code>/data/ollama</code> 目录下创建文件 <code>Modelfile</code>, 添加如下内容</p><pre><code class="dockerfile"># 上一步的模型名FROM ./qwen2.5-3b.gguf# 可以到 ollama 网站上的模型库去寻找, 如 qwen2.5-3b 的模板地址: https://ollama.com/library/qwen2.5:3b/blobs/eb4402837c78# 直接复制 ollama 上的 Template 到如下三个双引号中间TEMPLATE &quot;&quot;&quot;&#123;&#123;- if .Messages &#125;&#125;&#123;&#123;- if or .System .Tools &#125;&#125;&lt;|im_start|&gt;system&#123;&#123;- if .System &#125;&#125;&#123;&#123; .System &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- if .Tools &#125;&#125;# ToolsYou may call one or more functions to assist with the user query.You are provided with function signatures within &lt;tools&gt;&lt;/tools&gt; XML tags:&lt;tools&gt;&#123;&#123;- range .Tools &#125;&#125;&#123;&quot;type&quot;: &quot;function&quot;, &quot;function&quot;: &#123;&#123; .Function &#125;&#125;&#125;&#123;&#123;- end &#125;&#125;&lt;/tools&gt;For each function call, return a json object with function name and arguments within &lt;tool_call&gt;&lt;/tool_call&gt; XML tags:&lt;tool_call&gt;&#123;&quot;name&quot;: &lt;function-name&gt;, &quot;arguments&quot;: &lt;args-json-object&gt;&#125;&lt;/tool_call&gt;&#123;&#123;- end &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- range $i, $_ := .Messages &#125;&#125;&#123;&#123;- $last := eq (len (slice $.Messages $i)) 1 -&#125;&#125;&#123;&#123;- if eq .Role "user" &#125;&#125;&lt;|im_start|&gt;user&#123;&#123; .Content &#125;&#125;&lt;|im_end|&gt;&#123;&#123; else if eq .Role "assistant" &#125;&#125;&lt;|im_start|&gt;assistant&#123;&#123; if .Content &#125;&#125;&#123;&#123; .Content &#125;&#125;&#123;&#123;- else if .ToolCalls &#125;&#125;&lt;tool_call&gt;&#123;&#123; range .ToolCalls &#125;&#125;&#123;&quot;name&quot;: &quot;&#123;&#123; .Function.Name &#125;&#125;&quot;, &quot;arguments&quot;: &#123;&#123; .Function.Arguments &#125;&#125;&#125;&#123;&#123; end &#125;&#125;&lt;/tool_call&gt;&#123;&#123;- end &#125;&#125;&#123;&#123; if not $last &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- else if eq .Role "tool" &#125;&#125;&lt;|im_start|&gt;user&lt;tool_response&gt;&#123;&#123; .Content &#125;&#125;&lt;/tool_response&gt;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- if and (ne .Role "assistant") $last &#125;&#125;&lt;|im_start|&gt;assistant&#123;&#123; end &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- else &#125;&#125;&#123;&#123;- if .System &#125;&#125;&lt;|im_start|&gt;system&#123;&#123; .System &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&#123;&#123; if .Prompt &#125;&#125;&lt;|im_start|&gt;user&#123;&#123; .Prompt &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&lt;|im_start|&gt;assistant&#123;&#123; end &#125;&#125;&#123;&#123; .Response &#125;&#125;&#123;&#123; if .Response &#125;&#125;&lt;|im_end|&gt;&#123;&#123; end &#125;&#125;&quot;&quot;&quot;# 这一步参考 ollama 上的 parameters, 但是 ollama 上的 qwen2.5-3b 是没有参数的, 按照下面的格式添加即可PARAMETER stop &quot;&lt;|im_start|&gt;&quot;PARAMETER stop &quot;&lt;|im_end|&gt;&quot;</code></pre><p>4.执行如下命令, 加载并运行离线模型</p><pre><code class="bash"># 通过模型描述文件, 创建并运行 qwen2.5 模型ollama create qwen2.5 -f Modelfile# 查看模型运行列表, 是否正在运行ollama ls# 通过 api 调用模型, 检测模型是否运行正常curl --location --request POST &#39;http://127.0.0.1:11434/api/generate&#39; \--header &#39;Content-Type: application/json&#39; \--data &#39;&#123;    &quot;model&quot;: &quot;qwen2.5&quot;,    &quot;stream&quot;: false,    &quot;prompt&quot;: &quot;你好, 24节气的第一个节气是什么?&quot;&#125;&#39; \-w &quot;Time Total: %&#123;time_total&#125;s\n&quot;</code></pre><p>如下图, 正常返回回答内容, 表示模型成功安装<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121030889.png" alt="api/generate"></p><h2 id="Llama3-2-3b"><a href="#Llama3-2-3b" class="headerlink" title="Llama3.2-3b"></a>Llama3.2-3b</h2><p>1.下载模型, 可以到 <a href="https://huggingface.co/QuantFactory/Llama-3.2-3B-GGUF">huggingface</a> 上搜索对应模型的 gguf 版本, 如搜索 <code>llama3.2-3b-gguf</code></p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121034782.png" alt="search huggingface model"></p><p>具体选那个微调版本都可以, 我们这里参考 ollama 上选择的模型版本, 如下图</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121445150.png" alt="ollama llama3.2-3b model"></p><p>我们直接在刚才找到的模型中, 点击 <code>Files and versions</code>, 找到在 ollama 中找到的版本, 点击下载</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121448569.png" alt="download llama3.2-3b"></p><p>2.将下载后的文件上传到服务器的目录 <code>/data/ollama</code>, 并重命名为 <code>llama3.2-3b.gguf</code>, (重命名为了方便后面引用)<br>3.在 <code>/data/ollama</code> 目录下创建文件 <code>Modelfile</code>, 添加如下内容</p><pre><code class="dockerfile"># 上一步的模型名FROM ./llama3.2-3b.gguf# 可以到 ollama 网站上的模型库去寻找, 如 llama3.2-3b 的模板地址: https://ollama.com/library/llama3.2/blobs/966de95ca8a6# 直接复制 ollama 上的 Template 到如下三个双引号中间TEMPLATE &quot;&quot;&quot;&lt;|start_header_id|&gt;system&lt;|end_header_id|&gt;Cutting Knowledge Date: December 2023&#123;&#123; if .System &#125;&#125;&#123;&#123; .System &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- if .Tools &#125;&#125;When you receive a tool call response, use the output to format an answer to the orginal user question.You are a helpful assistant with tool calling capabilities.&#123;&#123;- end &#125;&#125;&lt;|eot_id|&gt;&#123;&#123;- range $i, $_ := .Messages &#125;&#125;&#123;&#123;- $last := eq (len (slice $.Messages $i)) 1 &#125;&#125;&#123;&#123;- if eq .Role "user" &#125;&#125;&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;&#123;&#123;- if and $.Tools $last &#125;&#125;Given the following functions, please respond with a JSON for a function call with its proper arguments that best answers the given prompt.Respond in the format &#123;&quot;name&quot;: function name, &quot;parameters&quot;: dictionary of argument name and its value&#125;. Do not use variables.&#123;&#123; range $.Tools &#125;&#125;&#123;&#123;- . &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; .Content &#125;&#125;&lt;|eot_id|&gt;&#123;&#123;- else &#125;&#125;&#123;&#123; .Content &#125;&#125;&lt;|eot_id|&gt;&#123;&#123;- end &#125;&#125;&#123;&#123; if $last &#125;&#125;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- else if eq .Role "assistant" &#125;&#125;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;&#123;&#123;- if .ToolCalls &#125;&#125;&#123;&#123; range .ToolCalls &#125;&#125;&#123;&quot;name&quot;: &quot;&#123;&#123; .Function.Name &#125;&#125;&quot;, &quot;parameters&quot;: &#123;&#123; .Function.Arguments &#125;&#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123;- else &#125;&#125;&#123;&#123; .Content &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123; if not $last &#125;&#125;&lt;|eot_id|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- else if eq .Role "tool" &#125;&#125;&lt;|start_header_id|&gt;ipython&lt;|end_header_id|&gt;&#123;&#123; .Content &#125;&#125;&lt;|eot_id|&gt;&#123;&#123; if $last &#125;&#125;&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;&#123;&#123; end &#125;&#125;&#123;&#123;- end &#125;&#125;&#123;&#123;- end &#125;&#125;&quot;&quot;&quot;# 这一步参考 ollama 上的 parameters, llama3.2-3b 的 params: https://ollama.com/library/llama3.2/blobs/56bb8bd477a5PARAMETER stop &quot;&lt;|start_header_id|&gt;&quot;PARAMETER stop &quot;&lt;|end_header_id|&gt;&quot;PARAMETER stop &quot;&lt;|eot_id|&gt;&quot;</code></pre><p>4.执行如下命令, 加载并运行离线模型</p><pre><code class="bash"># 通过模型描述文件, 创建并运行 qwen2.5 模型ollama create llama3.2 -f Modelfile# 查看模型运行列表, 是否正在运行ollama ls# 通过 api 调用模型, 检测模型是否运行正常curl --location --request POST &#39;http://127.0.0.1:11434/api/generate&#39; \--header &#39;Content-Type: application/json&#39; \--data &#39;&#123;    &quot;model&quot;: &quot;llama3.2&quot;,    &quot;stream&quot;: false,    &quot;prompt&quot;: &quot;你好, 24节气的第一个节气是什么?&quot;&#125;&#39; \-w &quot;Time Total: %&#123;time_total&#125;s\n&quot;</code></pre><p>如下图, 正常返回回答内容, 表示模型成功安装<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410121041193.png" alt="api/generate"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><code>Ollama</code> 是非常好用的模型安装工具, 希望大家玩的开心! 如果安装有问题或者有什么使用技巧都可以在评论区交流~~~</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ollama </tag>
            
            <tag> Offline </tag>
            
            <tag> Tutorial </tag>
            
            <tag> Installation Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Find cause of memory leak on Java</title>
      <link href="/2024/10/09/find-cause-of-memory-leak-on-java/"/>
      <url>/2024/10/09/find-cause-of-memory-leak-on-java/</url>
      
        <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>最近一年多, <code>job</code> 经常有如下<strong>告警</strong>, 告警内容如下</p><p>尊敬的用户，您关注的监控已触发警报，内容如下，请您关注！</p><blockquote><p>Dear user, the following monitoring alert you are concerned about is triggered, please pay attention!</p><p>Summary: [MonitoringID: MOC0000000606595] [Tingyun Alert] [LEMES-PCG-Prod_MajorGc]lemes-job-outbound-executor-idg-lssc-prodJVM每分钟Major GC时间 alert triggered</p><p>Notes: [Details:违反规则告警，APM应用实例&#x2F;lemes-job-outbound-executor-54858fdf5b-dsxrq:0(10.188.138.17)，告警级别:严重,JVM每分钟Major GC时间大于阈值(JVM每分钟Major GC时间:2,490ms&gt;阈值:900ms)] [EventID:85882166655658][TriggerTime: 2024-09-30 15:52:00]</p><p>由于 job 停一下也没问题, 外加精力在其他任务上, 所以每次都是通过重启来解决问题</p></blockquote><h1 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a>二、原因分析</h1><p>国庆前又发了告警邮件, 觉得这个问题优先级可以提到前面了…</p><p>首先根据问题出现的频率分析, 大概是每个 <code>job</code> 运行几个月以上就开始报上面的告警, 根据不同 <code>job</code> 微服务的强度不同, 尤其是 <code>outbound</code>, 大概两个月就开始告警了…</p><p>所以基本定位问题为内存泄漏, 比如有框架或者开发的代码存在内存没释放的问题, 如IO流、数据库连接等没关闭的问题</p><p>这种问题可以直接对当前的微服务内存进行分析(导出内存快照)</p><p>1.我们的微服务是运行在 <code>k8s</code> 上的, 所以首先通过 <code>Rancher</code> 进入出问题的微服务的命令行, 通过如下命令对内存快照进行导出, 因为我们的 &#x2F;data&#x2F;logs  目录已经映射到宿主机了, 所以我们可以导出到这个目录</p><pre><code class="bash"># 找到当前微服务的进程 idjps# 假如是9, 我们将其放到最后jmap -dump:live,format=b,file=/data/logs/lemes-job-outbound-executor/lemes-job-outbound-executor.hprof 9</code></pre><p>2.然后我们将导出的 <code>lemes-job-outbound-executor.hprof</code> 文件从宿主机上下载到本地电脑上</p><p>3.通过 <code>IDEA</code> 的 <code>Profiler</code> 进行内存分析, 可以在 IDEA→ View → Tool Windows → Profiler</p><p>4.然后点击 <strong>Open Snapshot</strong>  , 选择我们刚才下载的文件</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410091148848.png" alt="Open Snapshot"></p><p>5.然后点击右边的 <code>Biggest Objects → Calculate retained size and biggest objects</code> 来进行大对象分析</p><p>6.发现在 <code>ThreadLocal</code> 中的 <code>ArrayDeque</code> 的占用非常大, 根据 <code>referent</code> 分析, 来自于 <code>DynamicDataSourceContextHolder</code> 中的, 并且查看 <code>elements</code> 中都是数据源的名字</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410091149828.png" alt="Find biggest objects"></p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410091153140.png" alt="DynamicDataSourceContextHolder"></p><p>7.分析出是关于多数据源框架的问题, 还是要分析出来是使用问题, 还是框架中问题. 我们直接来到上面找到的类 DynamicDataSourceContextHolder, 找到了内存泄漏的变量是存储用于切换数据源的栈, 并且在这个文件中还找到了一句话, <strong>防止内存泄漏，如手动调用了push可调用此方法确保清除</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410091153383.png" alt="biggest objects"></p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202410091154971.png" alt="message"></p><p>8.也就是通过 <code>DynamicDataSourceContextHolder.push(xxx);</code> 切换数据源后, 是需要手动调用 <code>poll()</code> 方法进行移除, 或者在任务执行结束后调用 <code>clear()</code>, 进行清空.</p><p>9.查看代码后, 发现 <code>job</code> 中有 <code>DynamicDataSourceContextHolder.push(xxx)</code> 的操作, 却没有移除的方法, 所以定位到了问题.</p><h1 id="三、解决问题"><a href="#三、解决问题" class="headerlink" title="三、解决问题"></a>三、解决问题</h1><p>根据上一步我们知道了问题出在了没有进行移除操作, 移除操作有两种, 我们去每个执行 push 的地方进行 <code>poll()</code> 移除是比较麻烦的, 也不能避免再有同学漏掉 <code>poll()</code>, 从而导致问题复现.</p><p>所以我打算在 <code>job</code> 执行结束后, 统一调用 <code>DynamicDataSourceContextHolder.clear()</code> 来进行清空操作, 问了同事当前 <code>job</code> 框架是没有统一的开始和结束的地方, 但是所以 <code>job</code> 都是实现 <code>SimpleJob</code> 的 <code>execute</code> 方法来执行的, 所以可以使用切面来统一处理. 代码如下:</p><pre><code class="java">package com.lenovo.lemes.job.core.executor.interceptor; import com.baomidou.dynamic.datasource.toolkit.DynamicDataSourceContextHolder;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.springframework.context.annotation.EnableAspectJAutoProxy;import org.springframework.stereotype.Component; /** * 任务拦截器 * 用于在任务执行前后做一些操作 * * @author Yujie Yang * @date 2024/10/8 10:55 */@Aspect@Component@EnableAspectJAutoProxypublic class JobInterceptor &#123;     // 定义切入点，匹配实现了 SimpleJob 接口的类的 execute 方法    // 正则解释: Pointcut 由两部分组成, 第一 execution 指明了切入的方法的全路径规则, 第二部分 target 限制了切入的类必须实现 SimpleJob 接口    @Pointcut(&quot;execution(void com.lenovo.lemes.job..jobhandler..*.execute(org.apache.shardingsphere.elasticjob.api.ShardingContext)) &amp;&amp; target(org.apache.shardingsphere.elasticjob.simple.job.SimpleJob)&quot;)    public void executeMethodPointcut() &#123;    &#125;     @After(&quot;executeMethodPointcut()&quot;)    public void afterJob(JoinPoint joinPoint) &#123;        // 在 execute 方法执行完成后清理数据源上下文        DynamicDataSourceContextHolder.clear();    &#125; &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> memory-leak </tag>
            
            <tag> jvm </tag>
            
            <tag> heap-dump </tag>
            
            <tag> jprofiler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串规范化(NFC/NFD)问题</title>
      <link href="/2024/09/30/string-normalize-nfc-nfd/"/>
      <url>/2024/09/30/string-normalize-nfc-nfd/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近同事在接入西班牙语的数据时, 发现了一个问题, 涉及到西班牙语中包含重音符号的数据比对出了问题, 同事已经找出可能是字符串规范化(<code>Normalize</code>)的问题, 但是现象很奇怪, 今天就做了一些测试, 将测试结果记录下来. 以供大家参考.</p><p>常用规范化:</p><ul><li>NFC: 规范化组合型, 如 <code>é</code> 是一个字符</li><li>NFD: 规范化分解型, 如 <code>é</code> 是两个字符 <code>e</code> 和 <code>´</code></li><li>NFKC: 兼容性规范化组合型</li><li>NFKD: 兼容性规范化分解型</li></ul><h1 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h1><p>在 HTML&#x2F;JavasCript&#x2F;Java&#x2F;PostGreSQL 中, 不会自动对字符串的规范话进行转换, 也就是说, 从前端(html&#x2F;js)传递到后端(java), 再传递到数据库(PostGreSQL)的过程中, 字符串的规范化是不变的, 所以只是文字传递, 不会出现问题.</p><p>出问题的地方是文件系统:</p><ul><li>Windows 文件系统（如 NTFS）通常使用 <code>NFC</code> 形式存储文件名。</li><li>macOS 文件系统（如 HFS+ 或 APFS）通常使用 <code>NFD</code> 形式存储文件名。</li><li>Linux 文件系统（如 ext4）通常使用 <code>NFC</code>，但这也可能因环境和设置而异。</li></ul><p>导致上传文件时, 文件名的规范化不一致, 会导致文件名比对是不一致的.</p><h1 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h1><p>同名的文件名上传时, 会进入数据库比对一下文件名是否存在, 但是由于文件名的规范化不一致, 会导致文件名比对不一致. 从而重复上传文件.</p><p>比如我们做一个简单的测试, 如下代码, 页面上有两个元素, 一个文本输入框, 一个文件上传框, 当文件上传框选择文件后, 会比对文件名和文本输入框的值是否一致, 如果不一致, 则提示文件名不一致.</p><p>我们在本地新建一个文件, 文件名为 <code>é.txt</code>, 这个文件名的文本是 <code>NFC</code> 的形式, 当 <code>MacOS</code> 去页面上传文件, 会提示文件名不一致, windows 则提示文件名一致.</p><p>这是因为 <code>MacOS</code> 文件系统使用 <code>NFD</code> 形式存储文件名, 和文本输入框的值(<code>NFC</code>)不一致, 导致比对不一致.</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;text&quot; name=&quot;filename&quot; value=&quot;é.txt&quot; id=&#39;filename&#39;&gt;&lt;input type=&quot;file&quot; multiple accept=&quot;*/*&quot; onchange=&quot;previewFiles()&quot; id=&quot;fileInput&quot;&gt;&lt;/body&gt;&lt;script&gt;    // 监听事件,    const previewFiles = (e) =&gt; &#123;        const files = document.querySelector(&#39;#fileInput&#39;).files;        const filename = document.querySelector(&#39;#filename&#39;).value;        console.log(&#39;filename normalize:&#39;, detectNormalizationForm(filename));        console.log(&#39;file.name normalize:&#39;, detectNormalizationForm(files[0].name));        // 比对 id 为 filename 的值 和 上传的文件名是否一致        if (files.length === 0 || files[0].name !== filename) &#123;            alert(&#39;文件名不一致&#39;);            return;        &#125; else &#123;            alert(&#39;文件名一致&#39;);        &#125;    &#125;    function detectNormalizationForm(str) &#123;        if (str === str.normalize(&#39;NFC&#39;)) &#123;            return &#39;NFC&#39;;        &#125; else if (str === str.normalize(&#39;NFD&#39;)) &#123;            return &#39;NFD&#39;;        &#125; else if (str === str.normalize(&#39;NFKC&#39;)) &#123;            return &#39;NFKC&#39;;        &#125; else if (str === str.normalize(&#39;NFKD&#39;)) &#123;            return &#39;NFKD&#39;;        &#125; else &#123;            return &#39;Unknown&#39;;  // 如果没有匹配的规范化形式        &#125;    &#125;&lt;/script&gt;&lt;/html&gt;</code></pre><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端可以在 <code>axios</code>&#x2F;<code>ajax</code> 等统一请求的地方, 对请求的参数进行规范化, 保证传递的参数是 <code>NFC</code> 形式.</p><p>在前端处理是有局限性的, 比如上传文件时, 无法对文件内容进行处理</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>后端也有几个地方需要处理</p><ol><li>拦截 <code>Controller</code>, <code>HandlerInterceptor</code> 等请求处理的地方, 对请求参数进行规范化</li><li><code>Excel</code> 工具类, 解析成对象的地方, 对 <code>Excel</code> 中的字符串进行规范化(要求所有上传的 <code>Excel</code> 都使用这个方法进行解析)</li></ol><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>可以在 Mybatis 拦截器中, 对所有的 <code>SQL</code> 进行规范化, 保证数据库中的数据都是 <code>NFC</code> 形式.</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><blockquote><p>如无必要, 勿增实体.</p></blockquote><p>字符串作为系统中最常用的类型, 全部添加规范化会对系统的性能产生一定的影响. 系统如果涉及到重音符号的地方不多, 可以只在必要的地方进行规范化.</p>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> javascript </tag>
            
            <tag> encoding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最强跳转插件 flash.nvim 在 ideavim 上使用是中什么体验</title>
      <link href="/2024/09/05/ideavim-flash/"/>
      <url>/2024/09/05/ideavim-flash/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近两三年都从 <code>Vim</code> 迁移到 <code>NeoVim</code> 之后, 使用到了非常多好用的插件, 尤其是跳转插件 <a href="https://github.com/folke/flash.nvim">folke&#x2F;flash.nvim</a> , 非常方便, 日常文档及一些软件开发(Web, rust, lua, python) 等已经在 <code>NeoVim</code> 下完成了</p><p>但是 <code>Java</code> 一直没有配置到像 <code>IntelijIdea</code> 那么方便, 所以 <code>Java</code> 的开发还是在 <code>IntelijIdea</code> 中完成, 好在有 <code>IdeaVim</code> 这个非常棒的插件, 大部分的 <code>Vim</code> 功能完成度非常高.</p><p>最大的缺点就是没有 <code>Vim</code>, <code>NeoVim</code> 的丰富的插件生态, 尤其是日常使用频率非常高的 <code>flash.nvim</code>, 所以就自己开发了一个在 <code>IdeaVim</code> 上的插件 <a href="https://github.com/yelog/vim-flash">vim-flash</a></p><blockquote><p>题外话: 本来叫 <code>ideavim-flash</code> 的, 在上传插件的时候, 因为存在关键字 <code>idea</code> 被驳回, 所以改名为 <code>vim-flash</code>.</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h2><p>插件市场安装: Setting -&gt; Plugins -&gt; Marketplace -&gt; 搜索 <code>vim-flash</code>, 作者为 <code>yelog</code>, 然后点击安装.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202409052305048.png" alt="插件市场安装"></p><h2 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h2><ol><li>到官方仓库的 <code>Release</code> 中下载 <code>vim-flash-xxx.zip</code> 包, 地址 <a href="https://github.com/yelog/vim-flash/releases">vim-flash-release</a></li><li>Idea -&gt; Setting -&gt; Plugins -&gt; Install 旁边的齿轮 -&gt; Install Plugin from disk -&gt; 选择刚刚下载的 <code>vim-flash-xxx.zip</code> 包即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202409052310873.png" alt="离线安装"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>安装完成之后, 点击右下角的 <code>IdeaVim</code> 图标, 点击 <code>Open ~/.ideavimrc</code></p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202409052311037.png" alt="编辑 ideavimrc"></p><p>添加 <code>map s &lt;Action&gt;(flash.search)</code> 到最后一行, 然后点击右上角的刷新图标</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202409052313446.png" alt="添加配置"></p><h1 id="使用和效果"><a href="#使用和效果" class="headerlink" title="使用和效果"></a>使用和效果</h1><h2 id="Normal-Mode"><a href="#Normal-Mode" class="headerlink" title="Normal Mode"></a>Normal Mode</h2><p>打开一个文件, 按 <code>Esc</code> 进入 <code>IdeaVim</code> 的 <code>Normal</code> 模式下, 比如我们要定位到 <code>MarksCanvas</code> 这个单词, 我们可以依次按键盘的字母: <code>smarks</code></p><ol><li>现在所有以包含 <code>marks</code> 的文字都高亮了, 并且后面跟着一个字母, 当我们按下某一个字母后, 就会发现光标到达了这个高亮处, 这就是这个插件的跳转功能.</li><li>有一个高丽是橙色底的, 那是距离我们光标最近的位置, 当我们按下 <strong>回车</strong> 后, 光标会跳转到这个高亮处.</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202409052324760.gif" alt="vim-flash-normal-usage"></p><h2 id="Visual-Mode"><a href="#Visual-Mode" class="headerlink" title="Visual Mode"></a>Visual Mode</h2><p>打开一个文件, 按 <code>v</code> 进入 <code>IdeaVim</code> 的 <code>Visual</code> 模式下, 我们可以通过类似于上面的跳转方式, 进行跳转选中</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202409052328220.gif" alt="vim-flash-vistual-usage"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>我是一个热爱技术, 崇尚效率和善于利用工具的人, 我会持续分享所得, 如果有收获, 请帮忙点赞, 评论,  点 <code>start</code>, 谢谢!!!</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> neovim </tag>
            
            <tag> ideavim </tag>
            
            <tag> idea </tag>
            
            <tag> jetbrain </tag>
            
            <tag> editor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适合个人开发者的免费软件</title>
      <link href="/2024/08/30/free-tools/"/>
      <url>/2024/08/30/free-tools/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章是听《硬地骇客》的EP19 “白嫖” SaaS 工具，零成本起步开发一款产品</p><p><a href="https://hardhacker.com/tools">https://hardhacker.com/tools</a></p><h2 id="涉及工具"><a href="#涉及工具" class="headerlink" title="涉及工具"></a>涉及工具</h2><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ol><li>Vercel 快速部署和扩展前端应用<br> a. <a href="https://vercel.com/">https://vercel.com</a><br> b. 100G&#x2F;月<br> c. 免费独立域名</li><li>netlify 托管和部署静态页面 CDN加速<br> a. <a href="https://netlify.com/">https://netlify.com</a><br> b. 100G&#x2F;月<br> c. 免费绑定域名</li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li>PlanetScale 数据库服务 vitess， 能够处理大规模数据的存储和查询需求<br> a. 5G存储<br> b. 1B行读取<br> c. 10M行写入<br> d. <a href="https://planetscale.com/">https://planetscale.com</a></li></ol><h3 id="CND"><a href="#CND" class="headerlink" title="CND"></a>CND</h3><ol><li>Cloudfare 网页应用， 提供 CDN加速、DDos攻击防护、SSL加密、防火墙、缓存优化等<br> a. 3个 CDN 页面规则<br> b. SSL证书<br> c. DDos防御<br> d. <a href="https://cloudflare.com/">https://cloudflare.com</a></li></ol><h3 id="权限校验"><a href="#权限校验" class="headerlink" title="权限校验"></a>权限校验</h3><ol><li>Supabase 提供 pgsql 的开发平台，能够快速搭建和扩展应用程序后端， 提供数据库、实施推送、身份验证、文件存储等<br> a. 50000月活用户<br> b. 200并发连接<br> c. <a href="https://supabase.com/">https://supabase.com</a></li><li>clerk 用户验证管理， 集成角色&#x2F;权限管理等<br> a. 5000月活用户<br> b. <a href="https://clerk.com/">https://clerk.com</a></li></ol><h3 id="email"><a href="#email" class="headerlink" title="email"></a>email</h3><ol><li>Amazon SES: 通过简单的 api 调用或 smtp 接口来发送和接收邮件<br> a. 62000封&#x2F;月<br> b. <a href="https://aws.amazon.com/ses/">https://aws.amazon.com/ses/</a></li><li>Resend 简单优雅， 致力于做最好的邮件API<br> a. 3000封&#x2F;月<br> b. <a href="https://resend.com/">https://resend.com</a></li></ol><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><ol><li>Notions<br> a. 提供了灵活的工作区， 让用户可以创建和组织各种类型的内容，如文本、表格、任务列表、日历等， 强大的协作功能<br> b. 无限页面<br> c. 10个合作者<br> d. notion.site 域名<br> e. <a href="https://notion.so/">https://notion.so/</a></li></ol><h3 id="Payment"><a href="#Payment" class="headerlink" title="Payment"></a>Payment</h3><ol><li>Stripe 全面的支付服务，支持信用卡、借记卡和其他支付方式<br> a. 费率 2.9% + 30<br> b. <a href="https://stripe.com/">https://stripe.com/</a></li><li>Paypal 广泛使用、电子商务、个人转账和在线付款<br> a. 4.4% + 30<br> b. <a href="https://paypal.com/">https://paypal.com</a></li><li>Lemon Squeezy 简单易用的支付服务商，特点：便捷、灵活、安全。帮用户轻松实现跨境支付<br> a. 5% + 50<br> b. <a href="https://lemonsqueezy.com/">https://lemonsqueezy.com</a></li><li>Paddle 综合解决方案：支付处理、订阅管理、许可证控制和全球化销售<br> a. 5% + 50<br> b. <a href="https://paddle.com/">https://paddle.com/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> free </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ranger(终端文件管理器)-快捷键</title>
      <link href="/2024/08/30/ranger-shortcut/"/>
      <url>/2024/08/30/ranger-shortcut/</url>
      
        <content type="html"><![CDATA[<h2 id="ranger"><a href="#ranger" class="headerlink" title="ranger"></a>ranger</h2><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ra</td><td align="left">启动应用</td></tr><tr><td align="left">q</td><td align="left">退出应用</td></tr><tr><td align="left">zh</td><td align="left">显示&#x2F;隐藏 隐藏文件</td></tr><tr><td align="left">zp</td><td align="left">打开&#x2F;关闭文件预览</td></tr><tr><td align="left">zP</td><td align="left">打开目录预览功能</td></tr><tr><td align="left">w</td><td align="left">打开&#x2F;关闭任务管理器 - 可以通过 dd 取消一个任务（比如正在移动一个大文件，取消之后就相当于没有操作</td></tr></tbody></table><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">yy</td><td align="left">复制</td></tr><tr><td align="left">yp</td><td align="left">复制全路径</td></tr><tr><td align="left">pp</td><td align="left">粘贴</td></tr><tr><td align="left">po</td><td align="left">粘贴并替换</td></tr><tr><td align="left">dd</td><td align="left">剪切</td></tr><tr><td align="left">dD</td><td align="left">删除</td></tr><tr><td align="left">cw</td><td align="left">重命名&#x2F;如果选中文件则bulkrename</td></tr><tr><td align="left">o</td><td align="left">排序</td></tr><tr><td align="left">A</td><td align="left">重命名, 在当前文件名基础上，光标在当前文件名后</td></tr><tr><td align="left">I</td><td align="left">重命名，在当前文件看基础上，光标在当前文件名前</td></tr><tr><td align="left">v</td><td align="left">全选&lt;当前目录 切换 如果选中则取消选中；如果没有选中, 则选中&gt;</td></tr><tr><td align="left">uv</td><td align="left">取消所有选中</td></tr><tr><td align="left">space</td><td align="left">选中或取消当前光标所在文件&#x2F;目录</td></tr><tr><td align="left">:bulkrename</td><td align="left">编辑选中的文件名</td></tr><tr><td align="left">C</td><td align="left">压缩文件，file.zip</td></tr><tr><td align="left">X</td><td align="left">解压文件 需要先复制文件在执行</td></tr></tbody></table><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">E</td><td align="left">使用vim编辑光标所在的文件</td></tr><tr><td align="left">V</td><td align="left">使用vim编辑输入的文件（可创建</td></tr><tr><td align="left">r</td><td align="left">选择编辑或运行的命令</td></tr></tbody></table><h3 id="移动跳转"><a href="#移动跳转" class="headerlink" title="移动跳转"></a>移动跳转</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">hjkl</td><td align="left">左(上一层)下上右(下一层)</td></tr><tr><td align="left">[&#x2F;]</td><td align="left">上层目录的上&#x2F;xx</td></tr><tr><td align="left">gg&#x2F;G</td><td align="left">顶部&#x2F;底部</td></tr><tr><td align="left">H&#x2F;L</td><td align="left">回到上次浏览文件夹&#x2F;撤销回退</td></tr><tr><td align="left">f</td><td align="left">模糊搜索当前及递归文件 fzf</td></tr><tr><td align="left">zf</td><td align="left">过滤，只显示搜索匹配的文件</td></tr><tr><td align="left">&#x2F;</td><td align="left">当前目录搜索关键字 输入关键字后可直接 tab 进行查找</td></tr><tr><td align="left">gf</td><td align="left">跳到 f 绑定的目录，这里配置的是 ranger 的配置文件，其他字母可自己配置</td></tr><tr><td align="left">S</td><td align="left">跳到当前文件夹所在的命令行</td></tr></tbody></table><h3 id="标签-tab"><a href="#标签-tab" class="headerlink" title="标签 tab"></a>标签 tab</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">gn</td><td align="left">新建标签</td></tr><tr><td align="left">gc</td><td align="left">删除标签</td></tr><tr><td align="left">tab</td><td align="left">切换标签</td></tr><tr><td align="left">gt</td><td align="left">切换标签 1</td></tr><tr><td align="left">gT</td><td align="left">切换标签 -1</td></tr></tbody></table><h3 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#96;</td><td align="left">显示书签列表&#x2F;打开书签</td></tr><tr><td align="left">m</td><td align="left">新建书签</td></tr><tr><td align="left">um</td><td align="left">删除书签</td></tr><tr><td align="left">V</td><td align="left">vim 文件，可以通过这个快捷键新建文件</td></tr></tbody></table><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>2024-08-30 现在已经转战到了 <a href="https://github.com/sxyazi/yazi">yazi</a> 了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> terminal </tag>
            
            <tag> file-manager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rancher 常用操作</title>
      <link href="/2024/08/30/rancher-operations/"/>
      <url>/2024/08/30/rancher-operations/</url>
      
        <content type="html"><![CDATA[<h3 id="创建-Rancher-Server-数据副本"><a href="#创建-Rancher-Server-数据副本" class="headerlink" title="创建 Rancher Server 数据副本"></a>创建 Rancher Server 数据副本</h3><pre><code class="bash">docker stop lemes-rancher-2.5docker create --volumes-from lemes-rancher-2.5 --name rancher-data-2023-02-21 rancher/rancher:v2.5.12</code></pre><h3 id="创建备份压缩包"><a href="#创建备份压缩包" class="headerlink" title="创建备份压缩包"></a>创建备份压缩包</h3><pre><code class="bash">docker run --volumes-from rancher-data-2023-02-21 -v $PWD:/backup busybox tar zcvf /backup/rancher-data-backup-2023-02-21.tar.gz /var/lib/rancher</code></pre><h3 id="拉去最新镜像"><a href="#拉去最新镜像" class="headerlink" title="拉去最新镜像"></a>拉去最新镜像</h3><pre><code class="bash">docker pull rancher/rancher:v2.5.12docker run -d --restart=unless-stopped \  --volumes-from rancher-data-backup-2023-02-20 \  -p 80:80 -p 443:443 \  --privileged \  --name=lemes-rancher-2.6 \  rancher/rancher:v2.5.12</code></pre><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="升级镜像"><a href="#升级镜像" class="headerlink" title="升级镜像"></a>升级镜像</h3><pre><code class="bash">curl -k -X GET -H &#39;Accept: application/json&#39; -H &#39;Accept: application/json&#39; -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer token-fpcvv:6k4s8klp5hg9bmdp25x99hgd5hs7s94rlfsxz7pvn2hfp9sp2xdz6m&#39; &#39;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-auth&#39;curl -k -X PUT -H &#39;Accept: application/json&#39; -H &#39;Accept: application/json&#39; -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer token-fpcvv:6k4s8klp5hg9bmdp25x99hgd5hs7s94rlfsxz7pvn2hfp9sp2xdz6m&#39; -d &#39;&#123;&quot;actions&quot;:&#123;&quot;pause&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway?action=pause&quot;,&quot;redeploy&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway?action=redeploy&quot;,&quot;resume&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway?action=resume&quot;,&quot;rollback&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway?action=rollback&quot;&#125;,&quot;annotations&quot;:&#123;&quot;cattle.io/timestamp&quot;:&quot;2022-04-24T14:29:549+0800&quot;&#125;,&quot;baseType&quot;:&quot;workload&quot;,&quot;containers&quot;:[&#123;&quot;environmentFrom&quot;:[&#123;&quot;optional&quot;:false,&quot;source&quot;:&quot;field&quot;,&quot;sourceName&quot;:&quot;metadata.name&quot;,&quot;targetKey&quot;:&quot;POD_NAME&quot;&#125;,&#123;&quot;optional&quot;:false,&quot;source&quot;:&quot;field&quot;,&quot;sourceName&quot;:&quot;metadata.namespace&quot;,&quot;targetKey&quot;:&quot;POD_NAMESPACE&quot;&#125;,&#123;&quot;optional&quot;:false,&quot;source&quot;:&quot;configMap&quot;,&quot;sourceKey&quot;:&quot;nacos.addr&quot;,&quot;sourceName&quot;:&quot;lemes-cm&quot;,&quot;targetKey&quot;:&quot;NACOS_ADDR&quot;&#125;,&#123;&quot;optional&quot;:false,&quot;source&quot;:&quot;configMap&quot;,&quot;sourceKey&quot;:&quot;nacos.group&quot;,&quot;sourceName&quot;:&quot;lemes-cm&quot;,&quot;targetKey&quot;:&quot;NACOS_GROUP&quot;&#125;,&#123;&quot;optional&quot;:false,&quot;source&quot;:&quot;configMap&quot;,&quot;sourceKey&quot;:&quot;nacos.namespace&quot;,&quot;sourceName&quot;:&quot;lemes-cm&quot;,&quot;targetKey&quot;:&quot;NACOS_NAMESPACE&quot;&#125;,&#123;&quot;optional&quot;:false,&quot;source&quot;:&quot;configMap&quot;,&quot;sourceKey&quot;:&quot;tz&quot;,&quot;sourceName&quot;:&quot;lemes-cm&quot;,&quot;targetKey&quot;:&quot;TZ&quot;&#125;,&#123;&quot;optional&quot;:false,&quot;source&quot;:&quot;configMap&quot;,&quot;sourceKey&quot;:&quot;java.opts&quot;,&quot;sourceName&quot;:&quot;lemes-cm&quot;,&quot;targetKey&quot;:&quot;JAVA_OPTS&quot;&#125;,&#123;&quot;optional&quot;:false,&quot;source&quot;:&quot;configMap&quot;,&quot;sourceKey&quot;:&quot;java.skywalking&quot;,&quot;sourceName&quot;:&quot;lemes-cm&quot;,&quot;targetKey&quot;:&quot;SKYWALKING&quot;&#125;],&quot;image&quot;:&quot;10.176.66.20:5000/lemes-cloud/lemes-gateway:develop-202204241429&quot;,&quot;imagePullPolicy&quot;:&quot;Always&quot;,&quot;initContainer&quot;:false,&quot;livenessProbe&quot;:&#123;&quot;failureThreshold&quot;:10,&quot;initialDelaySeconds&quot;:5,&quot;path&quot;:&quot;/actuator/health/liveness&quot;,&quot;periodSeconds&quot;:5,&quot;port&quot;:80,&quot;scheme&quot;:&quot;HTTP&quot;,&quot;successThreshold&quot;:1,&quot;tcp&quot;:false,&quot;timeoutSeconds&quot;:10,&quot;type&quot;:&quot;/v3/project/schemas/probe&quot;&#125;,&quot;name&quot;:&quot;lemes-gateway&quot;,&quot;ports&quot;:[&#123;&quot;containerPort&quot;:80,&quot;dnsName&quot;:&quot;lemes-gateway&quot;,&quot;hostPort&quot;:0,&quot;kind&quot;:&quot;ClusterIP&quot;,&quot;name&quot;:&quot;80tcp02&quot;,&quot;protocol&quot;:&quot;TCP&quot;,&quot;sourcePort&quot;:0,&quot;type&quot;:&quot;/v3/project/schemas/containerPort&quot;&#125;],&quot;readinessProbe&quot;:&#123;&quot;failureThreshold&quot;:3,&quot;initialDelaySeconds&quot;:5,&quot;path&quot;:&quot;/actuator/health/readiness&quot;,&quot;periodSeconds&quot;:5,&quot;port&quot;:80,&quot;scheme&quot;:&quot;HTTP&quot;,&quot;successThreshold&quot;:1,&quot;tcp&quot;:false,&quot;timeoutSeconds&quot;:10,&quot;type&quot;:&quot;/v3/project/schemas/probe&quot;&#125;,&quot;resources&quot;:&#123;&quot;type&quot;:&quot;/v3/project/schemas/resourceRequirements&quot;&#125;,&quot;restartCount&quot;:0,&quot;stdin&quot;:false,&quot;stdinOnce&quot;:false,&quot;terminationMessagePath&quot;:&quot;/dev/termination-log&quot;,&quot;terminationMessagePolicy&quot;:&quot;File&quot;,&quot;tty&quot;:false,&quot;type&quot;:&quot;/v3/project/schemas/container&quot;,&quot;volumeMounts&quot;:[&#123;&quot;mountPath&quot;:&quot;/sidecar&quot;,&quot;name&quot;:&quot;sidecar&quot;,&quot;readOnly&quot;:false,&quot;type&quot;:&quot;/v3/project/schemas/volumeMount&quot;&#125;]&#125;,&#123;&quot;entrypoint&quot;:[&quot;cp&quot;,&quot;-r&quot;,&quot;/opt/tingyun&quot;,&quot;/sidecar&quot;],&quot;image&quot;:&quot;10.176.66.20:5000/library/tingyun:3.6.1.4&quot;,&quot;imagePullPolicy&quot;:&quot;Always&quot;,&quot;initContainer&quot;:true,&quot;name&quot;:&quot;tingyun&quot;,&quot;ports&quot;:[],&quot;resources&quot;:&#123;&quot;type&quot;:&quot;/v3/project/schemas/resourceRequirements&quot;&#125;,&quot;restartCount&quot;:0,&quot;stdin&quot;:false,&quot;stdinOnce&quot;:false,&quot;terminationMessagePath&quot;:&quot;/dev/termination-log&quot;,&quot;terminationMessagePolicy&quot;:&quot;File&quot;,&quot;tty&quot;:false,&quot;type&quot;:&quot;/v3/project/schemas/container&quot;,&quot;volumeMounts&quot;:[&#123;&quot;mountPath&quot;:&quot;/sidecar&quot;,&quot;name&quot;:&quot;sidecar&quot;,&quot;readOnly&quot;:false,&quot;type&quot;:&quot;/v3/project/schemas/volumeMount&quot;&#125;]&#125;],&quot;created&quot;:&quot;2022-04-12T04:39:45Z&quot;,&quot;createdTS&quot;:1649738385000,&quot;creatorId&quot;:null,&quot;deploymentConfig&quot;:&#123;&quot;maxSurge&quot;:&quot;25%&quot;,&quot;maxUnavailable&quot;:&quot;25%&quot;,&quot;minReadySeconds&quot;:0,&quot;progressDeadlineSeconds&quot;:600,&quot;revisionHistoryLimit&quot;:10,&quot;strategy&quot;:&quot;RollingUpdate&quot;&#125;,&quot;deploymentStatus&quot;:&#123;&quot;availableReplicas&quot;:2,&quot;conditions&quot;:[&#123;&quot;lastTransitionTime&quot;:&quot;2022-04-12T04:41:16Z&quot;,&quot;lastTransitionTimeTS&quot;:1649738476000,&quot;lastUpdateTime&quot;:&quot;2022-04-12T04:41:16Z&quot;,&quot;lastUpdateTimeTS&quot;:1649738476000,&quot;message&quot;:&quot;Deployment has minimum availability.&quot;,&quot;reason&quot;:&quot;MinimumReplicasAvailable&quot;,&quot;status&quot;:&quot;True&quot;,&quot;type&quot;:&quot;Available&quot;&#125;,&#123;&quot;lastTransitionTime&quot;:&quot;2022-04-12T04:39:45Z&quot;,&quot;lastTransitionTimeTS&quot;:1649738385000,&quot;lastUpdateTime&quot;:&quot;2022-04-22T06:34:17Z&quot;,&quot;lastUpdateTimeTS&quot;:1650609257000,&quot;message&quot;:&quot;ReplicaSet \&quot;lemes-gateway-78f8577b78\&quot; has successfully progressed.&quot;,&quot;reason&quot;:&quot;NewReplicaSetAvailable&quot;,&quot;status&quot;:&quot;True&quot;,&quot;type&quot;:&quot;Progressing&quot;&#125;],&quot;observedGeneration&quot;:5,&quot;readyReplicas&quot;:2,&quot;replicas&quot;:2,&quot;type&quot;:&quot;/v3/project/schemas/deploymentStatus&quot;,&quot;unavailableReplicas&quot;:0,&quot;updatedReplicas&quot;:2&#125;,&quot;dnsPolicy&quot;:&quot;ClusterFirst&quot;,&quot;hostIPC&quot;:false,&quot;hostNetwork&quot;:false,&quot;hostPID&quot;:false,&quot;id&quot;:&quot;deployment:default:lemes-gateway&quot;,&quot;labels&quot;:&#123;&quot;app&quot;:&quot;lemes-gateway&quot;&#125;,&quot;links&quot;:&#123;&quot;remove&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway&quot;,&quot;revisions&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway/revisions&quot;,&quot;self&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway&quot;,&quot;update&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway&quot;,&quot;yaml&quot;:&quot;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-gateway/yaml&quot;&#125;,&quot;name&quot;:&quot;lemes-gateway&quot;,&quot;namespaceId&quot;:&quot;default&quot;,&quot;paused&quot;:false,&quot;projectId&quot;:&quot;c-b62fg:p-rqhfd&quot;,&quot;publicEndpoints&quot;:[&#123;&quot;addresses&quot;:[&quot;10.122.73.49&quot;],&quot;allNodes&quot;:true,&quot;ingressId&quot;:&quot;default:lemes-gateway-ig&quot;,&quot;nodeId&quot;:null,&quot;path&quot;:&quot;/lemes-api(/|$)(.*)&quot;,&quot;podId&quot;:null,&quot;port&quot;:80,&quot;protocol&quot;:&quot;HTTP&quot;,&quot;serviceId&quot;:&quot;default:lemes-gateway-svc&quot;&#125;,&#123;&quot;addresses&quot;:[&quot;10.122.73.49&quot;],&quot;allNodes&quot;:true,&quot;ingressId&quot;:&quot;default:lemes-gateway-ig&quot;,&quot;nodeId&quot;:null,&quot;path&quot;:&quot;/lemes-api(/|$)(.*)&quot;,&quot;podId&quot;:null,&quot;port&quot;:443,&quot;protocol&quot;:&quot;HTTPS&quot;,&quot;serviceId&quot;:&quot;default:lemes-gateway-svc&quot;&#125;],&quot;restartPolicy&quot;:&quot;Always&quot;,&quot;scale&quot;:2,&quot;scheduling&quot;:&#123;&quot;scheduler&quot;:&quot;default-scheduler&quot;&#125;,&quot;selector&quot;:&#123;&quot;matchLabels&quot;:&#123;&quot;app&quot;:&quot;lemes-gateway&quot;&#125;,&quot;type&quot;:&quot;/v3/project/schemas/labelSelector&quot;&#125;,&quot;state&quot;:&quot;active&quot;,&quot;terminationGracePeriodSeconds&quot;:30,&quot;transitioning&quot;:&quot;no&quot;,&quot;transitioningMessage&quot;:&quot;&quot;,&quot;type&quot;:&quot;deployment&quot;,&quot;uuid&quot;:&quot;3afee259-1c17-48c0-8044-19ef85238736&quot;,&quot;volumes&quot;:[&#123;&quot;emptyDir&quot;:&#123;&quot;type&quot;:&quot;/v3/project/schemas/emptyDirVolumeSource&quot;&#125;,&quot;name&quot;:&quot;sidecar&quot;,&quot;type&quot;:&quot;/v3/project/schemas/volume&quot;&#125;],&quot;workloadAnnotations&quot;:&#123;&quot;deployment.kubernetes.io/revision&quot;:&quot;4&quot;,&quot;kubectl.kubernetes.io/last-applied-configuration&quot;:&quot;&#123;\&quot;apiVersion\&quot;:\&quot;apps/v1\&quot;,\&quot;kind\&quot;:\&quot;Deployment\&quot;,\&quot;metadata\&quot;:&#123;\&quot;annotations\&quot;:&#123;&#125;,\&quot;labels\&quot;:&#123;\&quot;app\&quot;:\&quot;lemes-gateway\&quot;&#125;,\&quot;name\&quot;:\&quot;lemes-gateway\&quot;,\&quot;namespace\&quot;:\&quot;default\&quot;&#125;,\&quot;spec\&quot;:&#123;\&quot;replicas\&quot;:2,\&quot;selector\&quot;:&#123;\&quot;matchLabels\&quot;:&#123;\&quot;app\&quot;:\&quot;lemes-gateway\&quot;&#125;&#125;,\&quot;template\&quot;:&#123;\&quot;metadata\&quot;:&#123;\&quot;labels\&quot;:&#123;\&quot;app\&quot;:\&quot;lemes-gateway\&quot;&#125;&#125;,\&quot;spec\&quot;:&#123;\&quot;containers\&quot;:[&#123;\&quot;env\&quot;:[&#123;\&quot;name\&quot;:\&quot;POD_NAME\&quot;,\&quot;valueFrom\&quot;:&#123;\&quot;fieldRef\&quot;:&#123;\&quot;apiVersion\&quot;:\&quot;v1\&quot;,\&quot;fieldPath\&quot;:\&quot;metadata.name\&quot;&#125;&#125;&#125;,&#123;\&quot;name\&quot;:\&quot;POD_NAMESPACE\&quot;,\&quot;valueFrom\&quot;:&#123;\&quot;fieldRef\&quot;:&#123;\&quot;apiVersion\&quot;:\&quot;v1\&quot;,\&quot;fieldPath\&quot;:\&quot;metadata.namespace\&quot;&#125;&#125;&#125;,&#123;\&quot;name\&quot;:\&quot;NACOS_ADDR\&quot;,\&quot;valueFrom\&quot;:&#123;\&quot;configMapKeyRef\&quot;:&#123;\&quot;key\&quot;:\&quot;nacos.addr\&quot;,\&quot;name\&quot;:\&quot;lemes-cm\&quot;&#125;&#125;&#125;,&#123;\&quot;name\&quot;:\&quot;NACOS_GROUP\&quot;,\&quot;valueFrom\&quot;:&#123;\&quot;configMapKeyRef\&quot;:&#123;\&quot;key\&quot;:\&quot;nacos.group\&quot;,\&quot;name\&quot;:\&quot;lemes-cm\&quot;&#125;&#125;&#125;,&#123;\&quot;name\&quot;:\&quot;NACOS_NAMESPACE\&quot;,\&quot;valueFrom\&quot;:&#123;\&quot;configMapKeyRef\&quot;:&#123;\&quot;key\&quot;:\&quot;nacos.namespace\&quot;,\&quot;name\&quot;:\&quot;lemes-cm\&quot;&#125;&#125;&#125;,&#123;\&quot;name\&quot;:\&quot;TZ\&quot;,\&quot;valueFrom\&quot;:&#123;\&quot;configMapKeyRef\&quot;:&#123;\&quot;key\&quot;:\&quot;tz\&quot;,\&quot;name\&quot;:\&quot;lemes-cm\&quot;&#125;&#125;&#125;,&#123;\&quot;name\&quot;:\&quot;JAVA_OPTS\&quot;,\&quot;valueFrom\&quot;:&#123;\&quot;configMapKeyRef\&quot;:&#123;\&quot;key\&quot;:\&quot;java.opts\&quot;,\&quot;name\&quot;:\&quot;lemes-cm\&quot;&#125;&#125;&#125;,&#123;\&quot;name\&quot;:\&quot;SKYWALKING\&quot;,\&quot;valueFrom\&quot;:&#123;\&quot;configMapKeyRef\&quot;:&#123;\&quot;key\&quot;:\&quot;java.skywalking\&quot;,\&quot;name\&quot;:\&quot;lemes-cm\&quot;&#125;&#125;&#125;],\&quot;image\&quot;:\&quot;10.176.66.20:5000/lemes-cloud/lemes-gateway:develop-202204111455\&quot;,\&quot;imagePullPolicy\&quot;:\&quot;Always\&quot;,\&quot;livenessProbe\&quot;:&#123;\&quot;failureThreshold\&quot;:10,\&quot;httpGet\&quot;:&#123;\&quot;path\&quot;:\&quot;/actuator/health/liveness\&quot;,\&quot;port\&quot;:80&#125;,\&quot;initialDelaySeconds\&quot;:5,\&quot;periodSeconds\&quot;:5,\&quot;timeoutSeconds\&quot;:10&#125;,\&quot;name\&quot;:\&quot;lemes-gateway\&quot;,\&quot;ports\&quot;:[&#123;\&quot;containerPort\&quot;:80&#125;],\&quot;readinessProbe\&quot;:&#123;\&quot;httpGet\&quot;:&#123;\&quot;path\&quot;:\&quot;/actuator/health/readiness\&quot;,\&quot;port\&quot;:80&#125;,\&quot;initialDelaySeconds\&quot;:5,\&quot;periodSeconds\&quot;:5,\&quot;timeoutSeconds\&quot;:10&#125;,\&quot;volumeMounts\&quot;:[&#123;\&quot;mountPath\&quot;:\&quot;/sidecar\&quot;,\&quot;name\&quot;:\&quot;sidecar\&quot;&#125;]&#125;],\&quot;initContainers\&quot;:[&#123;\&quot;command\&quot;:[\&quot;cp\&quot;,\&quot;-r\&quot;,\&quot;/opt/tingyun\&quot;,\&quot;/sidecar\&quot;],\&quot;image\&quot;:\&quot;10.176.66.20:5000/library/tingyun:3.6.1.4\&quot;,\&quot;imagePullPolicy\&quot;:\&quot;Always\&quot;,\&quot;name\&quot;:\&quot;tingyun\&quot;,\&quot;volumeMounts\&quot;:[&#123;\&quot;mountPath\&quot;:\&quot;/sidecar\&quot;,\&quot;name\&quot;:\&quot;sidecar\&quot;&#125;]&#125;],\&quot;volumes\&quot;:[&#123;\&quot;emptyDir\&quot;:&#123;&#125;,\&quot;name\&quot;:\&quot;sidecar\&quot;&#125;]&#125;&#125;&#125;&#125;&quot;&#125;,&quot;workloadLabels&quot;:&#123;&quot;app&quot;:&quot;lemes-gateway&quot;&#125;&#125;&#39; &#39;https://10.176.66.20/v3/project/c-b62fg:p-rqhfd/workloads/deployment:default:lemes-auth&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> rancher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s 集群搭建和使用及常见问题处理</title>
      <link href="/2024/08/30/k8s-cluster-and-common-problems/"/>
      <url>/2024/08/30/k8s-cluster-and-common-problems/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>kubernetes: k8s 是谷歌在2014年开源的容器化集群管理系统</p><ul><li><p><strong>Pod</strong> Pod 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元</p></li><li><p>网络控制器</p></li><li><p>ApiServer: Uniform interface for access by all services</p></li><li><p>ControllerManager: Maintaining Copy Expectations</p></li><li><p><code>kubeadm</code>: the command to bootstrap the cluster.</p></li><li><p><code>kubelet</code>: the component that runs on all of the machines in your cluster and does things like starting pods and containers.</p></li><li><p><code>kubectl</code>: the command line util to talk to your cluster.</p></li></ul><h2 id="搭建方式"><a href="#搭建方式" class="headerlink" title="搭建方式"></a>搭建方式</h2><h3 id="kubeadmin"><a href="#kubeadmin" class="headerlink" title="kubeadmin"></a>kubeadmin</h3><p><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/">kubeadm</a></p><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><p>master和nodes 均需要执行一下步骤进行安装</p><pre><code class="bash">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgexclude=kubelet kubeadm kubectlEOF# Set SELinux in permissive mode (effectively disabling it)sudo setenforce 0sudo sed -i &#39;s/^SELINUX=enforcing$/SELINUX=permissive/&#39; /etc/selinux/config# turn off swapswapoff -a # 临时vim /etc/fstab # 永久sudo yum install -y kubelet-1.20.5 kubeadm-1.20.5 kubectl-1.20.5 --disableexcludes=kubernetessudo systemctl enable --now kubelet</code></pre><blockquote><p>uninstall command <code>sudo yum remove -y kubelet kubeadm kubectl</code></p></blockquote><h4 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h4><p>假设 master 所在机器为 10.176.66.58</p><pre><code class="bash"># 提前拉去镜像kubeadm config images pull --image-repository registry.aliyuncs.com/google_containerskubeadm config images pull --image-repository 10.176.66.20/google_containers# ping 不通 service 和 pod 的dnssudo kubeadm init \--apiserver-advertise-address=10.114.130.3 \--image-repository registry.aliyuncs.com/google_containers \--kubernetes-version v1.20.5 \--service-cidr=10.96.0.0/12 \--pod-network-cidr=10.244.0.0/16# 使用私服sudo kubeadm init \--apiserver-advertise-address=10.114.130.3 \--image-repository 10.176.66.20/google_containers \--kubernetes-version v1.20.5 \--service-cidr=10.96.0.0/12 \--pod-network-cidr=10.244.0.0/16# 在 nodes 上直接上面生成的命令，加入集群，如下kubeadm join 10.176.66.58:6443 --token 7opg66.gcmdavb2vxiliytp \    --discovery-token-ca-cert-hash sha256:ecb8d4930ac8489c1196560612afa1736dddf7be25244a50e64c82dca9bb2644# 使用 kubectl 工具mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config# 查看 node 节点加入情况kubectl get nodes# 查看 pod 情况kubectl get pods -o wide# 安装 pod 网络插件 CNIkubectl apply -f  https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</code></pre><blockquote><p>master 重新生成加入命令: <code>kubeadm token create --print-join-command</code> <code>kubeadm token list</code></p><p>master&#x2F;node 退出集群 <code>kubeadm reset</code></p></blockquote><h3 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h3><p>待更新</p><h2 id="YAML-支持的数据结构"><a href="#YAML-支持的数据结构" class="headerlink" title="YAML 支持的数据结构"></a>YAML 支持的数据结构</h2><pre><code class="bash"># 查看所有 pod 和 servicekubectl get pod,svc# 开启检测, 有变化打印kubectl get pod -w# 查看 所有组件kubectl get pods --all-namespaces -o widekubectl get componentstatuses# 查看某个服务情况kubectl describe pods -n kube-system coredns-7f89b7bc75-hsjdl# 查看某个 pod 信息kubectl describe pod &lt;pod-name&gt;# 查看 pod 下，某个容器日志kubectl logs &lt;pod-name&gt; -c &lt;container-name&gt;# 删除某个 podkubectl delete pod &lt;pod-name&gt;# 删除所有 deploymentkubectl delete deployment --all# 删除所有 podkubectl delete pod --all# 根据配置文件创建对象kubectl create -f nginx.yaml# 根据配置文件删除对象 (猜测是根据 meta 标识的唯一对象进行删除)kubectl delete -f nginx.yaml# 更新对象配置kubectl replace -f nginx.yaml# 进入容器kubectl exec -it nacos-2 -- /bin/bash</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code class="bash"># 更新kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1 --record# 查看回滚历史kubectl rollout history deployment.v1.apps/nginx-deployment# 回滚到上个版本kubectl rollout undo deployment.v1.apps/nginx-deployment# 回滚到指定版本kubectl rollout undo deployment.v1.apps/nginx-deployment --to-revision=2# 缩放kubectl scale deployment.v1.apps/nginx-deployment --replicas=10# 自动伸缩kubectl autoscale deployment.v1.apps/nginx-deployment --min=10 --max=15 --cpu-percent=80# 查看各 pod/container cpu和memory 的占用量kubectl top podkubectl top pod test-huishi-server-6f875487d7-9rzpdkubectl top pod | grep lemes-service-common# 查看节点的内存和cpu占用情况kubectl top nodessudo systemctl restart docker</code></pre><h2 id="使用Rancher"><a href="#使用Rancher" class="headerlink" title="使用Rancher"></a>使用Rancher</h2><h3 id="deploy-nfs"><a href="#deploy-nfs" class="headerlink" title="deploy nfs"></a>deploy nfs</h3><pre><code class="bash">sudo yum install -y nfs-utils rpcbindsudo mkdir -p /data/nfssudo sh -c &quot;sudo echo &#39;/data/nfs *(rw,sync,no_root_squash)&#39; &gt;&gt; /etc/exports&quot;sudo systemctl enable --now nfssudo systemctl enable --now rpcbind</code></pre><h3 id="部署-ceph-未验证"><a href="#部署-ceph-未验证" class="headerlink" title="部署 ceph (未验证)"></a>部署 ceph (未验证)</h3><pre><code class="bash">sudo cat &gt; /etc/yum.repos.d/ceph.repo &lt;&lt; EOF[ceph-norch]name=ceph-norchbaseurl=https://mirrors.aliyun.com/ceph/rpm-nautilus/el7/noarch/enabled=1gpgcheck=0[ceph-x86_64]name=ceph-x86_64baseurl=https://mirrors.aliyun.com/ceph/rpm-nautilus/el7/x86_64/enabled=1gpgcheck=0EOFsudo yum install ceph-common</code></pre><h3 id="部署-redis"><a href="#部署-redis" class="headerlink" title="部署 redis"></a>部署 redis</h3><pre><code class="bash">kubectl exec -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl get pods -l app=redis-cluster -o jsonpath=&#39;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:6379 &#123;end&#125;&#39;)kubectl exec -it redis-cluster-0 -- redis-cli cluster nodes</code></pre><h3 id="修改-ingress-端口"><a href="#修改-ingress-端口" class="headerlink" title="修改 ingress 端口"></a>修改 ingress 端口</h3><pre><code class="yaml">- --http-port=81- --https-port=8443</code></pre><h3 id="集成-ceph"><a href="#集成-ceph" class="headerlink" title="集成 ceph"></a>集成 ceph</h3><h4 id="安装-ceph"><a href="#安装-ceph" class="headerlink" title="安装 ceph"></a>安装 ceph</h4><pre><code class="bash"># 安装 cephsudo yum -y install ceph-common# 创建poolceph osd pool create kubernetes 16 16# 初始化poolrbd pool init kubernetes# 创建块文件rbd create -p kubernetes --image-feature layering rbd.img --size 10Gmkdir -p /data/ceph/sdbmkdir -p /data/ceph/sdc# 查看 lv pathsudo vgscansudo vgdisplay -v datavgceph-deploy osd create --data /dev/datavg/lv_data whulpdpms01ceph-deploy osd create --data /dev/datavg/lv_data whulpdpms02ceph-deploy osd create --data /dev/datavg/lv_data whulpdpms03</code></pre><h2 id="Problem-问题记录"><a href="#Problem-问题记录" class="headerlink" title="Problem 问题记录"></a>Problem 问题记录</h2><h3 id="Snippet-directives-are-disabled-by-the-Ingress-administrator"><a href="#Snippet-directives-are-disabled-by-the-Ingress-administrator" class="headerlink" title="Snippet directives are disabled by the Ingress administrator"></a>Snippet directives are disabled by the Ingress administrator</h3><h2 id="当应用如下配置时报错题目问题-yaml-暴露服务"><a href="#当应用如下配置时报错题目问题-yaml-暴露服务" class="headerlink" title="当应用如下配置时报错题目问题&#96;&#96;&#96;yaml# 暴露服务"></a>当应用如下配置时报错题目问题<br>&#96;&#96;&#96;yaml<br># 暴露服务</h2><p>apiVersion: networking.k8s.io&#x2F;v1<br>kind: Ingress<br>metadata:<br>  name: lemes-gateway-ig<br>  namespace: default<br>  annotations:<br>    nginx.ingress.kubernetes.io&#x2F;rewrite-target: &#x2F;$2<br>    nginx.ingress.kubernetes.io&#x2F;proxy-connect-timeout: “600”<br>    nginx.ingress.kubernetes.io&#x2F;proxy-send-timeout: “600”<br>    nginx.ingress.kubernetes.io&#x2F;proxy-read-timeout: “600”<br>    nginx.ingress.kubernetes.io&#x2F;proxy-body-size: “600m”<br>    nginx.ingress.kubernetes.io&#x2F;configuration-snippet: |<br>      more_set_headers “Host $host”;<br>      more_set_headers “X-Forwarded-Proto $scheme”;<br>      more_set_headers “X-Forwarded-For $proxy_add_x_forwarded_for”;<br>      more_set_headers “X-Real-IP $remote_addr”;<br>spec:<br>  rules:<br>    - http:<br>        paths:<br>          - path: &#x2F;lemes-api(&#x2F;|$)(.*)<br>            pathType: Prefix<br>            backend:<br>              service:<br>                name: lemes-gateway-svc<br>                port:<br>                  number: 80</p><pre><code>原因与解决方案: https://github.com/kubernetes/ingress-nginx/issues/78371. 编辑 ingress-nginx```bashkubectl edit configmap -n ingress-nginx ingress-nginx-controller</code></pre><ol start="2"><li>如果有如下内容, 删除或修改 false 为 true</li></ol><pre><code class="yaml">data:  allow-snippet-annotations: &quot;false&quot;</code></pre><h3 id="ingress-前多层反向代理穿透，-获取-real-ip"><a href="#ingress-前多层反向代理穿透，-获取-real-ip" class="headerlink" title="ingress 前多层反向代理穿透， 获取 real ip"></a>ingress 前多层反向代理穿透， 获取 real ip</h3><p>升级 集群名-&gt; System -&gt; 资源 -&gt; 配置映射 中的 <code>ingress-nginx-controller</code><br>添加如下键值对</p><pre><code class="yaml">compute-full-forwarded-for: trueforwarded-for-header: X-Forwarded-Foruse-forwarded-headers:true</code></pre><p>实时生效</p><h3 id="容器删不掉"><a href="#容器删不掉" class="headerlink" title="容器删不掉"></a>容器删不掉</h3><p>docker stop&#x2F;kill&#x2F;rm -f 都不好使</p><pre><code class="bash"># 找到进程$ ps axo stat,ppid,pid,comm | grep -w defunctZl   19653 19679 java &lt;defunct&gt;# 找到父进程$ ps -f 19679UID        PID  PPID  C STIME TTY      STAT   TIME CMDroot     19653 19635  0 11:02 ?        Ss     0:00 [docker-startup.]$ sudo kill -9 19635$ sudo systemctl restart docker</code></pre><h3 id="强制删除所有-terminating-的-pod"><a href="#强制删除所有-terminating-的-pod" class="headerlink" title="强制删除所有 terminating 的 pod"></a>强制删除所有 terminating 的 pod</h3><pre><code class="bash">kubectl get pods | grep Terminating | awk &#39;&#123;print $1&#125;&#39; | xargs -I &#123;&#125; kubectl delete pod &#123;&#125; --force --grace-period=0kubectl delete pod nginx-ingress-controller-lbftg --force --grace-period=0</code></pre><h3 id="too-many-open-files"><a href="#too-many-open-files" class="headerlink" title="too many open files"></a>too many open files</h3><pre><code class="bash">sudo vi /etc/sysctl.conf# 添加fs.file-max=9000000fs.inotify.max_user_instances = 1000000fs.inotify.max_user_watches = 1000000sudo sysctl -psudo systemctl restart docker</code></pre><h3 id="删除挂载卷"><a href="#删除挂载卷" class="headerlink" title="删除挂载卷"></a>删除挂载卷</h3><pre><code class="bash"># 查看挂载卷cat /proc/mounts |grep &quot;docker&quot;# 显示/dev/mapper/centos-root /var/lib/docker/overlay xfs rw,seclabel,relatime,attr2,inode64,noquota 0 0 overlay /var/lib/docker/overlay/xxxxxxxxxx# 取消挂载umount /var/lib/docker/overlay/xxxxxxxxxxx# 批量取消挂载sudo umount `cat /proc/mounts |grep &quot;docker&quot;|awk &#39;&#123;print $2&#125;&#39;`</code></pre><h3 id="docker-假死"><a href="#docker-假死" class="headerlink" title="docker 假死"></a>docker 假死</h3><pre><code class="bash">[lemes@slt6dhqgxev ~]$ docker psCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?# journalctl -u docker.serviceaccept4: too many open files</code></pre><p><strong>问题解析</strong><br>文件数创建上限</p><p><strong>问题解决</strong></p><pre><code class="bash">sudo vi /etc/sysctl.conf# 添加fs.file-max = 9000000fs.inotify.max_user_instances = 1000000fs.inotify.max_user_watches = 1000000# 生效sudo sysctl -p# 重启 docker 服务sudo systemctl restart docker# 启动所有关闭的容器docker start $(docker ps -a | awk &#39;&#123; print $1&#125;&#39; | tail -n +2)</code></pre><h3 id="rancher-应用-HOST-PATH-时-使用-subPath-subPathExpr-日志没有写入宿主机"><a href="#rancher-应用-HOST-PATH-时-使用-subPath-subPathExpr-日志没有写入宿主机" class="headerlink" title="rancher 应用 HOST-PATH 时 使用 subPath &#x2F; subPathExpr 日志没有写入宿主机"></a>rancher 应用 HOST-PATH 时 使用 subPath &#x2F; subPathExpr 日志没有写入宿主机</h3><p>问题讨论：<a href="https://github.com/rancher/rancher/issues/14836">volume hostpath with subpath</a></p><p>问题原因：<br>映射到了 kubectl 容器内<br><code>docker exec -it $(docker ps -aq --filter &quot;name=kubelet&quot;) /bin/sh</code></p><h3 id="k8s-集群内-dns-生效-rancher"><a href="#k8s-集群内-dns-生效-rancher" class="headerlink" title="k8s 集群内 dns 生效(rancher)"></a>k8s 集群内 dns 生效(rancher)</h3><p>修改了宿主机的 dns 后，需要重启 docker 才能全体生效</p><pre><code class="bash">sudo systemctl restart docker</code></pre><h3 id="报错-x509-certificate-is-not-valid-for-any-names-but-wanted-to-match-ingress-nginx-controller-admission-ingress-nginx-svc"><a href="#报错-x509-certificate-is-not-valid-for-any-names-but-wanted-to-match-ingress-nginx-controller-admission-ingress-nginx-svc" class="headerlink" title="报错 x509: certificate is not valid for any names, but wanted to match ingress-nginx-controller-admission.ingress-nginx.svc"></a>报错 x509: certificate is not valid for any names, but wanted to match ingress-nginx-controller-admission.ingress-nginx.svc</h3><pre><code class="bash">kubectl delete -A ValidatingWebhookConfiguration foobar-ingress-nginx-admission</code></pre><h3 id="network-plugin-is-not-ready-cni-config-uninitialized"><a href="#network-plugin-is-not-ready-cni-config-uninitialized" class="headerlink" title="network plugin is not ready: cni config uninitialized"></a>network plugin is not ready: cni config uninitialized</h3><p>网络框架一直安装不上, 根据 <code>docker logs -f kubelet</code> 日志查看, 网络插件安装时报 <code>diskpress</code> 被放逐<br>问题: &#x2F;data 磁盘空间不足<br>解决方案: 释放磁盘空间解决</p><h3 id="Pod-ephemeral-local-storage-usage-exceeds-the-total-limit-of-containers-4Gi"><a href="#Pod-ephemeral-local-storage-usage-exceeds-the-total-limit-of-containers-4Gi" class="headerlink" title="Pod ephemeral local storage usage exceeds the total limit of containers 4Gi."></a>Pod ephemeral local storage usage exceeds the total limit of containers 4Gi.</h3><p>现象: pod被驱逐, 报错如题<br>问题: 使用的临时容量超过了节点限制(在此节点上)</p><p>2023-08-11 21:22 再次出现这个问题</p><p>经<a href="https://access.redhat.com/solutions/4367311">查询资料</a>， 可能是由于没有限制容器日志造成的</p><p>南方厂工厂的 <code>sudo vi /etc/docker/daemon.json</code> 配置确实如下</p><pre><code class="json">&#123;  &quot;registry-mirrors&quot;: [],  &quot;insecure-registries&quot;: [    &quot;10.176.66.20:5000&quot;,    &quot;10.188.132.44:5000&quot;,    &quot;10.188.132.123:5000&quot;,    &quot;10.176.2.207:5000&quot;  ],  &quot;data-root&quot;:&quot;/data/docker/system&quot;,  &quot;debug&quot;: true,  &quot;experimental&quot;: false,&#125;</code></pre><p>改为如下, 限制每个容器只能保留10m的日志</p><pre><code class="json">&#123;  &quot;registry-mirrors&quot;: [],  &quot;insecure-registries&quot;: [    &quot;10.188.132.44:5000&quot;,    &quot;10.188.132.123:5000&quot;,    &quot;10.176.2.207:5000&quot;  ],  &quot;data-root&quot;:&quot;/data/docker/system&quot;,  &quot;debug&quot;: true,  &quot;experimental&quot;: false,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;1&quot;,    &quot;labels&quot;: &quot;production_status&quot;,    &quot;env&quot;: &quot;os,customer&quot;  &#125;&#125;</code></pre><p>2023-08-25 16:41 再次出现问题<br>发现 tingyun 使用的 <code>emptyDir</code> 中， 一直在写入日志，导致占用临时空间</p><pre><code class="bash"># 查询log日志总数sudo find /data/docker/system/containers/ -name &quot;*-json.log&quot; | xargs sudo ls -l | awk &#39;&#123;print $5&#125;&#39; | awk &#39;&#123;sum+=$1&#125;END&#123;print sum&#125;&#39;# 删除sudo sh -c &quot;truncate -s 0 /data/docker/system/containers/*/*-json.log&quot;# sudo find /data/docker/system/containers/ -name &quot;*-json.log&quot; | xargs sudo rm -rf</code></pre><p>2023-08-31 smt-wh 和 smt-tjsc 都出现了这个问题 <code>The node was low on resource: ephemeral-storage. Container lemes-service-wh-report was using 1936Ki, which exceeds its request of 0.</code></p><p>超出了0，就不是有限制， 而是当前磁盘已经达到了 85%，造成了 pod 驱逐</p><h3 id="导入-lemes-web-出现问题"><a href="#导入-lemes-web-出现问题" class="headerlink" title="导入 lemes-web 出现问题"></a>导入 lemes-web 出现问题</h3><p>Error from server (InternalError): error when creating “management-state&#x2F;tmp&#x2F;yaml-397511040”: Internal error occurred: failed calling webhook “validate.nginx.ingress.kubernetes.io”: Post “<a href="https://ingress-nginx-controller-admission.ingress-nginx.svc/networking/v1/ingresses?timeout=10s">https://ingress-nginx-controller-admission.ingress-nginx.svc:443/networking/v1/ingresses?timeout=10s</a>“: x509: certificate is not valid for any names, but wanted to match ingress-nginx-controller-admission.ingress-nginx.svc</p><p>2024-10-28 导入 moss-web 时, 再次遇到:<br>Internal error occurred: failed calling webhook &quot;validate.nginx.ingress.kubernetes.io&quot;: Post &quot;<a href="https://ingress-nginx-controller-admission.ingress-nginx.svc/networking/v1beta1/ingresses?timeout=10s%5C">https://ingress-nginx-controller-admission.ingress-nginx.svc:443/networking/v1beta1/ingresses?timeout=10s\</a>“: x509: certificate is valid for localhost, rancher.cattle-system, not ingress-nginx-controller-admission.ingress-nginx.svc</p><p>解决方案: <a href="https://github.com/kubernetes/ingress-nginx/issues/5968#issuecomment-782092413">https://github.com/kubernetes/ingress-nginx/issues/5968#issuecomment-782092413</a></p><pre><code class="bash"># Find name of the ingress-nginx-admission resourcekubectl get -A ValidatingWebhookConfiguration# Delete itkubectl delete -A ValidatingWebhookConfiguration &lt;name&gt;# Example:kubectl delete -A ValidatingWebhookConfiguration foobar-ingress-nginx-admission</code></pre><h3 id="node-节点报错-PLEG-is-not-healthy-pleg-was-last-seen-active-7m20-510472824s-ago-threshold-is-3m0s"><a href="#node-节点报错-PLEG-is-not-healthy-pleg-was-last-seen-active-7m20-510472824s-ago-threshold-is-3m0s" class="headerlink" title="node 节点报错 PLEG is not healthy: pleg was last seen active 7m20.510472824s ago; threshold is 3m0s"></a>node 节点报错 PLEG is not healthy: pleg was last seen active 7m20.510472824s ago; threshold is 3m0s</h3><p>有个 <code>issue</code> 问题很像 <a href="https://github.com/rancher/rancher/issues/31793#issuecomment-911143593">PLEG is not healthy K8 1.20.4&#x2F;Ubuntu 20.04</a></p><p>根据 <code>minchieh-fay</code> 老哥的回答,是 <code>runc</code> 的 <code>runc-1.0.0-rc93</code> 这个版本有问题</p><p>可以通过 <code>docker version</code> 来查看 <code>runc</code> 的版本, 确实是 <code>runc-1.0.0-rc93</code>, 按照如下方式进行离线升级</p><ol><li>到 <code>runc</code> 的 <a href="https://github.com/opencontainers/runc/releases/">github release</a> 找到升级的版本, 我选的是 <code>1.1.4</code>, 选择 <code>runc.amd64</code> 进行下载</li><li>上传到服务器, 执行 <code>mv runc.amd64 runc &amp;&amp; chmod +x runc</code> 进行重命名和赋予执行权限</li><li>备份原来的 <code>runc</code> 文件, <code>mv /usr/bin/runc /usr/bin/runc.bak</code></li><li>停止 <code>docker</code> 服务, <code>systemctl stop docker</code></li><li>移动新的 <code>runc</code> 文件到 <code>/usr/bin/</code> 目录下, <code>mv runc /usr/bin/runc</code></li><li>启动 <code>docker</code> 服务, <code>systemctl start docker</code></li><li>执行 <code>docker version</code> 查看 <code>runc</code> 版本, 确认升级成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK 垃圾回收介绍</title>
      <link href="/2024/08/30/jdk-gc/"/>
      <url>/2024/08/30/jdk-gc/</url>
      
        <content type="html"><![CDATA[<h2 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a>推荐配置</h2><h3 id="容器内"><a href="#容器内" class="headerlink" title="容器内"></a>容器内</h3><pre><code class="bash">-XX:+UseContainerSupport -XX:InitialRAMPercentage=75.0 -XX:MaxRAMPercentage=75.0 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/nas/dump-$&#123;POD_IP&#125;-$(date &#39;+%s&#39;).hprof</code></pre><h2 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h2><p><a href="https://juejin.cn/post/6856222574155104270">https://juejin.cn/post/6856222574155104270</a><br><a href="https://juejin.cn/post/7007343142328352804">https://juejin.cn/post/7007343142328352804</a><br><a href="https://blog.csdn.net/jiguansheng/article/details/105406343">https://blog.csdn.net/jiguansheng/article/details/105406343</a><br><a href="https://tech.meituan.com/2016/09/23/g1.html">https://tech.meituan.com/2016/09/23/g1.html</a></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><p>新生代又叫年轻代，大多数对象在新生代中被创建，很多对象的生命周期很短。每次新生代的垃圾回收（又称Young GC、Minor GC、YGC）后只有少量对象存活，所以使用复制算法，只需少量的复制操作成本就可以完成回收。</p><p>新生代内又分三个区：一个Eden区，两个Survivor区(S0、S1，又称From Survivor、To Survivor)，大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到两个Survivor区（中的一个）。当这个Survivor区满时，此区的存活且不满足晋升到老年代条件的对象将被复制到另外一个Survivor区。对象每经历一次复制，年龄加1，达到晋升年龄阈值后，转移到老年代</p><h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h4><p>在新生代中经历了N次垃圾回收后仍然存活的对象，就会被放到老年代，该区域中对象存活率高。老年代的垃圾回收通常使用“标记-整理”算法</p><h3 id="YGC"><a href="#YGC" class="headerlink" title="YGC"></a>YGC</h3><p>触发条件: 新生代占据整个堆大小的 60%</p><p>新生代: Eden Space + Survivor Space</p><p>新生代晋升老年代条件</p><ul><li>对象超过 age 阈值 15</li><li>附质量过程超过 50, age 最大的放到老年代</li></ul><p>-XX:MaxGCPauseMils 默认为200ms<br>在优先时间内尽量回收垃圾多的区域, 让时间效率最大化</p><p>Young GC 每次都会引起全线停顿(Stop-The-World)，暂停所有的应用线程，停顿时间相对老年代GC的造成的停顿，几乎可以忽略不计</p><h3 id="Mixed-GC"><a href="#Mixed-GC" class="headerlink" title="Mixed GC"></a>Mixed GC</h3><p>新生代和老年代进行收集和整理<br>触发条件: 老年代超过堆 45%</p><h3 id="压缩算法回收-STW-Stop-The-World"><a href="#压缩算法回收-STW-Stop-The-World" class="headerlink" title="压缩算法回收 STW(Stop-The-World)"></a>压缩算法回收 STW(Stop-The-World)</h3><p>G1 开辟一块最多 5% 堆空间的内存用于标记压缩的数据交换, 过程产生 STW, STW 200ms内最多回收 10% 垃圾最多的区域, 回收后检查老年代是否低于 45%, 未达标继续再来一次, 最多 8 次, 8次未达标 Serial Old GC(Full GC)</p><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><p>used &#x3D; resident + swapped pages</p><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><p><a href="https://docs.oracle.com/en/java/javase/14/docs/specs/man/jstat.html">doc</a></p><h3 id="gc"><a href="#gc" class="headerlink" title="-gc"></a>-gc</h3><table><thead><tr><th>head</th><th>description</th></tr></thead><tbody><tr><td>S0C</td><td>Current survivor space 0 capacity (KB).</td></tr><tr><td>S1C</td><td>Current survivor space 1 capacity (KB).</td></tr><tr><td>S0U</td><td>Survivor space 0 utilization (KB).</td></tr><tr><td>S1U</td><td>Survivor space 1 utilization (KB).</td></tr><tr><td>EC</td><td>Current eden space capacity (KB).</td></tr><tr><td>EU</td><td>Eden space utilization (KB).</td></tr><tr><td>OC</td><td>Current old space capacity (KB).</td></tr><tr><td>OU</td><td>Old space utilization (KB).</td></tr><tr><td>MC</td><td>Metaspace Committed Size (KB).</td></tr><tr><td>MU</td><td>Metaspace utilization (KB).</td></tr><tr><td>CCSC</td><td>Compressed class committed size (KB).</td></tr><tr><td>CCSU</td><td>Compressed class space used (KB).</td></tr><tr><td>YGC</td><td>Number of young generation garbage collection (GC) events.</td></tr><tr><td>YGCT</td><td>Young generation garbage collection time.</td></tr><tr><td>FGC</td><td>Number of full GC events.</td></tr><tr><td>FGCT</td><td>Full garbage collection time.</td></tr><tr><td>GCT</td><td>Total garbage collection time.</td></tr></tbody></table><h3 id="jstat-gcutil-10"><a href="#jstat-gcutil-10" class="headerlink" title="jstat -gcutil 10"></a>jstat -gcutil 10</h3><p>S0: Survivor 0区的空间使用率 Survivor space 0 utilization as a percentage of the space’s current capacity.</p><p>S1: Survivor 1区的空间使用率 Survivor space 1 utilization as a percentage of the space’s current capacity.</p><p>E: Eden区的空间使用率 Eden space utilization as a percentage of the space’s current capacity.</p><p>O: 老年代的空间使用率 Old space utilization as a percentage of the space’s current capacity.</p><p>M: 元数据的空间使用率 Metaspace utilization as a percentage of the space’s current capacity.</p><p>CCS: 类指针压缩空间使用率 Compressed class space utilization as a percentage.</p><p>YGC: 新生代GC次数 Number of young generation GC events.</p><p>YGCT: 新生代GC总时长（从应用程序启动到采样时年轻代中gc所用时间 单位：s）<br>      Young generation garbage collection time.</p><p>FGC: Full GC次数 Number of full GC events.</p><p>FGCT: Full GC总时长（从应用程序启动到采样时old代(全gc)gc所用时间 单位：s）<br>      Full garbage collection time.</p><p>GCT: 总共的GC时长 （从应用程序启动到采样时gc用的总时间 单位：s）Total garbage collection time.</p><h2 id="查询当前使用的是什么垃圾回收器"><a href="#查询当前使用的是什么垃圾回收器" class="headerlink" title="查询当前使用的是什么垃圾回收器"></a>查询当前使用的是什么垃圾回收器</h2><h3 id="查看是否通过-JVM-参数指定了虚拟机类型"><a href="#查看是否通过-JVM-参数指定了虚拟机类型" class="headerlink" title="查看是否通过 JVM 参数指定了虚拟机类型"></a>查看是否通过 JVM 参数指定了虚拟机类型</h3><pre><code class="bash">ps -ef | grep webservice</code></pre><h3 id="查询-JDK-默认虚拟机类型"><a href="#查询-JDK-默认虚拟机类型" class="headerlink" title="查询 JDK 默认虚拟机类型"></a>查询 JDK 默认虚拟机类型</h3><pre><code class="bash">java -XX:+PrintCommandLineFlags -version</code></pre><h2 id="others"><a href="#others" class="headerlink" title="others"></a>others</h2><pre><code class="bash"># 查看堆空间占用类， 前20条jmap -histo PID | head -n20</code></pre><h2 id="bash-4-2-jmap-histo-9-head-n20-num-instances-bytes-class-name-module"><a href="#bash-4-2-jmap-histo-9-head-n20-num-instances-bytes-class-name-module" class="headerlink" title="bash-4.2# jmap -histo 9 | head -n20 num     #instances         #bytes  class name (module)"></a>bash-4.2# jmap -histo 9 | head -n20<br> num     #instances         #bytes  class name (module)</h2><p>   1:        544456     3280814896  [C (<a href="mailto:&#x6a;&#97;&#118;&#97;&#x2e;&#x62;&#97;&#x73;&#101;&#x40;&#x31;&#x31;&#46;&#x30;&#x2e;&#49;&#x38;">&#x6a;&#97;&#118;&#97;&#x2e;&#x62;&#97;&#x73;&#101;&#x40;&#x31;&#x31;&#46;&#x30;&#x2e;&#49;&#x38;</a>)<br>   2:       3076195     1819165352  [B (<a href="mailto:&#106;&#x61;&#118;&#x61;&#46;&#98;&#x61;&#x73;&#101;&#64;&#x31;&#49;&#46;&#x30;&#x2e;&#x31;&#56;">&#106;&#x61;&#118;&#x61;&#46;&#98;&#x61;&#x73;&#101;&#64;&#x31;&#49;&#46;&#x30;&#x2e;&#x31;&#56;</a>)<br>   3:       1029042      626773184  [I (<a href="mailto:&#x6a;&#97;&#118;&#97;&#46;&#x62;&#97;&#115;&#x65;&#x40;&#x31;&#x31;&#x2e;&#48;&#46;&#x31;&#56;">&#x6a;&#97;&#118;&#97;&#46;&#x62;&#97;&#115;&#x65;&#x40;&#x31;&#x31;&#x2e;&#48;&#46;&#x31;&#56;</a>)<br>   4:       6287573      201202336  java.lang.ClassValue$Entry (<a href="mailto:&#106;&#x61;&#118;&#x61;&#x2e;&#98;&#x61;&#x73;&#x65;&#x40;&#49;&#x31;&#46;&#x30;&#x2e;&#x31;&#x38;">&#106;&#x61;&#118;&#x61;&#x2e;&#98;&#x61;&#x73;&#x65;&#x40;&#49;&#x31;&#46;&#x30;&#x2e;&#x31;&#x38;</a>)<br>   5:       4575213      183008520  java.util.WeakHashMap$Entry (<a href="mailto:&#106;&#x61;&#118;&#x61;&#x2e;&#98;&#97;&#115;&#x65;&#64;&#x31;&#x31;&#46;&#48;&#x2e;&#x31;&#x38;">&#106;&#x61;&#118;&#x61;&#x2e;&#98;&#97;&#115;&#x65;&#64;&#x31;&#x31;&#46;&#48;&#x2e;&#x31;&#x38;</a>)<br>   6:       2214270      141713280  java.util.concurrent.ConcurrentHashMap (<a href="mailto:&#x6a;&#x61;&#x76;&#97;&#46;&#x62;&#x61;&#x73;&#x65;&#x40;&#x31;&#x31;&#46;&#48;&#x2e;&#x31;&#56;">&#x6a;&#x61;&#x76;&#97;&#46;&#x62;&#x61;&#x73;&#x65;&#x40;&#x31;&#x31;&#46;&#48;&#x2e;&#x31;&#56;</a>)<br>   7:       1085202      130240080  [Ljava.lang.Object; (<a href="mailto:&#106;&#x61;&#118;&#x61;&#x2e;&#x62;&#97;&#115;&#101;&#x40;&#x31;&#49;&#x2e;&#48;&#46;&#49;&#x38;">&#106;&#x61;&#118;&#x61;&#x2e;&#x62;&#97;&#115;&#101;&#x40;&#x31;&#49;&#x2e;&#48;&#46;&#49;&#x38;</a>)<br>   8:       1492883      130059632  [Ljava.util.WeakHashMap$Entry; (<a href="mailto:&#x6a;&#97;&#x76;&#x61;&#46;&#x62;&#x61;&#115;&#101;&#64;&#x31;&#x31;&#46;&#48;&#x2e;&#49;&#x38;">&#x6a;&#97;&#x76;&#x61;&#46;&#x62;&#x61;&#115;&#101;&#64;&#x31;&#x31;&#46;&#48;&#x2e;&#49;&#x38;</a>)<br>   9:       3101147      124045880  java.lang.ref.SoftReference (<a href="mailto:&#106;&#x61;&#118;&#x61;&#x2e;&#x62;&#97;&#115;&#101;&#64;&#x31;&#x31;&#x2e;&#48;&#46;&#x31;&#x38;">&#106;&#x61;&#118;&#x61;&#x2e;&#x62;&#97;&#115;&#101;&#64;&#x31;&#x31;&#x2e;&#48;&#46;&#x31;&#x38;</a>)<br>  10:       3068059      122722360  java.lang.invoke.BoundMethodHandle$Species_LL (<a href="mailto:&#106;&#x61;&#118;&#97;&#46;&#98;&#x61;&#x73;&#101;&#64;&#x31;&#49;&#46;&#x30;&#46;&#x31;&#x38;">&#106;&#x61;&#118;&#97;&#46;&#98;&#x61;&#x73;&#101;&#64;&#x31;&#49;&#46;&#x30;&#46;&#x31;&#x38;</a>)<br>  11:       4341767      104202408  java.lang.ClassValue$Version (<a href="mailto:&#x6a;&#x61;&#118;&#97;&#46;&#x62;&#97;&#x73;&#101;&#x40;&#x31;&#x31;&#x2e;&#48;&#x2e;&#x31;&#x38;">&#x6a;&#x61;&#118;&#97;&#46;&#x62;&#97;&#x73;&#101;&#x40;&#x31;&#x31;&#x2e;&#48;&#x2e;&#x31;&#x38;</a>)<br>  12:       1506502       84364112  jdk.nashorn.internal.runtime.ScriptFunction (<a href="mailto:&#106;&#100;&#x6b;&#46;&#x73;&#x63;&#x72;&#105;&#x70;&#116;&#105;&#x6e;&#103;&#46;&#x6e;&#97;&#x73;&#104;&#111;&#x72;&#x6e;&#x40;&#49;&#x31;&#x2e;&#x30;&#46;&#x31;&#56;">&#106;&#100;&#x6b;&#46;&#x73;&#x63;&#x72;&#105;&#x70;&#116;&#105;&#x6e;&#103;&#46;&#x6e;&#97;&#x73;&#104;&#111;&#x72;&#x6e;&#x40;&#49;&#x31;&#x2e;&#x30;&#46;&#x31;&#56;</a>)<br>  13:       2004817       80192680  java.util.TreeMap$Entry (<a href="mailto:&#106;&#x61;&#x76;&#97;&#46;&#98;&#97;&#115;&#101;&#64;&#49;&#x31;&#x2e;&#x30;&#46;&#49;&#56;">&#106;&#x61;&#x76;&#97;&#46;&#98;&#97;&#115;&#101;&#64;&#49;&#x31;&#x2e;&#x30;&#46;&#49;&#56;</a>)<br>  14:       2316002       74112064  java.util.HashMap$Node (<a href="mailto:&#x6a;&#97;&#118;&#x61;&#46;&#98;&#97;&#x73;&#x65;&#x40;&#49;&#49;&#46;&#x30;&#46;&#x31;&#x38;">&#x6a;&#97;&#118;&#x61;&#46;&#98;&#97;&#x73;&#x65;&#x40;&#49;&#49;&#46;&#x30;&#46;&#x31;&#x38;</a>)<br>  15:       2282867       73051744  jdk.nashorn.internal.runtime.PropertyHashMap$Element (<a href="mailto:&#x6a;&#100;&#107;&#46;&#x73;&#99;&#114;&#x69;&#x70;&#116;&#105;&#110;&#x67;&#x2e;&#x6e;&#97;&#x73;&#x68;&#x6f;&#x72;&#x6e;&#64;&#49;&#49;&#x2e;&#48;&#x2e;&#49;&#x38;">&#x6a;&#100;&#107;&#46;&#x73;&#99;&#114;&#x69;&#x70;&#116;&#105;&#110;&#x67;&#x2e;&#x6e;&#97;&#x73;&#x68;&#x6f;&#x72;&#x6e;&#64;&#49;&#49;&#x2e;&#48;&#x2e;&#49;&#x38;</a>)<br>  16:       4341767       69468272  java.lang.ClassValue$Identity (<a href="mailto:&#106;&#x61;&#x76;&#x61;&#x2e;&#x62;&#x61;&#x73;&#x65;&#x40;&#49;&#49;&#x2e;&#48;&#x2e;&#49;&#56;">&#106;&#x61;&#x76;&#x61;&#x2e;&#x62;&#x61;&#x73;&#x65;&#x40;&#49;&#49;&#x2e;&#48;&#x2e;&#49;&#56;</a>)<br>  17:       1435938       68925024  java.util.WeakHashMap (<a href="mailto:&#x6a;&#97;&#118;&#97;&#x2e;&#98;&#x61;&#x73;&#101;&#x40;&#x31;&#x31;&#x2e;&#x30;&#x2e;&#49;&#x38;">&#x6a;&#97;&#118;&#97;&#x2e;&#98;&#x61;&#x73;&#101;&#x40;&#x31;&#x31;&#x2e;&#x30;&#x2e;&#49;&#x38;</a>)<br>  18:       1657484       66299360  jdk.nashorn.internal.runtime.CompiledFunction (<a href="mailto:&#x6a;&#x64;&#107;&#x2e;&#x73;&#x63;&#x72;&#105;&#x70;&#116;&#105;&#110;&#x67;&#x2e;&#x6e;&#x61;&#115;&#x68;&#111;&#114;&#x6e;&#64;&#49;&#x31;&#46;&#x30;&#46;&#49;&#x38;">&#x6a;&#x64;&#107;&#x2e;&#x73;&#x63;&#x72;&#105;&#x70;&#116;&#105;&#110;&#x67;&#x2e;&#x6e;&#x61;&#115;&#x68;&#111;&#114;&#x6e;&#64;&#49;&#x31;&#46;&#x30;&#46;&#49;&#x38;</a>)</p><p>[C is a char[]<br>[B is a byte[]<br>[I is a int[]<br>[S is a short[]<br>[[I is a int[][]</p><pre><code class="bash"># 查看堆空间存活, 注意, 会触发 full gcjmap -histo:live PID | head -n20</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> gc </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 常用命令</title>
      <link href="/2024/08/30/centos7-commands/"/>
      <url>/2024/08/30/centos7-commands/</url>
      
        <content type="html"><![CDATA[<h1 id="Software-installation"><a href="#Software-installation" class="headerlink" title="Software installation"></a>Software installation</h1><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><pre><code class="bash"># 就是把服务器的包信息下载到本地电脑缓存起来，makecache建立一个缓存，以后用install时就在缓存中搜索，提高了速度。yum makecache# 不用上网检索就能查找软件信息yum -C search git# 清理缓存yum clean all# 添加 Extra Packages for Enterprise Linux 源，安装后就可以在 /etc/yum.repos.d/ 看到 epel 源信息yum install -y epel-release# 接下来以 ansible 这个软件为例yum install ansible     # 安装yum reinstall ansible   # 重新安装yum upgrade ansible     # 升级yum info ansible        # 查看软件信息yum remove ansible      # 删除yum update              # 升级所有包同时也升级软件和系统内核(慎用yum upgrade             # 升级所有包，但不升级软件和系统内核yum list ansible        # 查看是否安装yum list all            # 列出所有软件yum list installed      # 列出所有安装的软件yum list available      # 列出所有可以安装的软件yum search ansible      # 搜索软件信息yum whatprovides rm     # yum源中查找包含rm的软件包yum check-update        # 查看可更新的软件列表rpm -ql ansible | more  # 查看 ansible 的安装位置# 换源## 备份mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup## 下载新的配置文件### CentOS 6wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo### CentOS 7wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo### CentOS 8wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo## 生成缓存yum makecache</code></pre><h2 id="ansible"><a href="#ansible" class="headerlink" title="ansible"></a>ansible</h2><pre><code class="bash"># 修改要管理的机器vim /etc/ansible/hosts[webservers]192.168.1.100192.168.1.101</code></pre><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><pre><code class="bash"># 在 .bashrc 中放入，可以高亮man手册function man()&#123;    env \    LESS_TERMCAP_mb=$(printf &quot;\e[1;31m&quot;) \    LESS_TERMCAP_md=$(printf &quot;\e[1;31m&quot;) \    LESS_TERMCAP_me=$(printf &quot;\e[0m&quot;) \    LESS_TERMCAP_se=$(printf &quot;\e[0m&quot;) \    LESS_TERMCAP_so=$(printf &quot;\e[1;44;33m&quot;) \    LESS_TERMCAP_ue=$(printf &quot;\e[0m&quot;) \    LESS_TERMCAP_us=$(printf &quot;\e[1;32m&quot;) \    man &quot;$@&quot;&#125;</code></pre><h2 id="zsh-on-my-zsh"><a href="#zsh-on-my-zsh" class="headerlink" title="zsh&#x2F;on-my-zsh"></a>zsh&#x2F;on-my-zsh</h2><pre><code class="bash"># 安装 zsh gityum install -y zsh git# 设置默认shell为 zshchsh -s /bin/zsh# 安装 on-my-zshsh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;# 复制配置cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc# 手动安装 zsh http://zsh.sourceforge.net/Arc/source.htmlyum -y install gcc perl-ExtUtils-MakeMaker ncurses-devel# 编译安装tar xvf zsh-5.8.tar.xzcd zsh-5.8./configuremake &amp;&amp; make install# 将zsh加入/etc/shellsvim /etc/shells # 添加：/usr/local/bin/zsh</code></pre><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><pre><code class="bash">sudo yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpmsudo yum install -y git</code></pre><h2 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a>neovim</h2><pre><code class="bash"># Download source codegit clone https://github.com/neovim/neovim.git# install cmake and dependencysudo yum install -y cmake gcc-c++ libtool unzip# compile with cmakemake CMAKE_BUILD_TYPE=Release# installsudo make install# fix error: Failed to load python3 hostpip3 install --upgrade --force-reinstall neovim</code></pre><h2 id="neofetch"><a href="#neofetch" class="headerlink" title="neofetch"></a>neofetch</h2><pre><code class="bash">dnf copr enable -y konimex/neofetchdnf install -y neofetch</code></pre><h2 id="rainbarf"><a href="#rainbarf" class="headerlink" title="rainbarf"></a>rainbarf</h2><pre><code class="bash"># Download source codegit clone https://github.com/creaktive/rainbarf.git# install dependencyyum install -y perl-Module-Build perl-Test-Simple# installperl Build.PL./Build test./Build install</code></pre><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>Mange node using <a href="https://github.com/nvm-sh/nvm">nvm</a></p><pre><code class="bash"># installationcurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash# set path，put following content into ~/.bashrcexport NVM_DIR=&quot;$([ -z &quot;$&#123;XDG_CONFIG_HOME-&#125;&quot; ] &amp;&amp; printf %s &quot;$&#123;HOME&#125;/.nvm&quot; || printf %s &quot;$&#123;XDG_CONFIG_HOME&#125;/nvm&quot;)&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm# install latest nodenvm install node</code></pre><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>[[docker#安装卸载]]</p><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>[[docker#docker-compose]]</p><h2 id="rancher"><a href="#rancher" class="headerlink" title="rancher"></a>rancher</h2><pre><code class="bash">docker run -d --restart=unless-stopped \  -p 80:80 -p 443:443 \  --privileged \  --name=lemes-rancher-2.5 \  10.188.132.44:5000/rancher/rancher:v2.5.12docker restart lemes-rancher-2.5docker stop lemes-rancher-2.5docker start lemes-rancher-2.5docker run -d --restart=unless-stopped \  -p 9080:80 -p 8443:443 \  --privileged \  --name=lemes-rancher-2.5-prod \  10.188.132.123:5000/rancher/rancher:v2.5.12# 生产docker run -d --restart=unless-stopped \  -p 80:80 -p 443:443 \  --privileged \  --name=lemes-rancher-2.5-prod \  10.188.132.44:5000/rancher/rancher:v2.5.12docker run -d --restart=unless-stopped \  -p 9080:80 -p 8443:443 \  --privileged \  --name=lemes-rancher-2.5-prod \  10.188.132.44:5000/rancher/rancher:v2.5.12docker run -d --restart=unless-stopped \  -p 9080:80 -p 9443:443 \  --privileged \  --name=lemes-rancher-2.5-prod \  rancher/rancher:v2.5.12docker run -d --restart=unless-stopped \  -p 8080:80 -p 8083:443 \  --privileged \  --name=lemes-rancher-2.5-prod \  10.176.2.207:5000/rancher/rancher:v2.5.12</code></pre><h2 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h2><blockquote><p>前提: 需要先安装 docker &amp; docker-compose</p></blockquote><p>复制最新的包的链接: <a href="https://github.com/goharbor/harbor/releases">https://github.com/goharbor/harbor/releases</a></p><pre><code class="bash">wget https://github.com/goharbor/harbor/releases/download/v2.3.1/harbor-offline-installer-v2.3.1.tgztar -zxf harbor-offline-installer-v2.3.1.tgz -C /data/docker/harborsudo chown -R lemes:lemes /data/docker/harborcd /data/docker/harbor/harborcp harbor.yml.tmpl harbor.ymlvi harbor.ymlsudo su rootexport PATH=$PATH:/usr/local/bin./install.sh</code></pre><pre><code class="yaml"># Configuration file of Harbor# The IP address or hostname to access admin UI and registry service.# DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.hostname: 10.176.2.207# http related confighttp:  # port for http, default is 80. If https enabled, this port will redirect to https port  port: 5000# https related config#https:#  # https port for harbor, default is 443#  port: 443#  # The path of cert and key files for nginx#  certificate: /your/certificate/path#  private_key: /your/private/key/path# # Uncomment following will enable tls communication between all harbor components# internal_tls:#   # set enabled to true means internal tls is enabled#   enabled: true#   # put your cert and key files on dir#   dir: /etc/harbor/tls/internal# Uncomment external_url if you want to enable external proxy# And when it enabled the hostname will no longer used# external_url: https://reg.mydomain.com:8433# The initial password of Harbor admin# It only works in first time to install harbor# Remember Change the admin password from UI after launching Harbor.harbor_admin_password: Lenovo2021# Harbor DB configurationdatabase:  # The password for the root user of Harbor DB. Change this before any production use.  password: root123  # The maximum number of connections in the idle connection pool. If it &lt;=0, no idle connections are retained.  max_idle_conns: 100  # The maximum number of open connections to the database. If it &lt;= 0, then there is no limit on the number of open connections.  # Note: the default number of connections is 1024 for postgres of harbor.  max_open_conns: 900# The default data volumedata_volume: /data/docker/harbor# Harbor Storage settings by default is using /data dir on local filesystem# Uncomment storage_service setting If you want to using external storage# storage_service:#   # ca_bundle is the path to the custom root ca certificate, which will be injected into the truststore#   # of registry&#39;s and chart repository&#39;s containers.  This is usually needed when the user hosts a internal storage with self signed certificate.#   ca_bundle:#   # storage backend, default is filesystem, options include filesystem, azure, gcs, s3, swift and oss#   # for more info about this configuration please refer https://docs.docker.com/registry/configuration/#   filesystem:#     maxthreads: 100#   # set disable to true when you want to disable registry redirect#   redirect:#     disabled: false# Trivy configuration## Trivy DB contains vulnerability information from NVD, Red Hat, and many other upstream vulnerability databases.# It is downloaded by Trivy from the GitHub release page https://github.com/aquasecurity/trivy-db/releases and cached# in the local file system. In addition, the database contains the update timestamp so Trivy can detect whether it# should download a newer version from the Internet or use the cached one. Currently, the database is updated every# 12 hours and published as a new release to GitHub.trivy:  # ignoreUnfixed The flag to display only fixed vulnerabilities  ignore_unfixed: false  # skipUpdate The flag to enable or disable Trivy DB downloads from GitHub  #  # You might want to enable this flag in test or CI/CD environments to avoid GitHub rate limiting issues.  # If the flag is enabled you have to download the `trivy-offline.tar.gz` archive manually, extract `trivy.db` and  # `metadata.json` files and mount them in the `/home/scanner/.cache/trivy/db` path.  skip_update: false  #  # The offline_scan option prevents Trivy from sending API requests to identify dependencies.  # Scanning JAR files and pom.xml may require Internet access for better detection, but this option tries to avoid it.  # For example, the offline mode will not try to resolve transitive dependencies in pom.xml when the dependency doesn&#39;t  # exist in the local repositories. It means a number of detected vulnerabilities might be fewer in offline mode.  # It would work if all the dependencies are in local.  # This option doesn’t affect DB download. You need to specify &quot;skip-update&quot; as well as &quot;offline-scan&quot; in an air-gapped environment.  offline_scan: false  #  # insecure The flag to skip verifying registry certificate  insecure: false  # github_token The GitHub access token to download Trivy DB  #  # Anonymous downloads from GitHub are subject to the limit of 60 requests per hour. Normally such rate limit is enough  # for production operations. If, for any reason, it&#39;s not enough, you could increase the rate limit to 5000  # requests per hour by specifying the GitHub access token. For more details on GitHub rate limiting please consult  # https://developer.github.com/v3/#rate-limiting  #  # You can create a GitHub token by following the instructions in  # https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line  #  # github_token: xxxjobservice:  # Maximum number of job workers in job service  max_job_workers: 10notification:  # Maximum retry count for webhook job  webhook_job_max_retry: 10chart:  # Change the value of absolute_url to enabled can enable absolute url in chart  absolute_url: disabled# Log configurationslog:  # options are debug, info, warning, error, fatal  level: info  # configs for logs in local storage  local:    # Log files are rotated log_rotate_count times before being removed. If count is 0, old versions are removed rather than rotated.    rotate_count: 50    # Log files are rotated only if they grow bigger than log_rotate_size bytes. If size is followed by k, the size is assumed to be in kilobytes.    # If the M is used, the size is in megabytes, and if G is used, the size is in gigabytes. So size 100, size 100k, size 100M and size 100G    # are all valid.    rotate_size: 200M    # The directory on your host that store log    location: /data/docker/harbor/log  # Uncomment following lines to enable external syslog endpoint.  # external_endpoint:  #   # protocol used to transmit log to external endpoint, options is tcp or udp  #   protocol: tcp  #   # The host of external endpoint  #   host: localhost  #   # Port of external endpoint  #   port: 5140#This attribute is for migrator to detect the version of the .cfg file, DO NOT MODIFY!_version: 2.6.0# Uncomment external_database if using external database.# external_database:#   harbor:#     host: harbor_db_host#     port: harbor_db_port#     db_name: harbor_db_name#     username: harbor_db_username#     password: harbor_db_password#     ssl_mode: disable#     max_idle_conns: 2#     max_open_conns: 0#   notary_signer:#     host: notary_signer_db_host#     port: notary_signer_db_port#     db_name: notary_signer_db_name#     username: notary_signer_db_username#     password: notary_signer_db_password#     ssl_mode: disable#   notary_server:#     host: notary_server_db_host#     port: notary_server_db_port#     db_name: notary_server_db_name#     username: notary_server_db_username#     password: notary_server_db_password#     ssl_mode: disable# Uncomment external_redis if using external Redis server# external_redis:#   # support redis, redis+sentinel#   # host for redis: &lt;host_redis&gt;:&lt;port_redis&gt;#   # host for redis+sentinel:#   #  &lt;host_sentinel1&gt;:&lt;port_sentinel1&gt;,&lt;host_sentinel2&gt;:&lt;port_sentinel2&gt;,&lt;host_sentinel3&gt;:&lt;port_sentinel3&gt;#   host: redis:6379#   password: #   # sentinel_master_set must be set to support redis+sentinel#   #sentinel_master_set:#   # db_index 0 is for core, it&#39;s unchangeable#   registry_db_index: 1#   jobservice_db_index: 2#   chartmuseum_db_index: 3#   trivy_db_index: 5#   idle_timeout_seconds: 30# Uncomment uaa for trusting the certificate of uaa instance that is hosted via self-signed cert.# uaa:#   ca_file: /path/to/ca# Global proxy# Config http proxy for components, e.g. http://my.proxy.com:3128# Components doesn&#39;t need to connect to each others via http proxy.# Remove component from `components` array if want disable proxy# for it. If you want use proxy for replication, MUST enable proxy# for core and jobservice, and set `http_proxy` and `https_proxy`.# Add domain to the `no_proxy` field, when you want disable proxy# for some special registry.proxy:  http_proxy:  https_proxy:  no_proxy:  components:    - core    - jobservice    - trivy# metric:#   enabled: false#   port: 9090#   path: /metrics# Trace related config# only can enable one trace provider(jaeger or otel) at the same time,# and when using jaeger as provider, can only enable it with agent mode or collector mode.# if using jaeger collector mode, uncomment endpoint and uncomment username, password if needed# if using jaeger agetn mode uncomment agent_host and agent_port# trace:#   enabled: true#   # set sample_rate to 1 if you wanna sampling 100% of trace data; set 0.5 if you wanna sampling 50% of trace data, and so forth#   sample_rate: 1#   # # namespace used to differenciate different harbor services#   # namespace:#   # # attributes is a key value dict contains user defined attributes used to initialize trace provider#   # attributes:#   #   application: harbor#   # # jaeger should be 1.26 or newer.#   # jaeger:#   #   endpoint: http://hostname:14268/api/traces#   #   username:#   #   password:#   #   agent_host: hostname#   #   # export trace data by jaeger.thrift in compact mode#   #   agent_port: 6831#   # otel:#   #   endpoint: hostname:4318#   #   url_path: /v1/traces#   #   compression: false#   #   insecure: true#   #   timeout: 10s# enable purge _upload directoriesupload_purging:  enabled: true  # remove files in _upload directories which exist for a period of time, default is one week.  age: 168h  # the interval of the purge operations  interval: 24h  dryrun: false# cache layer configurations# If this feature enabled, harbor will cache the resource# `project/project_metadata/repository/artifact/manifest` in the redis# which can especially help to improve the performance of high concurrent# manifest pulling.# NOTICE# If you are deploying Harbor in HA mode, make sure that all the harbor# instances have the same behaviour, all with caching enabled or disabled,# otherwise it can lead to potential data inconsistency.cache:  # not enabled by default  enabled: false  # keep cache for one day by default  expire_hours: 24</code></pre><pre><code class="bash"># 阻止 vim 样式穿透</code></pre><h2 id="nexus"><a href="#nexus" class="headerlink" title="nexus"></a>nexus</h2><pre><code class="bash"># create dir of nexussudo mkdir /data/nexus-data &amp;&amp; sudo chown -R 200 /data/nexus-datadocker run -d -p 8081:8081 --name nexus -v /data/nexus-data:/nexus-data 10.188.132.123:5000/library/sonatype/nexus3:3.63.0</code></pre><h2 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h2><p>修改启动用户，默认 anonymous 在 jenkins 脚本中没有权限创建文件</p><pre><code class="bash">sudo vi /etc/sysconfig/jenkins# 找到如下内容，修改后面的用户为有权限的用户JENKINS_USER=&quot;lemes&quot;# 重启 jenkinsservice jenkins restart</code></pre><h2 id="jenkins-docker"><a href="#jenkins-docker" class="headerlink" title="jenkins-docker"></a>jenkins-docker</h2><pre><code class="bash">docker run -d --name jenkins -p 9080:8080 10.188.132.44:5000/library/jenkins/jenkins:2.426.2-lts-jdk17sudo mkdir -p /data/jenkins_homesudo chown -R 1000:1000 /data/jenkins_homedocker run -d --name jenkins -p 9080:8080 \  -v /var/run/docker.sock:/var/run/docker.sock \  -v /data/jenkins_home:/var/jenkins_home \  10.188.132.44:5000/library/jenkins/jenkins:2.426.3-lts-jdk17-dinddocker run -d --name jenkins -p 8080:8080 \  -v /var/run/docker.sock:/var/run/docker.sock \  -v /data/jenkins_home:/var/jenkins_home \  10.188.132.44:5000/library/jenkins/jenkins:2.426.3-lts-jdk17-dinddocker run -d --name jenkins -p 9080:8080 \  -v /var/run/docker.sock:/var/run/docker.sock \  10.188.132.44:5000/library/jenkins/jenkins:2.426.3-lts-jdk17-dinddocker run -d --name jenkins -p 9080:8080 \  -v /var/run/docker.sock:/var/run/docker.sock \  10.188.132.44:5000/library/jenkins/jenkins:2.426.3-lts-jdk17-dinddocker run -d --name jenkins -p 8080:8080 \  -v /var/run/docker.sock:/var/run/docker.sock \  10.188.132.44:5000/library/jenkins/jenkins:2.426.3-lts-jdk17-dind-plugindocker run -d --name jenkins -p 8080:8080 \  -v /var/run/docker.sock:/var/run/docker.sock \  -v /data/jenkins_home:/var/jenkins_home \  jenkins:2.426.3-lts-jdk17-dinddocker run \  --rm \  -u root \  -p 8080:8080 \  -v jenkins-data:/var/jenkins_home \  -v /var/run/docker.sock:/var/run/docker.sock \  -v &quot;$HOME&quot;:/home \  jenkinsci/blueocean</code></pre><ul><li>jenkins plugin</li></ul><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><pre><code class="bash">sudo yum install -y epel-releasesudo yum -y install nginx # 安装 nginxsudo yum remove nginx  # 卸载 nginx</code></pre><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>Download latest installation package from <a href="https://www.python.org/downloads/source/">https://www.python.org/downloads/source/</a></p><pre><code class="bash"># 安装依赖&amp;编译工具yum -y groupinstall &quot;Development tools&quot;yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-develyum install -y libffi-devel zlib1g-devyum install zlib* -y# 下载安装包wget https://www.python.org/ftp/python/3.9.1/Python-3.9.1.tgz# 解压tar -xvf Python-3.9.1.tgz# 创建编译目录mkdir /usr/local/python3# 编译./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl make &amp;&amp; make install# 创建软连接ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3# 验证python3 -Vpip3 -V</code></pre><h2 id="gcc8"><a href="#gcc8" class="headerlink" title="gcc8"></a>gcc8</h2><pre><code class="bash">sudo yum install centos-release-scl devtoolset-8-gcc* -y# 激活生效（临时）scl enable devtoolset-8 bashgcc -v</code></pre><h2 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h2><pre><code class="bash"># 创建 jdk 存放目录mkdir -p /data/software/jdkcd /data/software/jdk# 下载 jdk 包wget https://corretto.aws/downloads/latest/amazon-corretto-8-x64-linux-jdk.tar.gz# 解压tar -zxvf amazon-corretto-8-x64-linux-jdk.tar.gz# 设置 JAVA_HOME 和 PATHvi /etc/profileexport JAVA_HOME=/data/software/jdk/amazon-corretto-8.322.06.2-linux-x64export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;PATH&#125;# 生效source /etc/profile</code></pre><pre><code class="bash">sudo rpm --import https://yum.corretto.aws/corretto.key  sudo curl -L -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.reposudo yum install -y java-11-amazon-corretto-devel</code></pre><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><pre><code class="bash"># 下载 maven 包 https://dlcdn.apache.org/mkdir -p /data/software/mavencd /data/software/mavenwget https://dlcdn.apache.org/maven/maven-3/3.9.1/binaries/apache-maven-3.9.1-bin.tar.gz --no-check-certificate# 解压tar -zxvf apache-maven-3.9.1-bin.tar.gz# 设置环境变量sudo vi /etc/profileMAVEN_HOME=/data/software/maven/apache-maven-3.9.1export PATH=$&#123;MAVEN_HOME&#125;/bin:$&#123;PATH&#125;# 生效source /etc/profile</code></pre><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><pre><code class="bash"># https://redis.io/download/cd /usr/local/curl -LO https://codeload.github.com/redis/redis/tar.gz/refs/tags/7.0.5tar -zxvf redis-7.0.5.tar.gzcd redis-7.0.5/</code></pre><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><pre><code class="bash">yum install ntp ntpdatesystemctl start ntpdsystemctl enable ntpd</code></pre><h1 id="System-setting"><a href="#System-setting" class="headerlink" title="System setting"></a>System setting</h1><h2 id="ssh-no-password"><a href="#ssh-no-password" class="headerlink" title="ssh no password"></a>ssh no password</h2><pre><code class="bash"># 客户端## 生成公私钥对ssh-keygen -t rsa -C &quot;yelog@mail.com&quot;## 复制下面下面打印出来的公钥cat ~/.ssh/id_rsa.pub# 将公钥上传到服务器ssh-copy-id -i ～/.ssh/id_rsa.pub root@xx.xx.xx.xx# 手动将密钥上传到服务器## 创建 authorized_keys（存在则忽略）touch ~/.ssh/authorized_keys## 设置权限chmod 700 -R ~/.ssh## 追加到文件内echo &quot;公钥&quot; &gt;&gt; ~/.ssh/authorized_keys</code></pre><h2 id="open-file-limit"><a href="#open-file-limit" class="headerlink" title="open file limit"></a>open file limit</h2><pre><code class="bash"># 获取当前系统设置的文件数ulimit -n# 软件限制ulimit  -Sn# 硬件限制ulimit  -Hn# 临时生效ulimit -SHn 10000# 永久生效sudo vim /etc/security/limits.conf* soft nofile 9000000* hard nofile 9000000# 查看当前进程打开了多少句柄数lsof -n|awk &#39;&#123;print $2&#125;&#39;|sort|uniq -c|sort -nr|moresudo vi /etc/sysctl.conf# 添加fs.file-max = 9000000fs.inotify.max_user_instances = 1000000fs.inotify.max_user_watches = 1000000# 生效sudo sysctl -p</code></pre><h2 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h2><pre><code class="bash"># 启动 firewalldsudo systemctl start firewalld# 查看 firewalld 状态sudo systemctl status firewalld# 关闭 firewalldsudo systemctl stop firewalld# 重新加载配置sudo firewall-cmd --reload# 允许端口(tcp)范围进行访问sudo firewall-cmd --zone=public --add-rich-rule=&#39;rule family=&quot;ipv4&quot; source address=&quot;0.0.0.0/0&quot; port port=&quot;1-9329&quot; protocol=&quot;tcp&quot; accept&#39; --permanent# 允许端口(udp)范围进行访问sudo firewall-cmd --zone=public --add-rich-rule=&#39;rule family=&quot;ipv4&quot; source address=&quot;0.0.0.0/0&quot; port port=&quot;1-9329&quot; protocol=&quot;udp&quot; accept&#39; --permanent# 添加访问端口 永久生效sudo firewall-cmd --zone=public --add-port=9332/tcp --permanent</code></pre><h2 id="disk"><a href="#disk" class="headerlink" title="disk"></a>disk</h2><pre><code class="bash"># 挂载磁盘 /dev/sda3 到/data目录， 重启失效# 需要提前 创建 /data 目录mount /dev/sda3 /data</code></pre><p>永久生效 <code>vi /etc/fstab</code>, 添加如下内容</p><pre><code class="bash">/dev/sda3 /data ext4 defaults 0 0</code></pre><h2 id="Cpu-Memory"><a href="#Cpu-Memory" class="headerlink" title="Cpu&amp;Memory"></a>Cpu&amp;Memory</h2><pre><code class="bash"># 查询物理个数grep &#39;physical id&#39; /proc/cpuinfo | sort -u | wc -l# 查看 CPU 物理核心数量grep &#39;core id&#39; /proc/cpuinfo | sort -u | wc -l# 查看 CPU 逻辑核心数量(一般说几C几G, 说的是逻辑核心)grep &#39;processor&#39; /proc/cpuinfo | sort -u | wc -l</code></pre><h1 id="command"><a href="#command" class="headerlink" title="command"></a>command</h1><h2 id="network"><a href="#network" class="headerlink" title="network"></a>network</h2><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>[[CentOS修改DNS-GW-IP# 1.修改DNS]]</p><h3 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h3><p>[[CentOS修改DNS-GW-IP# 2.修改网关]]</p><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>[[CentOS修改DNS-GW-IP# 3.修改IP]]</p><pre><code class="bash"># 监控 eth1 网卡的上下行网络watch -d ifstat eth1</code></pre><h2 id="files"><a href="#files" class="headerlink" title="files"></a>files</h2><h4 id="search-and-delete-file"><a href="#search-and-delete-file" class="headerlink" title="search and delete file"></a>search and delete file</h4><pre><code class="bash"># 查找并删除当前文件夹下（包括子目录） 的所有以 .bak 结尾的文件find . -name *.bak -type f -exec rm -rf &#123;&#125; \;# 查找并删除当前文件夹（包括子目录） 的所有 .settings 目录，并执行删除命令find . -name &#39;.settings&#39; -type d -exec rm -rf &#123;&#125; \;</code></pre><h2 id="ctrl-w-delete-word"><a href="#ctrl-w-delete-word" class="headerlink" title="ctrl-w delete word"></a>ctrl-w delete word</h2><p>add the following lines to my .bashrc</p><pre><code class="bash">stty werase undefbind &#39;\C-w:unix-filename-rubout&#39;</code></pre><h2 id="enable-vim-on-cli"><a href="#enable-vim-on-cli" class="headerlink" title="enable vim on cli"></a>enable vim on cli</h2><pre><code class="bash">set -o vi</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos7 </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="/2024/08/30/docker-commands/"/>
      <url>/2024/08/30/docker-commands/</url>
      
        <content type="html"><![CDATA[<h1 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h1><pre><code class="bash"># 根据镜像启动容器# -d 后台运行 -p 端口映射 -v 挂载目录 -e 环境变量 --name 容器名 --restart 重启策略docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx# 查看正在运行的容器列表, -a 包含已经停止的容器docker ps [-a]# 查看指定容器的日志, --tail 50 最后50调， -f 持续查看docker logs --tail 50 -f &lt;container-id&gt; # 命令行进行指定容器docker exec -it &lt;container-id&gt; /bin/sh# 启动容器docker start &lt;container-id&gt;# 停止容器docker stop &lt;container-id&gt;# 重启容器docker restart &lt;container-id&gt;# 删除容器docker rm &lt;container-id&gt;# 拉取镜像docker pull nginx# 查看本地仓库有哪些镜像docker images# 查询 docker 的磁盘使用情况docker system df# 每个容器的磁盘占用情况docker system df -v# 从容器中拷贝到宿主机docker cp &lt;container-id&gt;:&lt;path&gt; . # 将 nginx 镜像保存到 nginx.tar 文件docker save -o nginx.tar nginx# 还原镜像docker load -i nginx.tar# 清除所有不在使用的资源docker system prune -af# 查看镜像的构建历史docker history nginx# 查看镜像的详细信息docker inspect nginx</code></pre><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="docker-install"><a href="#docker-install" class="headerlink" title="docker install"></a>docker install</h2><pre><code class="bash"># 安装依赖sudo yum install -y yum-utils device-mapper-persistent-data lvm2# 设置 yum 源sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo# 查看 docker 版本sudo yum list docker-ce --showduplicates | sort -r# 选取一个版本进行安装sudo yum install -y docker-ce-20.10.9# 启动 docker 并设置开机启动sudo systemctl enable --now docker</code></pre><h2 id="docker-uninstall"><a href="#docker-uninstall" class="headerlink" title="docker uninstall"></a>docker uninstall</h2><pre><code class="bash"># 卸载sudo yum remove -y docker docker-ce docker-common docker-selinux docker-engine</code></pre><h2 id="docker-设置私服和存储地址"><a href="#docker-设置私服和存储地址" class="headerlink" title="docker 设置私服和存储地址"></a>docker 设置私服和存储地址</h2><pre><code class="bash">sudo vi /etc/docker/daemon.json</code></pre><pre><code class="json">&#123;  &quot;registry-mirrors&quot;: [],  &quot;insecure-registries&quot;: [    &quot;10.188.132.44:5000&quot;,    &quot;10.188.132.123:5000&quot;,    &quot;10.176.2.207:5000&quot;  ],  &quot;data-root&quot;:&quot;/data/docker/system&quot;,  &quot;debug&quot;: true,  &quot;experimental&quot;: false,  &quot;log-driver&quot;: &quot;json-file&quot;,  &quot;log-opts&quot;: &#123;    &quot;max-size&quot;: &quot;10m&quot;,    &quot;max-file&quot;: &quot;1&quot;,    &quot;labels&quot;: &quot;production_status&quot;,    &quot;env&quot;: &quot;os,customer&quot;  &#125;&#125;</code></pre><pre><code class="bash">sudo systemctl restart docker# 直接生效 daemon.jsonsudo kill -SIGHUP $(pidof dockerd)</code></pre><blockquote><p>其他方法</p></blockquote><pre><code class="bash"># 创建一个挂在镜像和容器的地方，最好选存储空间大的位置mkdir -p /data/docker/system#如果下面位置找不到 可以通过 sudo find / -name &#39;docker.service&#39; -type f 寻找 docker.service 位置sudo vim /usr/lib/systemd/system/docker.service# 在 ExecStart 最后添加 私服和镜像存储位置 --insecure-registry 10.176.66.20:5000 --graph /data/docker/systemExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry 10.176.66.20:5000 --graph /data/docker/system# 重载配置sudo systemctl daemon-reload# 重启服务sudo systemctl restart docker</code></pre><h2 id="授权当前用户-docker-的执行权限"><a href="#授权当前用户-docker-的执行权限" class="headerlink" title="授权当前用户 docker 的执行权限"></a>授权当前用户 docker 的执行权限</h2><pre><code class="bash"># 将当前用户添加到 docker 组内sudo gpasswd -a $USER docker# 刷新 docker 组配置newgrp docker# 重启 docker 服务sudo systemctl restart docker</code></pre><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>1.自带插件</p><pre><code class="bash">sudo yum install -y docker-compose-plugin</code></pre><p>2.下载</p><pre><code class="bash"># 下载安装docker-composesudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-linux-x86_64&quot; -o /usr/bin/docker-compose# 设置执行权限sudo chmod 777 /usr/bin/docker-compose</code></pre><h2 id="查看容器文件（原始启动失败的情况下）"><a href="#查看容器文件（原始启动失败的情况下）" class="headerlink" title="查看容器文件（原始启动失败的情况下）"></a>查看容器文件（原始启动失败的情况下）</h2><pre><code class="bash">docker run -it 10.176.2.207:5000/lemes-cloud/lemes-gateway:pgsql-master-202306181324 /bin/bash</code></pre><p>docker create -it –name dumy 10.188.132.123:5000&#x2F;lemes-cloud&#x2F;lemes-gateway:develop-202312111536 bash<br>docker cp dumy:&#x2F;data .</p><h2 id="从镜像想宿主机复制文件"><a href="#从镜像想宿主机复制文件" class="headerlink" title="从镜像想宿主机复制文件"></a>从镜像想宿主机复制文件</h2><pre><code class="bash"># 创建容器, 不启动docker create -it --name dumy 10.188.132.123:5000/library/mysql2postgresql-jdbc-agent:1.0.0 bash# 从容器内复制文件出来docker cp dumy:/tmp/mysql2postgresql-jdbc-agent-1.0.0.jar .# 移除容器docker rm dumy</code></pre><h2 id="打包镜像并还原镜像"><a href="#打包镜像并还原镜像" class="headerlink" title="打包镜像并还原镜像"></a>打包镜像并还原镜像</h2><pre><code class="bash"># 打包镜像docker save -o lemes-web.tar 10.176.2.207:5000/lemes-cloud/lemes-web:pgsql-master-202306272212# 还原镜像docker load -i lemes-web.tar</code></pre><h2 id="修改启动容器的端口映射-modify-port-mapping-of-running-container"><a href="#修改启动容器的端口映射-modify-port-mapping-of-running-container" class="headerlink" title="修改启动容器的端口映射 modify port mapping of running container"></a>修改启动容器的端口映射 modify port mapping of running container</h2><p>假设我们有已经启动的容器 <code>my-nginx</code>, 目前的端口映射为 <code>80:80</code>, 现在需要修改为 <code>8080:80</code></p><ol><li>首先通过 <code>docker ps | grep nginx</code> 查看容器的 <code>CONTAINER ID</code></li><li>找到 <code>docker</code> 的磁盘存储地址, 默认为 <code>/var/lib/docker/containers</code>, 如果修改了 <code>daemon.json</code> 中的 <code>data-root</code> 则需要修改对应的地址</li><li>在 <code>containers</code> 下载找到对应的 <code>CONTAINER ID</code> 的文件夹, 编辑其下的 <code>hostconfig.json</code> 文件</li><li>找到 <code>PortBindings</code> 下的 <code>80/tcp</code> 对应的 <code>HostPort</code> 目前应该是 <code>80</code>, 修改为 <code>8080</code></li><li>重启 <code>docker</code> 服务, <code>systemctl restart docker</code></li></ol><blockquote><p>注意: 如果需要修改容器内的端口, 比如要修改为 <code>80:8080</code><br>那么除了修改 <code>config.v2.json</code> 中的 <code>PortBindings</code> 的 <code>key</code> 从 <code>80/tcp</code> 到 <code>8080/tcp</code> 外<br>还需要修改 <code>config.v2.json</code> 中的 <code>ExposedPorts</code> 中的 <code>80/tcp</code> 为 <code>8080/tcp</code></p></blockquote><h1 id="Issues"><a href="#Issues" class="headerlink" title="Issues"></a>Issues</h1><h2 id="getting-the-final-child’s-pid-from-pipe-caused-EOF-unknown"><a href="#getting-the-final-child’s-pid-from-pipe-caused-EOF-unknown" class="headerlink" title="getting the final child’s pid from pipe caused: EOF: unknown"></a>getting the final child’s pid from pipe caused: EOF: unknown</h2><pre><code class="bash">sudo sysctl -w user.max_user_namespaces=150000</code></pre><h2 id="failed-to-start-daemon-Devices-cgroup-isn’t-mounted"><a href="#failed-to-start-daemon-Devices-cgroup-isn’t-mounted" class="headerlink" title="failed to start daemon: Devices cgroup isn’t mounted"></a>failed to start daemon: Devices cgroup isn’t mounted</h2><p>start docker deamon faild.</p><pre><code class="bash">$ sudo systemctl start dockerJob for docker.service failed because the control process exited with error code. See &quot;systemctl status docker.service&quot; and &quot;journalctl -xe&quot; for details.`$ journalctl -xe-- Subject: Unit docker.socket has finished start-up-- Defined-By: systemd-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel---- Unit docker.socket has finished starting up.---- The start-up result is done.May 19 10:26:34 szxlpidgapp06 systemd[1]: Starting Docker Application Container Engine...-- Subject: Unit docker.service has begun start-up-- Defined-By: systemd-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel---- Unit docker.service has begun starting up.May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.580459394+08:00&quot; level=info msg=&quot;Starting up&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.580654556+08:00&quot; level=debug msg=&quot;Listener created for HTTP on fd ()&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.580999123+08:00&quot; level=debug msg=&quot;Golang&#39;s threads limit set to 922770&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.582149991+08:00&quot; level=info msg=&quot;parsed scheme: \&quot;unix\&quot;&quot; module=grpcMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.582178725+08:00&quot; level=info msg=&quot;scheme \&quot;unix\&quot; not registered, fallback to default scheme&quot; module=grpcMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.582285273+08:00&quot; level=info msg=&quot;ccResolverWrapper: sending update to cc: &#123;[&#123;unix:///run/containerd/containerd.sock 0  &lt;nil&gt;&#125;] &lt;nil&gt;&#125;&quot; module=grpcMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.582321352+08:00&quot; level=info msg=&quot;ClientConn switching balancer to \&quot;pick_first\&quot;&quot; module=grpcMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.583565030+08:00&quot; level=info msg=&quot;parsed scheme: \&quot;unix\&quot;&quot; module=grpcMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.583585521+08:00&quot; level=info msg=&quot;scheme \&quot;unix\&quot; not registered, fallback to default scheme&quot; module=grpcMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.583602813+08:00&quot; level=info msg=&quot;ccResolverWrapper: sending update to cc: &#123;[&#123;unix:///run/containerd/containerd.sock 0  &lt;nil&gt;&#125;] &lt;nil&gt;&#125;&quot; module=grpcMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.583610828+08:00&quot; level=info msg=&quot;ClientConn switching balancer to \&quot;pick_first\&quot;&quot; module=grpcMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.584849300+08:00&quot; level=debug msg=&quot;Using default logging driver json-file&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.584898470+08:00&quot; level=debug msg=&quot;processing event stream&quot; module=libcontainerd namespace=plugins.mobyMay 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.584902148+08:00&quot; level=debug msg=&quot;[graphdriver] priority list: [btrfs zfs overlay2 aufs overlay devicemapper vfs]&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594035041+08:00&quot; level=debug msg=&quot;backingFs=xfs, projectQuotaSupported=false, indexOff=\&quot;index=off,\&quot;&quot; storage-driver=overlay2May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594052376+08:00&quot; level=info msg=&quot;[graphdriver] using prior storage driver: overlay2&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594062706+08:00&quot; level=debug msg=&quot;Initialized graph driver overlay2&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594715135+08:00&quot; level=warning msg=&quot;Your kernel does not support cgroup memory limit&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594726229+08:00&quot; level=warning msg=&quot;Unable to find cpu cgroup in mounts&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594731880+08:00&quot; level=warning msg=&quot;Unable to find blkio cgroup in mounts&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594737414+08:00&quot; level=warning msg=&quot;Unable to find cpuset cgroup in mounts&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594741722+08:00&quot; level=warning msg=&quot;mountpoint for pids not found&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: time=&quot;2022-05-19T10:26:34.594868843+08:00&quot; level=debug msg=&quot;Cleaning up old mountid : start.&quot;May 19 10:26:34 szxlpidgapp06 dockerd[33200]: failed to start daemon: Devices cgroup isn&#39;t mountedMay 19 10:26:34 szxlpidgapp06 systemd[1]: docker.service: main process exited, code=exited, status=1/FAILUREMay 19 10:26:34 szxlpidgapp06 systemd[1]: Failed to start Docker Application Container Engine.-- Subject: Unit docker.service has failed-- Defined-By: systemd-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel---- Unit docker.service has failed.---- The result is failed.May 19 10:26:34 szxlpidgapp06 systemd[1]: Unit docker.service entered failed state.May 19 10:26:34 szxlpidgapp06 systemd[1]: docker.service failed.</code></pre><p><strong>failed to start daemon: Devices cgroup isn’t mounted</strong> is very important message.</p><p>We check docker config by <code>https://raw.githubusercontent.com/moby/moby/master/contrib/check-config.sh</code></p><pre><code class="bash">warning: /proc/config.gz does not exist, searching other paths for kernel config ...info: reading kernel config from /boot/config-3.10.0-1160.62.1.el7.x86_64 ...Generally Necessary:- cgroup hierarchy: nonexistent??    (see https://github.com/tianon/cgroupfs-mount)- CONFIG_NAMESPACES: enabled- CONFIG_NET_NS: enabled- CONFIG_PID_NS: enabled- CONFIG_IPC_NS: enabled- CONFIG_UTS_NS: enabled- CONFIG_CGROUPS: enabled- CONFIG_CGROUP_CPUACCT: enabled- CONFIG_CGROUP_DEVICE: enabled- CONFIG_CGROUP_FREEZER: enabled- CONFIG_CGROUP_SCHED: enabled- CONFIG_CPUSETS: enabled- CONFIG_MEMCG: enabled- CONFIG_KEYS: enabled- CONFIG_VETH: enabled (as module)- CONFIG_BRIDGE: enabled (as module)- CONFIG_BRIDGE_NETFILTER: enabled (as module)- CONFIG_IP_NF_FILTER: enabled (as module)- CONFIG_IP_NF_TARGET_MASQUERADE: enabled (as module)- CONFIG_NETFILTER_XT_MATCH_ADDRTYPE: enabled (as module)- CONFIG_NETFILTER_XT_MATCH_CONNTRACK: enabled (as module)- CONFIG_NETFILTER_XT_MATCH_IPVS: enabled (as module)- CONFIG_NETFILTER_XT_MARK: enabled (as module)- CONFIG_IP_NF_NAT: enabled (as module)- CONFIG_NF_NAT: enabled (as module)- CONFIG_POSIX_MQUEUE: enabled- CONFIG_DEVPTS_MULTIPLE_INSTANCES: enabled- CONFIG_NF_NAT_IPV4: enabled (as module)- CONFIG_NF_NAT_NEEDED: enabled</code></pre><p><strong>cgroup hierarchy: nonexistent??</strong>, so we mounted cgroup by following script</p><blockquote><p>reference url: <a href="https://github.com/tianon/cgroupfs-mount/blob/master/cgroupfs-mount">https://github.com/tianon/cgroupfs-mount/blob/master/cgroupfs-mount</a></p></blockquote><pre><code class="bash">#!/bin/sh# Copyright 2011 Canonical, Inc#           2014 Tianon Gravi# Author: Serge Hallyn &lt;serge.hallyn@canonical.com&gt;#         Tianon Gravi &lt;tianon@debian.org&gt;set -e# for simplicity this script provides no flexibility# if cgroup is mounted by fstab, don&#39;t run# don&#39;t get too smart - bail on any uncommented entry with &#39;cgroup&#39; in itif grep -v &#39;^#&#39; /etc/fstab | grep -q cgroup; then echo &#39;cgroups mounted from fstab, not mounting /sys/fs/cgroup&#39; exit 0fi# kernel provides cgroups?if [ ! -e /proc/cgroups ]; then exit 0fi# if we don&#39;t even have the directory we need, something else must be wrongif [ ! -d /sys/fs/cgroup ]; then exit 0fi# mount /sys/fs/cgroup if not already doneif ! mountpoint -q /sys/fs/cgroup; then mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroupficd /sys/fs/cgroup# get/mount list of enabled cgroup controllersfor sys in $(awk &#39;!/^#/ &#123; if ($4 == 1) print $1 &#125;&#39; /proc/cgroups); do mkdir -p $sys if ! mountpoint -q $sys; then  if ! mount -n -t cgroup -o $sys cgroup $sys; then   rmdir $sys || true  fi fidone# example /proc/cgroups:#  #subsys_name hierarchy num_cgroups enabled#  cpuset 2 3 1#  cpu 3 3 1#  cpuacct 4 3 1#  memory 5 3 0#  devices 6 3 1#  freezer 7 3 1#  blkio 8 3 1# enable cgroups memory hierarchy, like systemd does (and lxc/docker desires)# https://github.com/systemd/systemd/blob/v245/src/core/cgroup.c#L2983# https://bugs.debian.org/940713if [ -e /sys/fs/cgroup/memory/memory.use_hierarchy ]; then echo 1 &gt; /sys/fs/cgroup/memory/memory.use_hierarchyfiexit 0</code></pre><h2 id="systemctl-start-docker-卡住"><a href="#systemctl-start-docker-卡住" class="headerlink" title="systemctl start docker 卡住"></a>systemctl start docker 卡住</h2><p>通过 <code>systemctl status docker</code> 查看状态, 发现并没有关闭成功</p><p>我们可以通过如下脚本, 进行强制关闭</p><pre><code class="bash">while true; do    kill -9 $(pidof containerd) $(pidof dockerd)    if [[ ! &quot;$?&quot; = &quot;0&quot; ]]; then        break    fidone</code></pre><p>然后再次启动 <code>docker</code> 即可</p><h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><ol><li><a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/">docker centos rpm</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> commands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 neovim 写 markdown 是一种什么样的体验(含技巧)</title>
      <link href="/2024/08/02/write-markdown-in-neovim-experience-and-tips/"/>
      <url>/2024/08/02/write-markdown-in-neovim-experience-and-tips/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从上大学开始使用 <code>vim</code> 已有 12 年, 最近三四年开始深度使用 <code>vim/neovim</code>, 包括写代码, 写文档, 写博客等等. 从这篇文章开始, 我将会记录和分享关于 <code>vim</code> 的一些使用技巧, 配置和插件.</p><p>插件管理器推荐 <code>lazy.nvim</code>, 如下配置也是基于 <code>lazy.nvim</code> 的, 其他的插件管理器配置也相似</p><p>很多使用技巧是基于插件和配置的, 所以本文的大纲如下:</p><ol><li>样式</li><li>效率</li><li>Snippet</li></ol><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><h2 id="全局主题"><a href="#全局主题" class="headerlink" title="全局主题"></a>全局主题</h2><p>使用的是 <a href="https://github.com/folke/tokyonight.nvim">folke&#x2F;tokyonight.nvim</a> 主题</p><pre><code class="lua">&#123;  &quot;folke/tokyonight.nvim&quot;,  config = function()    require(&quot;tokyonight&quot;).setup(&#123;      style = &quot;night&quot;,        -- The theme comes in three styles, `storm`, `moon`, a darker variant `night` and `day`      light_style = &quot;day&quot;,    -- The theme is used when the background is set to light      transparent = true,     -- Enable this to disable setting the background color      terminal_colors = true, -- Configure the colors used when opening a `:terminal` in Neovim      styles = &#123;        comments = &#123; italic = true &#125;,        keywords = &#123; italic = true &#125;,        functions = &#123;&#125;,        variables = &#123;&#125;,        sidebars = &quot;transparent&quot;,       -- style for sidebars, see below        floats = &quot;transparent&quot;,         -- style for floating windows      &#125;,      sidebars = &#123; &quot;qf&quot;, &quot;help&quot; &#125;,      -- Set a darker background on sidebar-like windows. For example: `[&quot;qf&quot;, &quot;vista_kind&quot;, &quot;terminal&quot;, &quot;packer&quot;]`      day_brightness = 0.3,             -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors      hide_inactive_statusline = false, -- Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard **StatusLine** and **LuaLine**.      dim_inactive = true,              -- dims inactive windows      lualine_bold = true,              -- When `true`, section headers in the lualine theme will be bold      on_colors = function(colors)        colors.border = &quot;#ef9020&quot;      end,      on_highlights = function(hl, c)        hl.Visual = &#123; bg = &quot;#6D6BC8&quot; &#125;      end,    &#125;)    vim.cmd([[colorscheme tokyonight]])  end,&#125;</code></pre><h2 id="代码块高亮"><a href="#代码块高亮" class="headerlink" title="代码块高亮"></a>代码块高亮</h2><p>使用的是 <a href="https://github.com/tpope/vim-markdown">tpope&#x2F;vim-markdown</a> 提供的代码块高亮功能</p><pre><code class="lua">&#123;    &quot;tpope/vim-markdown&quot;,    config = function()      -- tpope/vim-markdown      vim.g.markdown_syntax_conceal = 0      vim.g.markdown_fenced_languages =      &#123; &quot;html&quot;, &quot;python&quot;, &quot;bash=sh&quot;, &quot;json&quot;, &quot;java&quot;, &quot;js=javascript&quot;, &quot;sql&quot;, &quot;yaml&quot;, &quot;xml&quot;, &quot;Dockerfile&quot;, &quot;Rust&quot;,        &quot;swift&quot;, &quot;javascript&quot;, &#39;lua&#39; &#125;    end,&#125;, --&gt; syntax highlighting and filetype plugins for Markdown</code></pre><p>如下图所示, 左边是原始 markdown 文本, 右边是开启了 <code>vim-markdown</code> 插件的效果:</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202408301733036.png" alt="vim-markdown"></p><h2 id="终端实时渲染"><a href="#终端实时渲染" class="headerlink" title="终端实时渲染"></a>终端实时渲染</h2><p>使用的是 <a href="https://github.com/yelog/marklive.nvim">yelog&#x2F;marklive.nvim</a> 进行终端样式实时渲染</p><pre><code class="lua">&#123;    &quot;yelog/marklive.nvim&quot;,    dependencies = &#123; &#39;nvim-treesitter/nvim-treesitter&#39; &#125;,    lazy = true,    ft = &quot;markdown&quot;,    dev = true,&#125;,</code></pre><p>效果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202408301903047.png" alt="marklive.nvim"></p><h2 id="实时浏览器预览"><a href="#实时浏览器预览" class="headerlink" title="实时浏览器预览"></a>实时浏览器预览</h2><p><a href="https://github.com/iamcco/markdown-preview.nvim">iamcco&#x2F;markdown-preview.nvim</a>, 这是一个 <code>Markdown</code> 实时预览插件, 支持 <code>Github</code> 风格的 <code>Markdown</code>, 也支持数学公式渲染. 安装方法如下:</p><pre><code class="lua">&#123;    &quot;iamcco/markdown-preview.nvim&quot;,    cmd = &#123; &quot;MarkdownPreviewToggle&quot;, &quot;MarkdownPreview&quot;, &quot;MarkdownPreviewStop&quot; &#125;,    ft = &#123; &quot;markdown&quot; &#125;,    build = function()      vim.fn[&quot;mkdp#util#install&quot;]()      vim.g.mkdp_theme = &#39;light&#39;    end,&#125;</code></pre><p>添加了上面的插件后, 可以使用 <code>:MarkdownPreview</code> 命令就会自动弹出默认浏览器, 进行 markdown 实时预览.</p><p>效果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202408301727428.gif" alt="markdown-preview"></p><h1 id="效率插件"><a href="#效率插件" class="headerlink" title="效率插件"></a>效率插件</h1><h2 id="普通列表"><a href="#普通列表" class="headerlink" title="普通列表"></a>普通列表</h2><p><a href="https://github.com/bullets-vim/bullets.vim">bullets-vim&#x2F;bullets.vim</a>, 这是一个辅助写 list 的插件, 支持有序列表, 无序列表, 任务列表等等, 可以缩进, 新增</p><pre><code class="lua">&#123;    &quot;bullets-vim/bullets.vim&quot;,    config = function()      vim.g.bullets_enabled_file_types = &#123; &quot;markdown&quot;, &quot;text&quot;, &quot;gitcommit&quot;, &quot;scratch&quot; &#125;    end,&#125;</code></pre><p>效果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202408301740833.gif" alt="bullets.vim"></p><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p><a href="https://github.com/tenxsoydev/vim-markdown-checkswitch">tenxsoydev&#x2F;vim-markdown-checkswitch</a>, 任务状态切换插件</p><pre><code class="lua">&#123;    &quot;tenxsoydev/vim-markdown-checkswitch&quot;,        config = function()        vim.g.md_checkswitch_style = &quot;cycle&quot;    end,&#125;</code></pre><p>效果如下, 可以通过 <code>:CheckSwitch</code> 命令切换任务状态</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202408311644937.gif" alt="CheckSwitch"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p><a href="https://github.com/dhruvasagar/vim-table-mode">dhruvasagar&#x2F;vim-table-mode</a>, 这是一个支持在 <code>vim/neovim</code> 中编辑 <code>markdown</code> 表格的插件, 支持高亮, 自动对齐, 自动生成等</p><pre><code class="lua">&#123;    &quot;dhruvasagar/vim-table-mode&quot;,    config = function()      vim.cmd([[        augroup markdown_config          autocmd!          autocmd FileType markdown nnoremap &lt;buffer&gt; &lt;M-s&gt; :TableModeRealign&lt;CR&gt;        augroup END      ]], false)      vim.g.table_mode_sort_map = &#39;&lt;leader&gt;mts&#39;    end&#125;, --&gt; table mode</code></pre><p>效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202408301748302.gif" alt="vim-table-mode"></p><h1 id="Snippet"><a href="#Snippet" class="headerlink" title="Snippet"></a>Snippet</h1><pre><code class="snippets"># https://github.com/honza/vim-snippets/blob/master/snippets/markdown.snippetssnippet h1    # $&#123;1&#125;    $&#123;2&#125;snippet h2    ## $&#123;1&#125;    $&#123;2&#125;snippet h3    ### $&#123;1&#125;    $&#123;2&#125;snippet h4    #### $&#123;1&#125;    $&#123;2&#125;snippet h5    ##### $&#123;1&#125;    $&#123;2&#125;snippet h6    ##### $&#123;1&#125;    $&#123;2&#125;snippet h6    ##### $&#123;1&#125;    $&#123;2&#125;snippet l    [$&#123;1&#125;]($&#123;2&#125;) $&#123;3&#125;snippet !    ![$&#123;1&#125;]($&#123;2&#125;) $&#123;3&#125;snippet *    *$&#123;1&#125;* $&#123;2&#125;snippet **    **$&#123;1&#125;** $&#123;2&#125;snippet code    \`$&#123;1&#125;\` $&#123;2&#125;snippet codeblock    \`\`\`$&#123;1&#125;    $&#123;2&#125;    \`\`\`    $&#123;3&#125;snippet tb    | $&#123;1&#125; | $&#123;2&#125; | $&#123;3&#125; |    | ---- | ---- | ---- |    | $&#123;4&#125; | $&#123;5&#125; | $&#123;6&#125; |snippet tb2    | $&#123;1&#125; | $&#123;2&#125; |    | ---- | ---- |    | $&#123;4&#125; | $&#123;5&#125; |snippet info    ---    title: $&#123;1:`expand(&#39;%:t:r&#39;)`&#125;    enlink: $&#123;2&#125;    date: `strftime(&#39;%Y-%m-%d %H:%M:%S&#39;)`    categories:    - $&#123;3&#125;    tags:    - $&#123;4&#125;    ---snippet callout    &gt; [!$&#123;1:NOTE&#125;] $&#123;2:title&#125;    &gt; $&#123;3:content&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> neovim </tag>
            
            <tag> editor </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson 时间序列化/反序列化详解</title>
      <link href="/2024/07/05/Jackson%20Time%20Serializer/Deserializer/"/>
      <url>/2024/07/05/Jackson%20Time%20Serializer/Deserializer/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在项目中遇到了时间序列化的问题，所以研究了一下 Jackson 的时间序列化&#x2F;反序列化，这里做一个详细的总结。</p><h1 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0. 准备工作"></a>0. 准备工作</h1><p>准备实体类 User.java</p><pre><code class="java">package com.example.testjava.entity;import lombok.Builder;import lombok.Data;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.LocalTime;import java.util.Date;@Builder@Datapublic class User &#123;    private String name;    private Date date;    private LocalDate localDate;    private LocalDateTime localDateTime;    private LocalTime localTime;    private java.sql.Date sqlDate;    private java.sql.Time sqlTime;    private java.sql.Timestamp timestamp;&#125;</code></pre><p>简单查询</p><pre><code class="java">package com.example.testjava.controller;import com.example.testjava.entity.User;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.Date;@RestController@RequestMapping(&quot;/jackson&quot;)public class JacksonTestController &#123;    @GetMapping(&quot;/query&quot;)    public User testJavaDate() &#123;        return User.builder()                .name(&quot;test&quot;)                .date(new Date())                .localDate(java.time.LocalDate.now())                .localDateTime(java.time.LocalDateTime.now())                .localTime(java.time.LocalTime.now())                .sqlDate(new java.sql.Date(System.currentTimeMillis()))                .sqlTime(new java.sql.Time(System.currentTimeMillis()))                .timestamp(new java.sql.Timestamp(System.currentTimeMillis()))                .build();    &#125;&#125;</code></pre><h1 id="1-序列化"><a href="#1-序列化" class="headerlink" title="1. 序列化"></a>1. 序列化</h1><h2 id="1-1-默认返回"><a href="#1-1-默认返回" class="headerlink" title="1.1. 默认返回"></a>1.1. 默认返回</h2><pre><code class="json">&#123;    &quot;name&quot;: &quot;test&quot;,    &quot;date&quot;: &quot;2024-07-05T08:09:47.100+00:00&quot;,    &quot;localDate&quot;: &quot;2024-07-05&quot;,    &quot;localDateTime&quot;: &quot;2024-07-05T16:09:47.100462&quot;,    &quot;localTime&quot;: &quot;16:09:47.100514&quot;,    &quot;sqlDate&quot;: &quot;2024-07-05&quot;,    &quot;sqlTime&quot;: &quot;16:09:47&quot;,    &quot;timestamp&quot;: &quot;2024-07-05T08:09:47.100+00:00&quot;&#125;</code></pre><h1 id="1-2-添加配置"><a href="#1-2-添加配置" class="headerlink" title="1.2. 添加配置"></a>1.2. 添加配置</h1><p>配置如下</p><pre><code class="yaml">spring:  jackson:    date-format: yyyy-MM-dd HH:mm:ss</code></pre><p>返回效果</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;test&quot;,    &quot;date&quot;: &quot;2024-07-05 08:16:07&quot;,    &quot;localDate&quot;: &quot;2024-07-05&quot;,    &quot;localDateTime&quot;: &quot;2024-07-05T16:16:07.097035&quot;,    &quot;localTime&quot;: &quot;16:16:07.09705&quot;,    &quot;sqlDate&quot;: &quot;2024-07-05&quot;,    &quot;sqlTime&quot;: &quot;16:16:07&quot;,    &quot;timestamp&quot;: &quot;2024-07-05 08:16:07&quot;&#125;</code></pre><p>可以发现, 日期时间类型中, 只有 <code>java.time.LocalDateTime</code> 没有按照配置序列化, <code>java.util.Date</code> 和 <code>java.sql.Timestamp</code> 按照配置序列化了。</p><h1 id="1-3-添加注解"><a href="#1-3-添加注解" class="headerlink" title="1.3. 添加注解"></a>1.3. 添加注解</h1><pre><code class="java">package com.example.testjava.entity;import com.fasterxml.jackson.annotation.JsonFormat;import lombok.Builder;import lombok.Data;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.LocalTime;import java.util.Date;@Builder@Datapublic class User &#123;    private String name;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)    private Date date;    private LocalDate localDate;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)    private LocalDateTime localDateTime;    @JsonFormat(pattern = &quot;HH:mm:ss&quot;)    private LocalTime localTime;    private java.sql.Date sqlDate;    private java.sql.Time sqlTime;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)    private java.sql.Timestamp timestamp;&#125;</code></pre><p>返回效果</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;test&quot;,    &quot;date&quot;: &quot;2024-07-05 08:24:36&quot;,    &quot;localDate&quot;: &quot;2024-07-05&quot;,    &quot;localDateTime&quot;: &quot;2024-07-05 16:24:36&quot;,    &quot;localTime&quot;: &quot;16:24:36&quot;,    &quot;sqlDate&quot;: &quot;2024-07-05&quot;,    &quot;sqlTime&quot;: &quot;16:24:36&quot;,    &quot;timestamp&quot;: &quot;2024-07-05 08:24:36&quot;&#125;</code></pre><p>注解是可以都有效的</p><h1 id="2-反序列化"><a href="#2-反序列化" class="headerlink" title="2. 反序列化"></a>2. 反序列化</h1><p>准备请求</p><pre><code class="java">    @PostMapping(&quot;/save&quot;)    public User save(@RequestBody User user) &#123;        return user;    &#125;</code></pre><p>请求参数</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;test&quot;,    &quot;date&quot;: &quot;2024-07-05 08:24:36&quot;,    &quot;localDate&quot;: &quot;2024-07-05&quot;,    &quot;localDateTime&quot;: &quot;2024-07-05 16:24:36&quot;,    &quot;localTime&quot;: &quot;16:24:36&quot;,    &quot;sqlDate&quot;: &quot;2024-07-05&quot;,    &quot;sqlTime&quot;: &quot;16:24:36&quot;,    &quot;timestamp&quot;: &quot;2024-07-05 08:24:36&quot;&#125;</code></pre><h2 id="2-1-默认效果"><a href="#2-1-默认效果" class="headerlink" title="2.1 默认效果"></a>2.1 默认效果</h2><p>默认报错</p><pre><code class="text">JSON parse error: Cannot deserialize value of type `java.util.Date` from String \&quot;2024-07-05 08:24:36\&quot;</code></pre><h2 id="2-2-添加配置"><a href="#2-2-添加配置" class="headerlink" title="2.2 添加配置"></a>2.2 添加配置</h2><p>有两种方法可以解决, 一个是自定义时间序列化, 一个是自定义 objectMapper</p><h3 id="2-2-1-自定义时间序列化"><a href="#2-2-1-自定义时间序列化" class="headerlink" title="2.2.1 自定义时间序列化"></a>2.2.1 自定义时间序列化</h3><pre><code class="java">/** * 此转换方法试用于 json 请求 * LocalDateTime 时间格式转换 支持 */@JsonComponent@Configurationpublic class LocalDateTimeFormatConfiguration extends JsonDeserializer&lt;LocalDateTime&gt; &#123;    @Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)    private String pattern;    /**     * LocalDate 类型全局时间格式化     * @return     */    @Bean    public LocalDateTimeSerializer localDateTimeDeserializer() &#123;        return new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(pattern));    &#125;    @Bean    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilderCustomizer() &#123;        return builder -&gt; builder.serializerByType(LocalDateTime.class, localDateTimeDeserializer());    &#125;    @Override    public LocalDateTime deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException &#123;        return StrUtil.isEmpty(jsonParser.getText()) ? null : LocalDateTimeUtil.of(new DateTime(jsonParser.getText()));    &#125;&#125;</code></pre><pre><code class="java">@JsonComponent@Configurationpublic class DateFormatConfiguration extends JsonDeserializer&lt;Date&gt; &#123;    @Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)    private String pattern;    /**     * date 类型全局时间格式化     *     * @return     */    @Bean    public Jackson2ObjectMapperBuilderCustomizer jackson2ObjectMapperBuilder() &#123;        return builder -&gt; &#123;            TimeZone tz = TimeZone.getTimeZone(&quot;UTC&quot;);            DateFormat df = new SimpleDateFormat(pattern);            df.setTimeZone(tz);            builder.failOnEmptyBeans(false)                    .failOnUnknownProperties(false)                    .featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)                    .dateFormat(df);        &#125;;    &#125;    @Override    public Date deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException &#123;        return StrUtil.isEmpty(jsonParser.getText()) ? null : new DateTime(jsonParser.getText());    &#125;&#125;</code></pre><h3 id="2-2-2-自定义-objectMapper"><a href="#2-2-2-自定义-objectMapper" class="headerlink" title="2.2.2 自定义 objectMapper"></a>2.2.2 自定义 objectMapper</h3><pre><code class="java">package com.example.testjava.config;import cn.hutool.core.date.DatePattern;import cn.hutool.core.date.DateTime;import cn.hutool.core.date.LocalDateTimeUtil;import cn.hutool.core.util.StrUtil;import com.fasterxml.jackson.core.JacksonException;import com.fasterxml.jackson.core.JsonGenerator;import com.fasterxml.jackson.core.JsonParser;import com.fasterxml.jackson.databind.Module;import com.fasterxml.jackson.databind.*;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;import com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;import com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.autoconfigure.AutoConfigureBefore;import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.io.IOException;import java.sql.Time;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.LocalTime;import java.time.format.DateTimeFormatter;import java.util.Date;@Configuration@AutoConfigureBefore(JacksonAutoConfiguration.class)public class JacksonConfig &#123;    @Value(&quot;$&#123;spring.jackson.date-format:yyyy-MM-dd HH:mm:ss&#125;&quot;)    private String pattern;    @Bean    public ObjectMapper objectMapper() &#123;        ObjectMapper objectMapper = new ObjectMapper();        // 在反序列化时, 如果对象没有对应的字段, 不抛出异常        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);        objectMapper.registerModule(javaTimeModule());        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);        return objectMapper;    &#125;    private Module javaTimeModule() &#123;        JavaTimeModule module = new JavaTimeModule();        // 序列化        module.addSerializer(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern(pattern)));        module.addSerializer(new LocalTimeSerializer(DateTimeFormatter.ofPattern(DatePattern.NORM_TIME_PATTERN)));        module.addSerializer(new LocalDateSerializer(DateTimeFormatter.ofPattern(DatePattern.NORM_DATE_PATTERN)));        module.addSerializer(Date.class, new JsonSerializer&lt;&gt;() &#123;            @Override            public void serialize(Date date, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException &#123;                SimpleDateFormat sdf = new SimpleDateFormat(pattern);                jsonGenerator.writeString(sdf.format(date));            &#125;        &#125;);        module.addSerializer(java.sql.Date.class, new JsonSerializer&lt;&gt;() &#123;            @Override            public void serialize(java.sql.Date date, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException &#123;                SimpleDateFormat sdf = new SimpleDateFormat(pattern);                jsonGenerator.writeString(sdf.format(date));            &#125;        &#125;);        module.addSerializer(Timestamp.class, new JsonSerializer&lt;&gt;() &#123;            @Override            public void serialize(Timestamp timestamp, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException &#123;                SimpleDateFormat sdf = new SimpleDateFormat(pattern);                jsonGenerator.writeString(sdf.format(timestamp));            &#125;        &#125;);        module.addSerializer(Time.class, new JsonSerializer&lt;&gt;() &#123;            @Override            public void serialize(Time time, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException &#123;                SimpleDateFormat sdf = new SimpleDateFormat(DatePattern.NORM_TIME_PATTERN);                jsonGenerator.writeString(sdf.format(time));            &#125;        &#125;);        // 反序列化        module.addDeserializer(LocalDateTime.class, new JsonDeserializer&lt;LocalDateTime&gt;() &#123;            @Override            public LocalDateTime deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JacksonException &#123;                return StrUtil.isEmpty(jsonParser.getText()) ? null : LocalDateTimeUtil.of(new DateTime(jsonParser.getText()));            &#125;        &#125;);        module.addDeserializer(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(DatePattern.NORM_DATE_PATTERN)));        module.addDeserializer(LocalTime.class, new LocalTimeDeserializer(DateTimeFormatter.ofPattern(DatePattern.NORM_TIME_PATTERN)));        module.addDeserializer(Date.class, new JsonDeserializer&lt;Date&gt;() &#123;            @Override            public Date deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException &#123;                return StrUtil.isEmpty(jsonParser.getText()) ? null : new DateTime(jsonParser.getText());            &#125;        &#125;);        module.addDeserializer(java.sql.Date.class, new JsonDeserializer&lt;java.sql.Date&gt;() &#123;            @Override            public java.sql.Date deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException &#123;                return StrUtil.isEmpty(jsonParser.getText()) ? null : new java.sql.Date(new DateTime(jsonParser.getText()).getTime());            &#125;        &#125;);        module.addDeserializer(Timestamp.class, new JsonDeserializer&lt;Timestamp&gt;() &#123;            @Override            public Timestamp deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JacksonException &#123;                return StrUtil.isEmpty(jsonParser.getText()) ? null : new Timestamp(new DateTime(jsonParser.getText()).getTime());            &#125;        &#125;);        module.addDeserializer(Time.class, new JsonDeserializer&lt;Time&gt;() &#123;            @Override            public Time deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JacksonException &#123;                return StrUtil.isEmpty(jsonParser.getText()) ? null : Time.valueOf(jsonParser.getText());            &#125;        &#125;);        // 添加默认处理        return module;    &#125;&#125;</code></pre><p>效果可以返回正确的数据</p><pre><code class="json">&#123;    &quot;name&quot;: &quot;test&quot;,    &quot;date&quot;: &quot;2024-07-05 08:24:36&quot;,    &quot;localDate&quot;: &quot;2024-07-05&quot;,    &quot;localDateTime&quot;: &quot;2024-07-05 16:24:36&quot;,    &quot;localTime&quot;: &quot;16:24:36&quot;,    &quot;sqlDate&quot;: &quot;2024-07-05 00:00:00&quot;,    &quot;sqlTime&quot;: &quot;16:24:36&quot;,    &quot;timestamp&quot;: &quot;2024-07-05 08:24:36&quot;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年MacOS终端大比拼</title>
      <link href="/2024/06/23/macos-terminal/"/>
      <url>/2024/06/23/macos-terminal/</url>
      
        <content type="html"><![CDATA[<h2 id="最流行的终端"><a href="#最流行的终端" class="headerlink" title="最流行的终端"></a>最流行的终端</h2><h2 id="横评"><a href="#横评" class="headerlink" title="横评"></a>横评</h2><table><thead><tr><th>capability</th><th>Kitty</th><th>Alacritty</th><th>WezTerm</th><th>iTerm2</th><th>Native</th></tr></thead><tbody><tr><td>key-bind</td><td>✅</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td>vim-mode</td><td>❌</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>Cursor Trail</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>show-image</td><td>✅</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><h3 id="2024-12-31"><a href="#2024-12-31" class="headerlink" title="2024-12-31"></a>2024-12-31</h3><blockquote><p><code>WezTerm</code> -&gt; <code>Kitty</code></p></blockquote><ul><li>前一段时间发现通过 <code>Hammerspoon</code> 切换到 <code>Kitty</code> 后, 再切换到别的应用, 第一下按键经常失效, 是由于开启了 <code>Security Keyboard Entry</code>, 在左上角 kitty-&gt; <code>Security Keyboard Entry</code>, <a href="https://github.com/keycastr/keycastr/issues/304#issuecomment-2318142403">https://github.com/keycastr/keycastr/issues/304#issuecomment-2318142403</a></li></ul><h3 id="2024-11-17"><a href="#2024-11-17" class="headerlink" title="2024-11-17"></a>2024-11-17</h3><blockquote><p><code>Kitty</code> -&gt; <code>WezTerm</code></p></blockquote><ul><li>发现 <code>WezTerm</code> 的 <code>cmd+k</code> 不能用是因为写了一个测试出的绑定键导致的</li><li><code>Kitty</code> 快捷键经常失效</li></ul><h3 id="2024-10-31"><a href="#2024-10-31" class="headerlink" title="2024-10-31"></a>2024-10-31</h3><blockquote><p><code>WezTerm</code> -&gt; <code>Kitty</code></p></blockquote><ul><li><code>Kitty</code> support <a href="https://github.com/kovidgoyal/kitty/pull/7970">Add Cursor Trail Feature to Enhance Cursor Visibility</a></li><li>support <code>command-k</code> 用于绑定 <code>avante.nvim</code></li></ul><h3 id="2024-06-27"><a href="#2024-06-27" class="headerlink" title="2024-06-27"></a>2024-06-27</h3><blockquote><p><code>Kitty</code> -&gt; <code>WezTerm</code></p></blockquote><p><code>Kitty</code> 绑定 <code>cmd-shift-f</code> 在 tmux 下无法使用， 且没有 <code>vim-mode</code></p><h3 id="2024-06-26"><a href="#2024-06-26" class="headerlink" title="2024-06-26"></a>2024-06-26</h3><blockquote><p><code>Alacritty</code> -&gt; <code>Kitty</code></p></blockquote><p>因为在 <code>vim</code> 的 <code>normal</code> 模式下, 如果是中文输入法, 输入的内容会出现在输入法的候选框内, 然后按 <code>&lt;CAPS&gt;</code> 按键切换输入法, 候选框中的输入的字母, 会以 insert 的方式输出到光标所在的位置, 这个问题在 <code>WezTerm</code> 和 <code>Kitty</code> 中没有出现.</p><blockquote><p>注意: <code>Kitty</code> 的 <code>map cmd+1 send_key cmd+1</code> 能够正常映射到 <code>NeoVim</code> 中进行 <code>maps.n[&quot;&lt;D-1&gt;&quot;] = &#123; &quot;&lt;cmd&gt;Neotree left toggle&lt;cr&gt;&quot;, desc = &quot;Toggle Explorer&quot; &#125;</code> 绑定, 但是开启 tmux 后, <code>cmd+1</code> 映射到 <code>NeoVim</code> 中就不行了</p></blockquote><h3 id="2024-06-20"><a href="#2024-06-20" class="headerlink" title="2024-06-20"></a>2024-06-20</h3><blockquote><p><code>WezTerm</code> -&gt; <code>Alacritty</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> efficiency </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离线安装Home Assistant</title>
      <link href="/2024/03/22/home-assistant/"/>
      <url>/2024/03/22/home-assistant/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近搬到了新家，家里的智能设备也越来越多, 引入很多米家设备, 但博主使用的是苹果生态, 需要将这些不支持 <code>homekit</code> 的米家设备接入到 <code>homekit</code> 中, 经过调研发现 <code>Home Assistant</code> 是一个不错的选择, 本文会介绍联网安装的过程, 并且如果有需要联网的步骤, 也会提供<strong>离线安装</strong>的方法.</p><p>本篇主要介绍通过 <code>docker</code> 部署的方式</p><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>如已有 <code>docker</code> 环境, 可以跳过这一步</p><pre><code class="bash">sudo apt-get updatesudo </code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> IOT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> home-assistant </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s-内部培训</title>
      <link href="/2024/02/05/k8s-inner-training/"/>
      <url>/2024/02/05/k8s-inner-training/</url>
      
        <content type="html"><![CDATA[<h1 id="K8s-内部培训"><a href="#K8s-内部培训" class="headerlink" title="K8s 内部培训"></a>K8s 内部培训</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>K8s 为 Kubernetes 的简称, 是一个开源的<strong>容器编排</strong>平台, 最初是由 Google 工程师开发和设计的, 后于 2015 年捐赠给了<a href="https://www.cncf.io/">云原生计算机基金会-CNCF</a></p><h3 id="应用服务管理发展史"><a href="#应用服务管理发展史" class="headerlink" title="应用服务管理发展史"></a>应用服务管理发展史</h3><p>早期服务应用大多以单包的形式运行在服务器上, 当我们增加一些服务时, 比如添加 <code>JOB</code> 应用时, 我们会另开一个新的应用, 但基本用一台服务器上就能完成</p><p>所以我们早期应用的发展就如下面图表所示, 由于用户数量较少, 所以更新应用时短暂的暂停服务也是可以接受的</p><div style="display: none">┌──────────────**石器时代**───────────────┐     ┌──────────────**石器时代**───────────────┐     ┌──────────────**石器时代**───────────────┐│ ┌─────────────`Server1`───────────────┐ │     │ ┌─────────────`Server1`───────────────┐ │     │ ┌─────────────`Server1`───────────────┐ ││ │             ┌──☕──┐                │ │     │ │        ┌──☕──┐   ┌──☕──┐          │ │     │ │ ┌──☕──┐     ┌──☕──┐     ┌──☕──┐  │ ││ │             │ APP1 │                │ │     │ │        │ APP1 │   │ APP2 │          │ │     │ │ │ APP1 │     │ APP2 │     │ APP3 │  │ ││ │             └──────┘                │ │ ==> │ │        └──────┘   └──────┘          │ │ ==> │ │ └──────┘     └──────┘     └──────┘  │ ││ ├─────────────────────────────────────┤ │     │ ├─────────────────────────────────────┤ │     │ ├─────────────────────────────────────┤ ││ │ 安装: JDK8, Tomcat, 需要手动启动服务│ │     │ │ 安装: JDK8, Tomcat, 需要手动启动服务│ │     │ │ 安装: JDK8, Tomcat, 需要手动启动服务│ ││ └─────────────────────────────────────┘ │     │ └─────────────────────────────────────┘ │     │ └─────────────────────────────────────┘ │└─────────────────────────────────────────┘     └─────────────────────────────────────────┘     └─────────────────────────────────────────┘</div><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202402051408786.png"></p><p>随着用户数量的上升, 应用的并发也随之提高, 单台服务器的压力也随之增大, 有了如下情况:</p><ol><li>高峰期经常出现卡顿</li><li>更新应用时的暂停服务已经不可接受</li><li>在服务器出现故障时的高可用有了更高的要求</li></ol><p>为了解决上面的问题, 我们就进入了下个时代(下图一), 采购多台服务器, 对应用进行支持集群的改造, 这时我们的应用分别在三台服务器上, 并发能力提高了3倍, 并且冗灾能力大幅提升</p><p>尽管我们解决了上面的问题, 但是带来了新的问题, 因为服务器数量过多, 在安装应用需要的工具如 JDK、Tomcat、Node、Nginx、Redis 等等, 可能会因为安装版本和服务器系统版本不一致导致应用运行失败</p><p>所以会在环境安装中浪费太多时间, 所以很多企业开始引入如 <code>Docker</code> 的虚拟化技术(下图二), 用来解决环境不一致的问题, 并且一并解决了守护进程, 开机启动等问题</p><p>这时我们通过 <code>docker-compose</code> 技术, 升级应用、调整配置相比以前大大简化, 但是随着应用规模的扩大, 对应用高可用有了更高的要求, 纷纷开始进行微服务拆分, 应用数量和服务器数量越来越多, 服务的运维管理越来越复杂、</p><p>大家开始开发各种集群管理, 让大家可以在一个地方并且可视化的管理集群中的所有 <code>Docker</code>, 以 Google 开源的 Kubernetes 做的最功能完善且灵活可配置, 从而开始爆火.</p><p>于是众多企业开始上K8s(下图三), 不仅解决运维复杂的问题, 而且带来了更多更好的特性:</p><ol><li>服务发现和负载均衡</li><li>存储编排</li><li>自动部署和回滚</li><li>自我修复</li><li>密钥和配置管理</li></ol><div style="display: block">┌──────────────**农耕文明**───────────────┐     ┌─────────────────**工业文明**───────────────┐     ┌─────────────────**信息文明**───────────────┐│ ┌─────────────`Server1`───────────────┐ │     │ ┌────────────────`Server1`───────────────┐ │     │ ┌────────────────`K8s 集群`──────────────┐ ││ │ ┌──☕──┐     ┌──☕──┐     ┌──☕──┐  │ │     │ │ ┌─────🐳────┐┌─────🐳────┐┌─────🐳────┐│ │     │ │ ┌─────🐳────┐┌─────🐳────┐┌─────🐳────┐│ ││ │ │ APP1 │     │ APP2 │     │ APP3 │  │ │     │ │ │   APP1    ││   APP2    ││   APP3    ││ │     │ │ │   POD1    ││   POD2    ││   POD3    ││ ││ │ └──────┘     └──────┘     └──────┘  │ │     │ │ ├───────────┤├───────────┤├───────────┤│ │     │ │ ├───────────┤├───────────┤├───────────┤│ ││ ├─────────────────────────────────────┤ │     │ │ │JDK8/Tomcat││JDK8/Tomcat││JDK8/Tomcat││ │     │ │ │JDK8/Tomcat││JDK8/Tomcat││JDK8/Tomcat││ ││ │ 安装: JDK8, Tomcat, 需要手动启动服务│ │     │ │ └───────────┘└───────────┘└───────────┘│ │     │ │ └───────────┘└───────────┘└───────────┘│ ││ └─────────────────────────────────────┘ │     │ └────────────────────────────────────────┘ │     │ │ ┌─────🐳────┐┌─────🐳────┐┌─────🐳────┐│ ││ ┌─────────────`Server2`───────────────┐ │     │ ┌────────────────`Server1`───────────────┐ │     │ │ │   POD4    ││   POD5    ││   POD6    ││ ││ │ ┌──☕──┐     ┌──☕──┐     ┌──☕──┐  │ │     │ │ ┌─────🐳────┐┌─────🐳────┐┌─────🐳────┐│ │     │ │ ├───────────┤├───────────┤├───────────┤│ ││ │ │ APP1 │     │ APP2 │     │ APP3 │  │ │     │ │ │   APP1    ││   APP2    ││   APP3    ││ │     │ │ │JDK8/Tomcat││JDK8/Tomcat││JDK8/Tomcat││ ││ │ └──────┘     └──────┘     └──────┘  │ │ ==> │ │ ├───────────┤├───────────┤├───────────┤│ │ ==> │ │ └───────────┘└───────────┘└───────────┘│ ││ ├─────────────────────────────────────┤ │     │ │ │JDK8/Tomcat││JDK8/Tomcat││JDK8/Tomcat││ │     │ │ ┌─────🐳────┐┌─────🐳────┐┌─────🐳────┐│ ││ │ 安装: JDK8, Tomcat, 需要手动启动服务│ │     │ │ └───────────┘└───────────┘└───────────┘│ │     │ │ │   POD7    ││   POD8    ││   POD9    ││ ││ └─────────────────────────────────────┘ │     │ └────────────────────────────────────────┘ │     │ │ ├───────────┤├───────────┤├───────────┤│ ││ ┌─────────────`Server3`───────────────┐ │     │ ┌────────────────`Server1`───────────────┐ │     │ │ │JDK8/Tomcat││JDK8/Tomcat││JDK8/Tomcat││ ││ │ ┌──☕──┐     ┌──☕──┐     ┌──☕──┐  │ │     │ │ ┌─────🐳────┐┌─────🐳────┐┌─────🐳────┐│ │     │ │ └───────────┘└───────────┘└───────────┘│ ││ │ │ APP1 │     │ APP2 │     │ APP3 │  │ │     │ │ │   APP1    ││   APP2    ││   APP3    ││ │     │ ├────────────────────────────────────────┤ ││ │ └──────┘     └──────┘     └──────┘  │ │     │ │ ├───────────┤├───────────┤├───────────┤│ │     │ │  ┌───────┐ ┌───────┐ ┌───────┐         │ ││ ├─────────────────────────────────────┤ │     │ │ │JDK8/Tomcat││JDK8/Tomcat││JDK8/Tomcat││ │     │ │  │Server1│ │Server2│ │Server3│ •••     │ ││ │ 安装: JDK8, Tomcat, 需要手动启动服务│ │     │ │ └───────────┘└───────────┘└───────────┘│ │     │ │  └───────┘ └───────┘ └───────┘         │ ││ └─────────────────────────────────────┘ │     │ └────────────────────────────────────────┘ │     │ └────────────────────────────────────────┘ │├─────────────────────────────────────────┤     ├────────────────────────────────────────────┤     ├────────────────────────────────────────────┤│ 优点: 节省资源, 需要掌握的知识较少      │     │ 优点: 环境搭建容易, 安装Docker和配置文件   │     │ 优点: 自动故障恢复, 监控完善, 操作方便     ││ 缺点: 运维操作繁杂, JDK版本难以统一     │     │ 缺点: 随着规模扩大, 日常运维也变得繁杂     │     │ 缺点: k8s 功能较多, 需要掌握的知识也多     │└─────────────────────────────────────────┘     └────────────────────────────────────────────┘     └────────────────────────────────────────────┘                图一                                               图二                                                图三</div><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202402051410212.png"></p><h3 id="Kubernetes-组件"><a href="#Kubernetes-组件" class="headerlink" title="Kubernetes 组件"></a>Kubernetes 组件</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202402051554610.png" alt="Kubernetes 各组件"></p><ul><li><code>Control Plane Components</code>: 控制平面组件<ul><li><code>kube-apiserver</code>: 负责公开 Kubernetes API, 处理请求, 类似 cloud 中的网关</li><li><code>etcd</code>: key-value 存储, 用于保存集群数据</li><li><code>kube-scheduler</code>: 任务调度, 监听有新创建但未运行的pods, 选择节点来让 pod 在上面运行</li><li><code>kube-controller-manager</code>: 负责运行控制器进程, 有如下不同类型的控制器<ul><li><code>Node Controller</code>: 节点控制器, 负责节点出现故障时进行通知和响应</li><li><code>Job Controller</code>: 任务控制器, 检测代表一次性任务的 Job 对象, 然后创建 Pod 来运行这些任务直至完成</li><li><code>EndpointSlice Controller</code>: 端点分片控制器, 提供 Service 和 Pod 之间的链接</li><li><code>ServiceAccount Controller</code>: 为新的命名空间创建默认的服务账号</li></ul></li><li><code>cloud-controller-manager</code>: 云控制管理器, 集成云提供商的API, 我们内网部署的用不到</li></ul></li><li><code>Node Components</code>: 节点组件, 运行在各个节点, 负责维护运行的 Pod, 提供 Kubernetes 的运行环境<ul><li><code>kubelet</code>: 在每个节点中运行, 保证容器都运行在 Pod 中, kubelet 接受一组 PodSpec, 确保 PodSpec 中描述的容器处于运行状态且健康</li><li><code>kube-proxy</code>: 网络代理, 是实现 Service 的一部分</li><li><code>Container Runtime</code>: 容器运行时, Kubernetes 支持需要容器运行环境, 例如: docker, containerd, CRI-O</li></ul></li><li><code>Addons</code>: 插件, 提供集群级别的功能, 插件提供的资源属于 kube-system 命名空间<ul><li><code>DNS</code>: 提供集群内的域名系统</li><li><code>Web UI/Dashboard</code>: 通用的基于 Web 的用户界面, 它使用户可以集中管理集群中的应用已经集群本身</li><li><code>Container Resource Monitoring</code>: 将容器的一些常见的时间序列度量值保存到一个集中的数据库中, 并提供浏览这些数据的界面</li><li><code>Cluster-level Logging</code>: 集群级日志, 将容器日志保存到一个集中的日志存储中, 这种集中日志存储提供搜索和浏览接口</li><li><code>Network Plugins</code>: 网络插件, 实现容器网络接口(CNI)规范的软件组件, 负责为 Pod 分配 IP 地址, 并使这些 Pod 能在集群内部互相通信</li></ul></li></ul><h3 id="Kubernetes-架构"><a href="#Kubernetes-架构" class="headerlink" title="Kubernetes 架构"></a>Kubernetes 架构</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202402051553913.png"></p><h4 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node 节点"></a>Node 节点</h4><p>Kubernetes 通过将容器放入在节点(Node) 上运行的 Pod 来执行你的负载. 节点可以是一个虚拟机或物理机, 每个节点包含 Pod 所需的服务器, 这些节点由 <code>Control Plane</code> 负责管理</p><p>一个集群的节点数量可以是1个, 也可以是多个. 且节点名称是唯一的.</p><p>可以通过 <code>kubectl</code> 来创建和修改 Node 对象</p><pre><code class="bash"># 查一下集群中的所有节点信息kubectl get node# 查看某个节点详细信息kubectl descibe $NODENAME# 标记一个 Node 为不可调度kubectl cordon $NODENAME</code></pre><h4 id="Controllers-控制器"><a href="#Controllers-控制器" class="headerlink" title="Controllers 控制器"></a>Controllers 控制器</h4><p>在机器人和自动化领域, 又一个类似的概念叫控制回路 (Control Loop), 用于调节系统状态, 如: 房间里的温度自动调节器</p><p>当你设置了温度, 温度自动调节器让其当前状态接近期望温度; 在 Kubernetes 中, 控制器通过监控集群的公共状态, <strong>并致力于将当前的状态转为期望状态</strong></p><p>控制器是通过通知 <code>apiserver</code> 来管理状态的, 就像温度自动调节器是通过控制空调来调节气温的</p><h4 id="Container-Runtime-Interface-CRI-容器运行时接口"><a href="#Container-Runtime-Interface-CRI-容器运行时接口" class="headerlink" title="Container Runtime Interface&#x2F;CRI 容器运行时接口"></a>Container Runtime Interface&#x2F;CRI 容器运行时接口</h4><p>CRI 是一个插件接口, 它使 kubelet 能够使用各种容器运行时, 定义了主要 gRPC 协议, 用于节点组件 kubelet 和容器运行时之间的通信</p><h3 id="Containers-容器"><a href="#Containers-容器" class="headerlink" title="Containers 容器"></a>Containers 容器</h3><p><strong>容器</strong>将应用从底层主机设备中解耦, 这使得在不同的云或 OS 环境中部署更加容易</p><p>Kubernetes 集群中的每个节点都会运行容器, 这些容器构成分配给该节点的 Pod, 单个 Pod 中的容器会在共同调度下, 运行在相同的节点</p><p><strong>容器镜像</strong>是一个随时可以运行的软件包, 它包含了运行容器程序所需要的一切, 代码和它需要的运行时、应用程序和系统库, 以及一些基本设置</p><p><strong>容器运行时</strong>这个基础组件使 Kubernetes 能够有效运行容器, 他负责管理 Kubernetes 环境中的容器的执行和生命周期</p><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod 是可以在 Kubernetes 中创建和管理的、最小的可部署计算单元</p><p>Pod 是有一个或多个容器组成, 这些容器共享存储、网络、已经怎么样运行这些容器的声明, 统一调度.</p><p>此外还可以包含 init container, 用于做一些启动主应用前的准备工作, 比如通过 init container 注入 tingyun 等 agent 包</p><p>如下示例, 它由一个运行镜像 <code>nginx:1.14.2</code> 的容器组成</p><pre><code class="yaml">apiVersion: v1kind: Podmetadata:  name: nginx  labels:    app: my-nginxspec:  containers:  - name: nginx    image: nginx:1.14.2    ports:    - containerPort: 80</code></pre><p>要创建上面显示的 Pod, 保存上面内容到 <code>my-nginx.yaml</code>, 可以通过如下命令</p><pre><code class="bash">kubectl apply -f my-nginx.yaml</code></pre><h3 id="Workloads-工作负载"><a href="#Workloads-工作负载" class="headerlink" title="Workloads 工作负载"></a>Workloads 工作负载</h3><p>工作负载是在 Kubernetes 上运行的应用程序, 无论是又一个还是多个组件构成, 你都可以通过一组 Pod 来运行它, Pod 代表的是集群上处于运行状态的一组容器的集合, 但通常一个 Pod 内只运行一个容器</p><p>Kubernetes 提供若干种内置的工作负载资源:</p><ul><li><code>Deployment</code> 和 <code>ReplicaSet</code> Deployment 适合无状态应用, Deployment 中的所有 Pod 都是互相等价的</li><li><code>StatefulSet</code> 有状态应用, 比如可以独立持久化文件, 互不影响</li><li><code>DaemonSet</code> 提供节点本地支撑设施的 Pod, 保证每个节点上一个</li><li><code>Job</code> 和 <code>CronJob</code> 定义只需要执行一次并且执行后视为完完成的任务</li></ul><h3 id="Network-网络"><a href="#Network-网络" class="headerlink" title="Network 网络"></a>Network 网络</h3><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p><code>Service</code> 是将一个或者一组 Pod 公开代理给集群内部, 使之能够各个应用之间通信, 甚至用于公开到集群外(NodePort 或者 代理给 Ingress)</p><p>它提供了类似域名的访问方式, 使用者无需关心后面有多少个 Pod 在提供服务, 他们是否健康, 他们 IP 是否发生变化.</p><p>定义 Service</p><pre><code class="yaml">apiVersion: v1kind: Servicemetadata:  name: nginx-servicespec:  selector:    app: my-nginx  ports:  - name: name-of-service-port    protocol: TCP    port: 80    targetPort: http-web-svc</code></pre><p>服务类型(type):</p><ul><li><code>ClusterIp</code>: 默认值, 智能在集群内访问</li><li><code>NodePort</code>: 直接向集群外暴露, 通过节点端口访问</li><li><code>LoadBalancer</code>: 使用云平台的负载均衡, Kubernetes 不直接提供</li><li><code>Externalname</code>: 将服务映射到 externalName 字段的内容, 例如<code>api.foo.bar.example</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift 离线图片识别文字(ocr)</title>
      <link href="/2024/01/02/macos-ocr-swift/"/>
      <url>/2024/01/02/macos-ocr-swift/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近打算写一个 macos 翻译软件, 需要用到 ocr 图像识别, 并且因为速度问题, 一开始就考虑使用系统的自带能力来实现.</p><p>经过翻阅文档和 chatgpt 拉扯了一下午, 最终成功实现.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码逻辑为, 接受参数: 图片路径, 然后获取图片, 通过 <code>VNImageRequestHandler</code> 对图片进行文字识别</p><p>如下代码可以直接放进一个 <code>ocr.swift</code>, 然后执行 <code>swiftc -o ocr ocr.swift</code> , 在执行 <code>./ocr /Users/yelog/Desktop/3.png</code> 后面为你实际的有文字的图片路经</p><pre><code class="swift">////  ocr.swift//  Fast Translation////  Created by 杨玉杰 on 2023/12/31.//import SwiftUIimport Visionfunc handleDetectedText(request: VNRequest?, error: Error?) &#123;    if let error = error &#123;        print(&quot;ERROR: \(error)&quot;)        return    &#125;    guard let results = request?.results, results.count &gt; 0 else &#123;        print(&quot;No text found&quot;)        return    &#125;    for result in results &#123;        if let observation = result as? VNRecognizedTextObservation &#123;            for text in observation.topCandidates(1) &#123;                let string = text.string                print(&quot;识别: \(string)&quot;)            &#125;        &#125;    &#125;&#125;func ocrImage(path: String) &#123;    let cgImage = NSImage(byReferencingFile: path)?.ciImage()?.cgImage    let requestHandler = VNImageRequestHandler(cgImage: cgImage!)    let request = VNRecognizeTextRequest(completionHandler: handleDetectedText)    // 设置文本识别的语言为英文    request.recognitionLanguages = [&quot;en&quot;]    request.recognitionLevel = .accurate    do &#123;        try requestHandler.perform([request])    &#125; catch &#123;        print(&quot;Unable to perform the requests: \(error).&quot;)    &#125;&#125;extension NSImage &#123;    func ciImage() -&gt; CIImage? &#123;        guard let data = self.tiffRepresentation,              let bitmap = NSBitmapImageRep(data: data) else &#123;            return nil        &#125;        let ci = CIImage(bitmapImageRep: bitmap)        return ci    &#125;&#125;// 执行函数，从命令行参数中获取图片的地址ocrImage(path: CommandLine.arguments[1])</code></pre><p>然后准备待识别的有文字的图片</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202401021353013.png" alt="待识别的图片"> </p><pre><code class="bash"># 编译 swift 文件swiftc -o ocr ocr.swift# 执行并且传递图片路径参数./ocr /Users/yelog/Desktop/3.png</code></pre><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202401021354591.png" alt="执行识别效果"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最近打算着手写一些 macos 的小工具, 如果对 <code>swift</code> 或者 <code>macos</code> 感兴趣的可以关注或评论.</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
          <category> swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> macos </tag>
            
            <tag> ocr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caused by: java.lang.ClassNotFoundException: org.springframework.boot.loader.JarLauncher</title>
      <link href="/2023/12/11/springboot-jarlauncher/"/>
      <url>/2023/12/11/springboot-jarlauncher/</url>
      
        <content type="html"><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>今天同事再升级框架后(spring-cloud 2022.0.4 -&gt; 2023.0.0)(spring-boot 3.1.6 -&gt; 3.2.0)</p><p>同时因为 spring-boot 的版本问题, 需要将 maven 升级到 3.6.3+</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202312111837604.png" alt="maven version"></p><p>升级后构建 jar 包和构建镜像都是正常的, 但是发布到测试环境就报错 <code>Caused by: java.lang.ClassNotFoundException: org.springframework.boot.loader.JarLauncher</code></p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202312111851862.png" alt="error log"></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>报错为 JarLauncher 找不到, 检查了 <code>Jenkins</code> 中的打包任务, 发现并没有编译报错, 同事直接使用打包任务中产生的 xx.jar, 可以正常运行.</p><p>说明在打包 <code>Docker</code> 镜像前都没有问题, 这时就想起来我们在打包镜像时, 先解压 xx.jar, 然后直接执行 <code>org.springframework.boot.loader.JarLauncher</code>, 所以很可能是升级后, 启动文件 <code>JarLauncher</code> 的路径变了.</p><p>为了验证我们的猜想, 我们得看一下实际容器内的文件结构, 但是这时容器一直报错导致无法启动, 不能直接通过 <code>Rancher</code> 查看文件结构, 我们可以通过文件拷贝的方式来解决, 如下:</p><pre><code class="bash"># 下载有问题的镜像, 并且创建容器(不启动)docker create -it --name dumy 10.188.132.123:5000/lemes-cloud/lemes-gateway:develop-202312111536 bash# 直接拷贝容器内的我们想要看的目录docker cp dumy:/data .</code></pre><p>到本地后, 就可以通过合适的工具查找 <code>JarLauncher</code> 文件, 我这里通过 <code>vim</code> 来寻找, 如下图:</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202312111902709.png" alt="JarLauncher Path"></p><p>发现比原来多了一层目录 <code>launch</code>, 所以问题就发生在这里了.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们在打包脚本 <code>JenkinsCommon.groovy</code> 中根据当前打包的 JDK 版本来判断使用的启动类路径, 如下:</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/202312111905161.png" alt="Jenkins"></p><p>再次打包, 应用正常启动.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.5.15/api/org/springframework/boot/loader/JarLauncher.html">JarLauncher</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ideavim 使用百分号%支持xml的对应标签跳转</title>
      <link href="/2023/06/17/idea-tips-percent-mach-xml/"/>
      <url>/2023/06/17/idea-tips-percent-mach-xml/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于最近几年使用 vim 的频率越来越高, 所以在 idea 中也大量开始使用 vim 技巧, 在一年多前碰到个问题, 终于在最近解决了。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 idea 中, 在 normal 模式下, 使用 % 不能在匹配标签(xml&#x2F;html等) 之间跳转</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 <code>~/.ideavimrc</code> 中添加如下设置, 重启 idea 即可</p><pre><code class="bash">set matchit</code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu2023-06-17%2016.23.45.gif"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最近会把一些加的 tips 分享出来，大家有什么建议和问题都可以在评论区讨论.</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> efficiency </tag>
            
            <tag> vim </tag>
            
            <tag> IntellijIDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Raycast 最强效率软件推荐</title>
      <link href="/2023/05/17/mac-raycast/"/>
      <url>/2023/05/17/mac-raycast/</url>
      
        <content type="html"><![CDATA[<h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305171806865.png" alt="Raycast"></p><p>最近在很多平台上看到 Raycast 的推荐文章, 今天就尝试了一下, 发现确实不错, 完全可以替代我目前对 Alfred 的使用, 甚至很多地方做得更好, 所以本文就是介绍我使用 Raycast 的一些效果(多图预警)， 方便那些还没有接触这个软件的人对它有个了解, 如果有插件推荐, 欢迎在评论区进行讨论。</p><p>Raycast 是 MacMac 平台独占的效率工具, 主要包含如下功能:</p><ol><li>应用启动</li><li>文件查找</li><li>窗口管理</li><li>剪贴板历史</li><li>Snippets</li><li>应用菜单查询</li></ol><p>插件扩展功能</p><ol><li>翻译</li><li>斗图</li><li>结束进程</li><li>查询端口占用</li><li>查询ip</li></ol><p>除此之外, Raycast提供的在线插件商店, 可以很方便的进行功能扩展</p><p><a href="https://www.raycast.com/">Raycast官网</a></p><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="应用启动"><a href="#应用启动" class="headerlink" title="应用启动"></a>应用启动</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305172245860.png"></p><p>并且支持卸载应用, 找到应用, <code>cmd+k</code> 打开操作菜单, 下拉到最后<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305181223320.png"></p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305172249647.png"></p><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305172251703.png"></p><h3 id="剪贴板历史"><a href="#剪贴板历史" class="headerlink" title="剪贴板历史"></a>剪贴板历史</h3><p>推荐使用 <code>Clipboard History</code> 这个扩展，和 Alfred 的一样, 并且有分类，效果如下<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305181002644.png"></p><p>设置快捷键 <code>cmd+shift+v</code><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305181052831.png"></p><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>通过 Snippets 可以保存自定义片段, 通过关键字快速查询并输出到光标处, 如常用语、 邮箱、手机号、税号、代码片段等等<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305181108693.png"></p><p>创建 Snippets 可以通过搜索 <code>Create Snippet</code>, 搜索 Snippets 可以通过搜索<code>Search Snippet</code></p><h3 id="应用菜单查询"><a href="#应用菜单查询" class="headerlink" title="应用菜单查询"></a>应用菜单查询</h3><p>查询当前激活应用的所有菜单, 不限层级. 可以通过搜索 <code>Search Menu Items</code> 来查询。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305181231629.png"></p><h2 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h2><h3 id="Easydict-翻译软件"><a href="#Easydict-翻译软件" class="headerlink" title="Easydict(翻译软件)"></a>Easydict(翻译软件)</h3><p>超强的翻译软件， 完美替代我在 Alfred 的 workflow 中配置的有道翻译, 我配置了如下功能</p><ul><li>输入中文, 自动翻译成英文</li><li>输入英文, 自动翻译成中文</li><li>支持一键发音</li><li>Open AI 翻译长文本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305172258408.png"></p><h3 id="Doutu"><a href="#Doutu" class="headerlink" title="Doutu"></a>Doutu</h3><p>表情包查询，选中回车就复制到剪贴板了， 就可以粘贴到 Discord&#x2F;QQ&#x2F;Wechat 斗图了, 非常方便。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305172300474.png"></p><h3 id="Kill-Process"><a href="#Kill-Process" class="headerlink" title="Kill Process"></a>Kill Process</h3><p>关键字查询, 并一键结束进程<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305181119726.png"></p><h3 id="Kill-Port"><a href="#Kill-Port" class="headerlink" title="Kill Port"></a>Kill Port</h3><p>查询端口占用的进程, 并支持一键结束进程<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305181120514.png"></p><h3 id="MyIp"><a href="#MyIp" class="headerlink" title="MyIp"></a>MyIp</h3><p>查询当前ip<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu202305181230312.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> efficiency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[Java]通过 CompletableFuture 实现异步多线程优化请求处理速度</title>
      <link href="/2022/08/01/%5BJava%5Doptimize-request-processing-speed-by-completablefuture/"/>
      <url>/2022/08/01/%5BJava%5Doptimize-request-processing-speed-by-completablefuture/</url>
      
        <content type="html"><![CDATA[<h3 id="零、背景"><a href="#零、背景" class="headerlink" title="零、背景"></a>零、背景</h3><p>我们在写后端请求的时候, 可能涉及多次 SQL 执行(或其他操作), 当这些请求相互不关联, 在顺序执行时就浪费了时间, 这些不需要先后顺序的操作可以通过多线程进行同时执行, 来加速整个逻辑的执行速度.</p><p>既然有了目标和大致思路, 如果有做过前端的小伙伴应该能想起来 Js 里面有个 <code>Promise.all</code> 来解决这个问题, 在 Java 里也有类似功能的类 <code>CompletableFuture</code> , 它可以实现多线程和线程阻塞, 这样能够保证等待多个线程执行完成后再继续操作.</p><h3 id="一、CompletableFuture-是什么"><a href="#一、CompletableFuture-是什么" class="headerlink" title="一、CompletableFuture 是什么"></a>一、CompletableFuture 是什么</h3><p>首先我们先了解一下 <code>CompletableFuture</code> 是干什么, 接下来我们通过简单的示例来介绍他的作用.</p><pre><code class="java"> long startTime = System.currentTimeMillis();//生成几个任务List&lt;CompletableFuture&lt;String&gt;&gt; futureList = new ArrayList&lt;&gt;();futureList.add(CompletableFuture.supplyAsync(()-&gt;&#123;    sleep(4000);    System.out.println(&quot;任务1 完成&quot;);    return &quot;任务1的数据&quot;;&#125;));futureList.add(CompletableFuture.supplyAsync(()-&gt;&#123;    sleep(2000);    System.out.println(&quot;任务2 完成&quot;);    return &quot;任务2的数据&quot;;&#125;));futureList.add(CompletableFuture.supplyAsync(()-&gt;&#123;    sleep(3000);    System.out.println(&quot;任务3 完成&quot;);    return &quot;任务3的数据&quot;;&#125;));//完成任务CompletableFuture&lt;Void&gt; allTask = CompletableFuture.allOf(futureList.toArray(new CompletableFuture[0]))        .whenComplete((t, e) -&gt; &#123;            System.out.println(&quot;所有任务都完成了， 返回结果集: &quot;                    + futureList.stream().map(CompletableFuture::join).collect(Collectors.joining(&quot;,&quot;)));        &#125;);// 阻塞主线程allTask.join();System.out.println(&quot;main end, cost: &quot; + (System.currentTimeMillis() - startTime));</code></pre><p>执行结果</p><pre><code class="bash">任务2 完成任务3 完成任务1 完成所有任务都完成了， 返回结果集: 任务1的数据,任务2的数据,任务3的数据main end, cost: 4032</code></pre><blockquote><p><strong>结果分析:</strong> 我们需要执行3个任务, 3个任务同时执行, 互不影响</p></blockquote><ol><li>其中任务2耗时最短,提前打印完成</li><li>其次是任务3</li><li>最后是执行1完成</li><li>当所有任务完成后, 触发 <code>whenComplete</code> 方法, 打印任务的返回结果</li><li>最后打印总耗时为 4.032s</li><li>结论: 多线程执行后, 耗时取决于最耗时的操作, 而单线程是所有操作耗时之和</li></ol><h3 id="二、封装工具类"><a href="#二、封装工具类" class="headerlink" title="二、封装工具类"></a>二、封装工具类</h3><p>经过上面的测试, 通过 <code>CompletableFuture</code> 已经能够实现我们的预想, 为了操作方便, 我们将封装起来, 便于统一管理</p><pre><code class="java">package org.yelog.java.usage.concurrent;import java.util.ArrayList;import java.util.List;import java.util.concurrent.CompletableFuture;import java.util.function.Consumer;import java.util.function.Function;import java.util.function.Predicate;/** * 执行并发任务 * * @author yangyj13 * @date 11/7/22 9:49 PM */public class MultiTask&lt;T&gt; &#123;    private List&lt;CompletableFuture&lt;T&gt;&gt; futureList;    /**     * 添加待执行的任务     *     * @param completableFuture 任务     * @return 当前对象     */    public MultiTask&lt;T&gt; addTask(CompletableFuture&lt;T&gt; completableFuture) &#123;        if (futureList == null) &#123;            futureList = new ArrayList&lt;&gt;();        &#125;        futureList.add(completableFuture);        return this;    &#125;    /**     * 添加待执行的任务(无返回)     *     * @param task 任务     * @return 当前对象     */    public MultiTask&lt;T&gt; addTask(Consumer&lt;T&gt; task) &#123;        addTask(CompletableFuture.supplyAsync(() -&gt; &#123;            task.accept(null);            return null;        &#125;));        return this;    &#125;    /**     * 添加待执行的任务(有返回)     *     * @param task 任务     * @return 当前对象     */    public MultiTask&lt;T&gt; addTask(Function&lt;Object, T&gt; task) &#123;        addTask(CompletableFuture.supplyAsync(() -&gt; task.apply(null)));        return this;    &#125;    /**     * 开始执行任务     *     * @param callback                当所有任务都完成后触发的回调方法     * @param waitTaskExecuteComplete 是否阻塞主线程     */    private void execute(Consumer&lt;List&lt;T&gt;&gt; callback, Boolean waitTaskExecuteComplete) &#123;        CompletableFuture&lt;Void&gt; allFuture = CompletableFuture.allOf(futureList.toArray(new CompletableFuture[0]))                .whenComplete((t, e) -&gt; &#123;                    if (callback != null) &#123;                        List&lt;T&gt; objectList = new ArrayList&lt;&gt;();                        futureList.forEach((future) -&gt; &#123;                            objectList.add(future.join());                        &#125;);                        callback.accept(objectList);                    &#125;                &#125;);        if (callback != null || waitTaskExecuteComplete == null || waitTaskExecuteComplete) &#123;            allFuture.join();        &#125;    &#125;    /**     * 开始执行任务     * 等待所有任务完成（阻塞主线程）     */    public void execute() &#123;        execute(null, true);    &#125;    /**     * 开始执行任务     *     * @param waitTaskExecuteComplete 是否阻塞主线程     */    public void execute(Boolean waitTaskExecuteComplete) &#123;        execute(null, waitTaskExecuteComplete);    &#125;    /**     * 开始执行任务     *     * @param callback 当所有任务都完成后触发的回调方法     */    public void execute(Consumer&lt;List&lt;T&gt;&gt; callback) &#123;        execute(callback, true);    &#125;&#125;</code></pre><p>那么上一步我们测试的流程转换成工具类后如下</p><pre><code class="java">long startTime = System.currentTimeMillis();MultiTask&lt;String&gt; multiTask = new MultiTask&lt;&gt;();multiTask.addTask(t -&gt; &#123;    sleep(1000);    System.out.println(&quot;任务1 完成&quot;);&#125;).addTask(t -&gt; &#123;    sleep(3000);    System.out.println(&quot;任务2 完成&quot;);&#125;).addTask(CompletableFuture.supplyAsync(()-&gt;&#123;    sleep(2000);    System.out.println(&quot;任务3 完成&quot;);    return &quot;任务3的数据&quot;;&#125;)).execute(resultList-&gt;&#123;    System.out.println(&quot;all complete: &quot; + resultList);&#125;);System.out.println(&quot;main end, cost: &quot; + (System.currentTimeMillis() - startTime));</code></pre><h3 id="三、应用到实际的效果"><a href="#三、应用到实际的效果" class="headerlink" title="三、应用到实际的效果"></a>三、应用到实际的效果</h3><p>执行两次数据库的操作如下</p><pre><code class="java">public interface TestMapper &#123;    @Select(&quot;select count(*) from test_user where score &lt; 1000 and user_id = #&#123;userId&#125;&quot;)    int countScoreLess1000(Integer userId);    @Select(&quot;select count(1) from test_log where success = true and user_id = #&#123;userId&#125;&quot;)    int countSuccess(Integer userId);&#125;</code></pre><p>调用方法:</p><pre><code class="java">long start = System.currentTimeMillis();testMapper.countScoreLess1000(userId);long countScoreLess1000End = System.currentTimeMillis();log.info(&quot;countScoreLess1000 cost: &quot; + (countScoreLess1000End - start));testMapper.countSuccess(userId);long countSuccessEnd = System.currentTimeMillis();log.info(&quot;countSuccess cost: &quot; + (countSuccessEnd - countScoreLess1000End));log.info(&quot;all cost: &quot; + (countSuccessEnd - start));</code></pre><p>顺序执行的平均时间如下</p><pre><code class="bash">countScoreLess1000 cost: 368countSuccess cost: 404all cost: 772</code></pre><p>当我们应用的上面的工具类后的调用方法</p><pre><code class="java">MultiTask multiTask = new MultiTask&lt;&gt;();multiTask.addTask(t -&gt; &#123;    testMapper.countScoreLess1000(userId);    log.info(&quot;countScoreLess1000 cost: &quot; + (System.currentTimeMillis() - start));&#125;).addTask(t -&gt; &#123;    testMapper.countSuccess(userId);    log.info(&quot;countSuccess cost: &quot; + (System.currentTimeMillis() - start));&#125;).execute();log.info(&quot;all cost: &quot; + (System.currentTimeMillis() - start));</code></pre><p>效果如下</p><pre><code class="bash">countScoreLess1000 cost: 433countSuccess cost: 463all cost: 464</code></pre><p>可以看到各子任务执行时长是差不多的, 但是总耗时使用多线程后有了明显下降</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>通过使用 <code>CompletableFuture</code> 实现多线程阻塞执行后, 大幅降低这类请求, 并且当可以异步执行的子任务越多, 效果越明显.</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 nacos/灰度发布 实现减少本地启动微服务数量的实践</title>
      <link href="/2022/08/01/reducing-local-springcloud-base-on-nacos-and-gray-release/"/>
      <url>/2022/08/01/reducing-local-springcloud-base-on-nacos-and-gray-release/</url>
      
        <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>后台框架是基于 spring cloud 的微服务体系, 当开发同学在自己电脑上进行开发工作时, 比如开发订单模块, 除了需要启动订单模块外, 还需要启动网关模块、权限校验模块、公共服务模块等依赖模块, 非常消耗开发同学的本地电脑的资源, 也及其浪费时间.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20220801233224.png" alt="Spring Cloud"></p><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="2-1-目标和关键问题"><a href="#2-1-目标和关键问题" class="headerlink" title="2.1 目标和关键问题"></a>2.1 目标和关键问题</h3><p>能不能开发同学本地只需要启动需要开发的模块:订单模块, 其他模块均适用测试环境中正在运行的服务.</p><p>既然要实现的目标有了, 我们就开始研究可行性和关键问题</p><ol><li>开发环境和测试环境要在同一个 nacos 的 namespace 中, 这样才有可能让开发环境调用到测试环境的服务.</li><li>测试环境只能调用测试环境的微服务, 实现和开发环境的服务隔离</li><li>开发同学之间的微服务也要实现服务隔离</li></ol><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title="2.2 思路"></a>2.2 思路</h3><p>既要在同一个 namespace 下, 又要能够实现不同人访问不同的副本, 很容易想到可以利用<code>灰度发布</code>来实现:</p><ol><li>测试环境设置 metadata <code>lemes-env=product</code> 来标识测试环境副本, 用于区分开发环境的微服务测测试环境的微服务</li><li>开发同学本地启动注册开发环境副本, 都会携带唯一IP, 则我们可以通过IP来区分不同开发同学的副本</li></ol><p>假设我们需要开发的 API 的后台服务调用链条如下:</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20220802004250.png" alt="请求调用"></p><p>我们需要开发的 API 为 <code>/addMo</code>, 打算写在 <code>Order</code> 这个微服务里面, 并且他会调用 <code>common</code> 这个微服务的 <code>/getDict</code> 获取一个字典数据, <code>/getDict</code> 是现成的, 不需要开发, 如果是之前的情况, 开发本地至少需要启动5个微服务才能进行调试.</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20220802004109.png" alt="实现效果"></p><h2 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h2><h3 id="3-1-测试环境设置-metadata"><a href="#3-1-测试环境设置-metadata" class="headerlink" title="3.1 测试环境设置 metadata"></a>3.1 测试环境设置 metadata</h3><p>由于测试环境都是通过容器部署的, 那么启动方式就是下面容器中的 <code>CMD</code>, 我们在其中加入 <code>-Dspring.cloud.nacos.discovery.metadata.lemes-env=product</code>, 用于区分开发环境的微服务测测试环境的微服务</p><pre><code class="Dockerfile"># 说明：Dockerfile 过程分为两部分。第一次用来解压 jar 包，并不会在目标镜像内产生 history/layer。第二部分将解压内容分 layer 拷贝到目标镜像内# 目的：更新镜像时，只需要传输代码部分，依赖没有变动则不更新，节省发包时的网络传输量# 原理：在第二部分中，每次 copy 就会在目标镜像内产生一层 layer，将依赖和代码分开，#      绝大部分更新都不会动到依赖，所以只需更新代码几十k左右的代码层即可FROM 10.176.66.20:5000/library/amazoncorretto:11.0.11  as builderWORKDIR /buildARG ARTIFACT_IDCOPY target/$&#123;ARTIFACT_ID&#125;.jar app.jarRUN java -Djarmode=layertools -jar app.jar extract &amp;&amp; rm app.jarFROM 10.176.66.20:5000/library/amazoncorretto:11.0.11LABEL maintainer=&quot;yangyj13@lenovo.com&quot;WORKDIR /dataARG ARTIFACT_IDENV ARTIFACT_ID $&#123;ARTIFACT_ID&#125;# 依赖COPY --from=builder /build/dependencies/ ./COPY --from=builder /build/snapshot-dependencies/ ./COPY --from=builder /build/spring-boot-loader/ ./# 应用代码COPY --from=builder /build/application/ ./# 容器运行时启动命令CMD echo &quot;NACOS_ADDR: $&#123;NACOS_ADDR&#125;&quot;; \    echo &quot;JAVA_OPTS: $&#123;JAVA_OPTS&#125;&quot;; \    echo &quot;TZ: $&#123;TZ&#125;&quot;; \    echo &quot;ARTIFACT_ID: $&#123;ARTIFACT_ID&#125;&quot;; \    # 去除了 server 的应用名    REAL_APP_NAME=$&#123;ARTIFACT_ID//-server/&#125;; \    echo &quot;REAL_APP_NAME: $&#123;REAL_APP_NAME&#125;&quot;; \    # 获取当前时间    now=`date +%F+%T+%Z`; \    # java 启动命令    java $JAVA_OPTS \    -Dtingyun.app_name=$&#123;REAL_APP_NAME&#125;-$&#123;TINGYUN_SUFFIX&#125; \    -Dspring.cloud.nacos.discovery.metadata.lemes-env=product \    -Dspring.cloud.nacos.discovery.metadata.startup-time=$&#123;now&#125; \    -Dspring.cloud.nacos.discovery.server-addr=$&#123;NACOS_ADDR&#125; \    -Dspring.cloud.nacos.discovery.group=$&#123;NACOS_GROUP&#125; \    -Dspring.cloud.nacos.config.namespace=$&#123;NACOS_NAMESPACE&#125; \    -Dspring.cloud.nacos.discovery.namespace=$&#123;NACOS_NAMESPACE&#125; \    -Dspring.cloud.nacos.discovery.ip=$&#123;HOST_IP&#125; \    org.springframework.boot.loader.JarLauncher</code></pre><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20220802135945.png" alt="set nacos metadata"></p><h3 id="3-2-开发前端传递开启智能连接"><a href="#3-2-开发前端传递开启智能连接" class="headerlink" title="3.2 开发前端传递开启智能连接"></a>3.2 开发前端传递开启智能连接</h3><pre><code class="js">const devIp = getLocalIP(&#39;10.&#39;)module.exports = &#123;  devServer: &#123;    proxy: &#123;      &#39;/lemes-api&#39;: &#123;        target: &#39;http://10.176.66.58/lemes-api&#39;,        ws: true,        pathRewrite: &#123;          &#39;^/lemes-api&#39;: &#39;/&#39;        &#125;,        headers: &#123;          &#39;dev-ip&#39;: devIp,          &#39;dev-sc&#39;: &#39;true&#39;        &#125;      &#125;    &#125;  &#125;,&#125;// 获取本机 IPfunction getLocalIP(prefix) &#123;  const excludeNets = [&#39;docker&#39;, &#39;cni&#39;, &#39;flannel&#39;, &#39;vi&#39;, &#39;ve&#39;]  const os = require(&#39;os&#39;)  const osType = os.type() // 系统类型  const netInfo = os.networkInterfaces() // 网络信息  const ipList = []  if (prefix) &#123;    for (const netInfoKey in netInfo) &#123;      if (excludeNets.filter(item =&gt; netInfoKey.startsWith(item)).length === 0) &#123;        for (let i = 0; i &lt; netInfo[netInfoKey].length; i++) &#123;          const net = netInfo[netInfoKey][i]          if (net.family === &#39;IPv4&#39; &amp;&amp; net.address.startsWith(prefix)) &#123;            ipList.push(net.address)          &#125;        &#125;      &#125;    &#125;  &#125;  if (ipList.length === 0) &#123;    if (osType === &#39;Windows_NT&#39;) &#123;      for (const dev in netInfo) &#123;        // win7的网络信息中显示为本地连接，win10显示为以太网        if (dev === &#39;本地连接&#39; || dev === &#39;以太网&#39;) &#123;          for (let j = 0; j &lt; netInfo[dev].length; j++) &#123;            if (netInfo[dev][j].family === &#39;IPv4&#39;) &#123;              ipList.push(netInfo[dev][j].address)            &#125;          &#125;        &#125;      &#125;    &#125; else if (osType === &#39;Linux&#39;) &#123;      ipList.push(netInfo.eth0[0].address)    &#125; else if (osType === &#39;Darwin&#39;) &#123;      ipList.push(netInfo.en0[0].address)    &#125;  &#125;  console.log(&#39;识别到的网卡信息&#39;, JSON.stringify(ipList))  return ipList.length &gt; 0 ? ipList[0] : &#39;&#39;&#125;</code></pre><h3 id="3-3-后端灰度处理"><a href="#3-3-后端灰度处理" class="headerlink" title="3.3 后端灰度处理"></a>3.3 后端灰度处理</h3><p>不论是 <code>gateway</code> 还是 <code>openfeign</code> 都是通过 spring 的 <code>loadbalancer</code> 进行应用选择的, 那我们通过实现或者继承 <code>ReactorServiceInstanceLoadBalancer</code> 来重写选择的过程.</p><pre><code class="java">@Log4j2public class LemesLoadBalancer implements ReactorServiceInstanceLoadBalancer&#123;    @Autowired    private NacosDiscoveryProperties nacosDiscoveryProperties;    final AtomicInteger position;    // loadbalancer 提供的访问当前服务的名称    final String serviceId;    // loadbalancer 提供的访问的服务列表    ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider;    public LemesLoadBalancer(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider, String serviceId) &#123;        this(serviceInstanceListSupplierProvider, serviceId, new Random().nextInt(1000));    &#125;    public LemesLoadBalancer(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider,                             String serviceId, int seedPosition) &#123;        this.serviceId = serviceId;        this.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;        this.position = new AtomicInteger(seedPosition);    &#125;    @Override    public Mono&lt;Response&lt;ServiceInstance&gt;&gt; choose(Request request) &#123;        ServiceInstanceListSupplier supplier = serviceInstanceListSupplierProvider                .getIfAvailable(NoopServiceInstanceListSupplier::new);        RequestDataContext context = (RequestDataContext) request.getContext();        RequestData clientRequest = context.getClientRequest();        return supplier.get(request).next()                .map(serviceInstances -&gt; processInstanceResponse(clientRequest,supplier, serviceInstances));    &#125;    private Response&lt;ServiceInstance&gt; processInstanceResponse(RequestData clientRequest,ServiceInstanceListSupplier supplier,                                                              List&lt;ServiceInstance&gt; serviceInstances) &#123;        Response&lt;ServiceInstance&gt; serviceInstanceResponse = getInstanceResponse(clientRequest,serviceInstances);        if (supplier instanceof SelectedInstanceCallback &amp;&amp; serviceInstanceResponse.hasServer()) &#123;            ((SelectedInstanceCallback) supplier).selectedServiceInstance(serviceInstanceResponse.getServer());        &#125;        return serviceInstanceResponse;    &#125;    private Response&lt;ServiceInstance&gt; getInstanceResponse(RequestData clientRequest, List&lt;ServiceInstance&gt; instances) &#123;        if (instances.isEmpty()) &#123;            if (log.isWarnEnabled()) &#123;                log.warn(&quot;No servers available for service: &quot; + serviceId);            &#125;            return new EmptyResponse();        &#125;        int pos = Math.abs(this.position.incrementAndGet());        // 筛选后的服务列表        List&lt;ServiceInstance&gt; filteredInstances;        String devSmartConnect = clientRequest.getHeaders().getFirst(CommonConstants.DEV_SMART_CONNECT);        if (StrUtil.equals(devSmartConnect, &quot;true&quot;)) &#123;            String devIp = clientRequest.getHeaders().getFirst(CommonConstants.DEV_IP);            // devIp 为空，为异常情况不处理，返回空实例集合            if (StrUtil.isBlank(devIp)) &#123;                log.warn(&quot;devIp is NULL,No servers available for service: &quot; + serviceId);                return new EmptyResponse();            &#125;            // 智能连接: 如果本地启动了服务，则优先访问本地服务，如果本地没有启动，则访问测试环境服务            // 优先调用本地自有服务            filteredInstances = instances.stream().filter(item -&gt; StrUtil.equals(devIp, item.getHost())).collect(Collectors.toList());            // 如果本地服务没有开启，则调用生产/测试服务            if (CollUtil.isEmpty(filteredInstances)) &#123;                filteredInstances = instances.stream()                        .filter(item -&gt; StrUtil.equals(CommonConstants.LEMES_ENV_PRODUCT, item.getMetadata().get(&quot;lemes-env&quot;)))                        .collect(Collectors.toList());                // 解决开发环境无法访问 k8s 集群内 ip 的问题                String oneNacosIp = nacosDiscoveryProperties.getServerAddr().split(&quot;,&quot;)[0].replaceAll(&quot;:[\\s\\S]*&quot;, &quot;&quot;);                filteredInstances.forEach(item -&gt; &#123;                    NacosServiceInstance instance = (NacosServiceInstance) item;                    // cloud 以 80 端口启动，认为是 k8s 内的应用                    if (instance.getPort() == 80) &#123;                        instance.setHost(oneNacosIp);                        instance.setPort(Integer.parseInt(item.getMetadata().get(&quot;port&quot;)));                    &#125;                &#125;);            &#125;        &#125; else &#123;            // 不是智能访问，则只访问一个环境            // 当前服务 ip            String currentIp = nacosDiscoveryProperties.getIp();            String lemesEnv = nacosDiscoveryProperties.getMetadata().get(&quot;lemes-env&quot;);            filteredInstances = instances.stream()                    .filter(item -&gt; StrUtil.equals(lemesEnv, CommonConstants.LEMES_ENV_PRODUCT)                            // 访问测试环境                            ? StrUtil.equals(CommonConstants.LEMES_ENV_PRODUCT, item.getMetadata().get(&quot;lemes-env&quot;))                            // 访问开发环境                            : StrUtil.equals(currentIp, item.getHost()))                    .collect(Collectors.toList());        &#125;        if (filteredInstances.isEmpty()) &#123;            log.warn(&quot;No oneself servers and beta servers available for service: &quot; + serviceId + &quot;, use other instances&quot;);            // 找不到自己注册IP对应的服务和测试服务，则用nacos中其它的服务            filteredInstances = instances;        &#125;        //最终的返回的 serviceInstance        ServiceInstance instance = filteredInstances.get(pos % filteredInstances.size());        return new DefaultResponse(instance);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> k8s </tag>
            
            <tag> nacos </tag>
            
            <tag> springcloud </tag>
            
            <tag> gray-release </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 nacos/springcloud/k8s 的不停机服务更新[graceful shutdown]</title>
      <link href="/2022/07/27/springboot-graceful-shutdown-based-on-nacos2-and-k8s/"/>
      <url>/2022/07/27/springboot-graceful-shutdown-based-on-nacos2-and-k8s/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们的 SpringCloud 是部署在 k8s 上的, 当通过 k8s 进行滚动升级时, 会有请求 500 的情况, 不利于用户体验, 严重的可能造成数据错误的问题</p><blockquote><p>k8s 滚动更新策略介绍<br>假设我们要升级的微服务在环境上为3个副本的集群, 升级应用时, 会先启动1个新版本的副本, 然后下线一个旧版本的副本, 之后再启动1个新版本的副本, 一次类推,直到所有旧副本都替换新副本.</p></blockquote><p>通过链路追踪分析, 报错的原因分别由以下两种情况</p><ol><li>SpringCloud 中的微服务在升级过程中, 当旧的微服务中还有没有处理完成的请求时, 就开始关闭动作, 造成请求中断</li><li>当旧应用执行关闭动作时, 已经开始拒绝请求, 但是 nacos 中的路由并没有及时更新, 造成 gateway&#x2F;openfeign 在路由时仍会命中正在关闭的应用, 造成请求报错</li></ol><p>为了解决这个问题, 我们将利用 springboot 的 graceful shutdown 功能和 nacos 的主动下线功能来解决这个问题. 具体思路如下:</p><p>比如当我们执行订单微服务(3个副本)滚动更新时</p><ol><li>先启动一个新版本<code>副本4</code></li><li>然后准备关闭<code>副本1</code>, 在关闭之前先通知 nacos 订单服务的<code>副本1</code>下线, 然后由 nacos 通知给其他应用(nacos2.x 是grpc, 所以通知速度比较快), 这样, 订单服务的<code>副本1</code>就不会再接收到请求, 然后执行 graceful shutdown(springboot 原生支持, 启用方法可以看后面代码), 所有请求处理完成后关闭应用. 这样就完成了 <code>副本1</code> 的关闭</li><li>启动新版本<code>副本5</code></li><li>再优雅关闭<code>副本2</code>(参考第2点<code>副本1</code>的流程)</li><li>然后启动新版本<code>副本6</code></li><li>再优雅关闭<code>副本3</code></li><li>完成了服务不中断的应用升级</li></ol><h2 id="实现关键点"><a href="#实现关键点" class="headerlink" title="实现关键点"></a>实现关键点</h2><p>为了实现上面背景中提到的思路, 主要从如下几个方面入手</p><h3 id="创建从-nacos-中下线副本的API"><a href="#创建从-nacos-中下线副本的API" class="headerlink" title="创建从 nacos 中下线副本的API"></a>创建从 nacos 中下线副本的API</h3><p>我们通过创建自定义名为 <code>deregister</code> 的 <code>endpoint</code> 来通知 <code>nacos</code> 下线副</p><pre><code class="java">import com.alibaba.cloud.nacos.NacosDiscoveryProperties;import com.alibaba.cloud.nacos.registry.NacosRegistration;import com.alibaba.cloud.nacos.registry.NacosServiceRegistry;import lombok.extern.log4j.Log4j2;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.actuate.endpoint.annotation.Endpoint;import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;import org.springframework.stereotype.Component;@Component@Endpoint(id = &quot;deregister&quot;)@Log4j2public class LemesNacosServiceDeregisterEndpoint &#123;    @Autowired    private NacosDiscoveryProperties nacosDiscoveryProperties;    @Autowired    private NacosRegistration nacosRegistration;    @Autowired    private NacosServiceRegistry nacosServiceRegistry;    /**     * 从 nacos 中主动下线，用于 k8s 滚动更新时，提前下线分流流量     *     * @param     * @return com.lenovo.lemes.framework.core.util.ResultData&lt;java.lang.String&gt;     * @author Yujie Yang     * @date 4/6/22 2:57 PM     */    @ReadOperation    public String endpoint() &#123;        String serviceName = nacosDiscoveryProperties.getService();        String groupName = nacosDiscoveryProperties.getGroup();        String clusterName = nacosDiscoveryProperties.getClusterName();        String ip = nacosDiscoveryProperties.getIp();        int port = nacosDiscoveryProperties.getPort();        log.info(&quot;deregister from nacos, serviceName:&#123;&#125;, groupName:&#123;&#125;, clusterName:&#123;&#125;, ip:&#123;&#125;, port:&#123;&#125;&quot;, serviceName, groupName, clusterName, ip, port);        // 设置服务下线        nacosServiceRegistry.setStatus(nacosRegistration, &quot;DOWN&quot;);        return &quot;success&quot;;    &#125;&#125;</code></pre><h3 id="支持-Graceful-Shutdown"><a href="#支持-Graceful-Shutdown" class="headerlink" title="支持 Graceful Shutdown"></a>支持 Graceful Shutdown</h3><p>由于 springboot 原生支持, 我们只需要在 <code>bootstrap.yaml</code> 中添加如下配置即可</p><pre><code class="yaml">server:  # 开启优雅下线  shutdown: gracefulspring:  lifecycle:    # 优雅下线超时时间    timeout-per-shutdown-phase: 5m# 暴露 shutdown 接口management:  endpoint:    shutdown:      enabled: true  endpoints:    web:      exposure:        include: shutdown</code></pre><h3 id="K8s-配置"><a href="#K8s-配置" class="headerlink" title="K8s 配置"></a>K8s 配置</h3><p>有了上面两个 API, 接下来就配置到 k8s 上</p><ol><li>terminationGracePeriodSeconds 如果关闭应用的时间超过 10 分钟, 则向容器发送 TERM 信号, 防止应用长时间下线不了</li><li>preStop 先执行下线操作, 等待30s, 留够通知到其他应用的时间, 然后执行 graceful shutdown 关闭应用</li></ol><pre><code class="yaml">---apiVersion: apps/v1kind: Deploymentmetadata:  name: lemes-service-common  labels:    app: lemes-service-commonspec:  replicas: 2  selector:    matchLabels:      app: lemes-service-common#  strategy:#    type: RollingUpdate#    rollingUpdate:##     replicas - maxUnavailable &lt; running num  &lt; replicas + maxSurge#      maxUnavailable: 1#      maxSurge: 1  template:    metadata:      labels:        app: lemes-service-common    spec:#      容器重启策略 Never Always OnFailure#      restartPolicy: Never#     如果关闭时间超过10分钟， 则向容器发送 TERM 信号      terminationGracePeriodSeconds: 600      affinity:        podAntiAffinity:          preferredDuringSchedulingIgnoredDuringExecution:            - podAffinityTerm:                topologyKey: &quot;kubernetes.io/hostname&quot;                labelSelector:                  matchExpressions:                    - key: app                      operator: In                      values:                        - lemes-service-common              weight: 100#          requiredDuringSchedulingIgnoredDuringExecution:#            - labelSelector:#                matchExpressions:#                  - key: app#                    operator: In#                    values:#                      - lemes-service-common#              topologyKey: &quot;kubernetes.io/hostname&quot;      volumes:        - name: lemes-host-path          hostPath:            path: /data/logs            type: DirectoryOrCreate        - name: sidecar          emptyDir: &#123; &#125;      containers:        - name: lemes-service-common          image: 10.176.66.20:5000/lemes-cloud/lemes-service-common-server:v0.1          imagePullPolicy: Always          volumeMounts:            - name: lemes-host-path              mountPath: /data/logs            - name: sidecar              mountPath: /sidecar          ports:            - containerPort: 80          resources:#           资源通常情况下的占用            requests:              memory: &#39;2048Mi&#39;#           资源占用上限            limits:              memory: &#39;4096Mi&#39;          livenessProbe:            httpGet:              path: /actuator/health/liveness              port: 80            initialDelaySeconds: 5#           探针可以连续失败的次数            failureThreshold: 10#           探针超时时间            timeoutSeconds: 10#           多久执行一次探针查询            periodSeconds: 10          startupProbe:            httpGet:              path: /actuator/health/liveness              port: 80            failureThreshold: 30            timeoutSeconds: 10            periodSeconds: 10          readinessProbe:            httpGet:              path: /actuator/health/readiness              port: 80            initialDelaySeconds: 5            timeoutSeconds: 10            periodSeconds: 10          lifecycle:            preStop:              exec:#               应用关闭操作：1. 从 nacos 下线，2. 等待30s, 保证 nacos 通知到其他应用 2.触发 springboot 的 graceful shutdown                command:                  - sh                  - -c                  - curl http://127.0.0.1/actuator/deregister;sleep 30;curl -X POST http://127.0.0.1/actuator/shutdown;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> k8s </tag>
            
            <tag> nacos </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年我在使用这些vim插件</title>
      <link href="/2022/06/27/vim-plugs-2022/"/>
      <url>/2022/06/27/vim-plugs-2022/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从第一次接触 <code>vim</code> 已逾期 10 年, 期间大部分都是一些简单操作,<br>最近一两年开始深度使用 <code>vim</code>, 目前使用 <code>neovim</code> 版本.<br>本文将记录一些笔者觉得好用的一些 <code>Plugin</code>, 本文也将持续更新.</p><blockquote><p>注意: 笔者使用的插件管理器是 <a href="https://github.com/junegunn/vim-plug">vim-plug</a>,<br>所以以下示例都是基于 <code>vim-plug</code> 来写的.</p></blockquote><h2 id="Goto-Open"><a href="#Goto-Open" class="headerlink" title="Goto&#x2F;Open"></a>Goto&#x2F;Open</h2><h3 id="vim-open-url"><a href="#vim-open-url" class="headerlink" title="vim-open-url"></a>vim-open-url</h3><p><a href="https://github.com/dhruvasagar/vim-open-url">vim-open-url</a><br>可以用浏览器打开光标下的 url. </p><ul><li><code>gB</code> 用默认浏览器打开光标下的 url</li><li><code>g&lt;CR&gt;</code> 使用默认搜索引擎搜索光标下的单词</li><li><code>gG</code> 使用 Google 搜索光标下的单词</li><li><code>gW</code> 使用 Wikipedia 搜索光标下的单词</li></ul><pre><code class="vim">Plug &#39;dhruvasagar/vim-open-url&#39;</code></pre><h2 id="Auto-Complete"><a href="#Auto-Complete" class="headerlink" title="Auto Complete"></a>Auto Complete</h2><h3 id="neoclide-coc-nvim"><a href="#neoclide-coc-nvim" class="headerlink" title="neoclide&#x2F;coc.nvim"></a>neoclide&#x2F;coc.nvim</h3>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-drawer 实现鼠标拖拽宽度[ElementUI]</title>
      <link href="/2022/06/24/el-drawer-drag-width/"/>
      <url>/2022/06/24/el-drawer-drag-width/</url>
      
        <content type="html"><![CDATA[<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu2022-06-25%2010.12.32.gif" alt="el-drawer-drag-width"></p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>通过指令的方式, 在 <code>drawer</code> 的左侧边缘, 添加一个触发拖拽的长条形区域, 监听鼠标左键按下时启动 <code>document.onmousemove</code> 的监听, 监听鼠标距离浏览器右边的距离, 设置为 <code>drawer</code> 的宽度, 并添加约束: 不能小于浏览器宽度的 20%, 不能大于浏览器宽度的 80%.</p><h3 id="指令代码"><a href="#指令代码" class="headerlink" title="指令代码"></a>指令代码</h3><p>创建文件 <code>src/directive/elment-ui/drawer-drag-width.js</code>, 内容如下</p><pre><code class="js">import Vue from &#39;vue&#39;/** * el-drawer 拖拽指令 */Vue.directive(&#39;el-drawer-drag-width&#39;, &#123;  bind(el, binding, vnode, oldVnode) &#123;    const drawerEle = el.querySelector(&#39;.el-drawer&#39;)    console.log(drawerEle)    // 创建触发拖拽的元素    const dragItem = document.createElement(&#39;div&#39;)    // 将元素放置到抽屉的左边边缘    dragItem.style.cssText = &#39;height: 100%;width: 5px;cursor: w-resize;position: absolute;left: 0;&#39;    drawerEle.append(dragItem)    dragItem.onmousedown = (downEvent) =&gt; &#123;      // 拖拽时禁用文本选中      document.body.style.userSelect = &#39;none&#39;      document.onmousemove = function(moveEvent) &#123;        // 获取鼠标距离浏览器右边缘的距离        let realWidth = document.body.clientWidth - moveEvent.pageX        const width30 = document.body.clientWidth * 0.2        const width80 = document.body.clientWidth * 0.8        // 宽度不能大于浏览器宽度 80%，不能小于宽度的 20%        realWidth = realWidth &gt; width80 ? width80 : realWidth &lt; width30 ? width30 : realWidth        drawerEle.style.width = realWidth + &#39;px&#39;      &#125;      document.onmouseup = function(e) &#123;        // 拖拽时结束时，取消禁用文本选中        document.body.style.userSelect = &#39;initial&#39;        document.onmousemove = null        document.onmouseup = null      &#125;    &#125;  &#125;&#125;)</code></pre><p>然后在 <code>main.js</code> 中将其导入</p><pre><code class="js">import &#39;./directive/element-ui/drawer-drag-width&#39;</code></pre><h3 id="指令使用"><a href="#指令使用" class="headerlink" title="指令使用"></a>指令使用</h3><p>在 <code>el-drawer</code>  上添加指令 <code>v-el-drawer-drag-width</code> 即可, 如下</p><pre><code class="html">&lt;el-drawer  v-el-drawer-drag-width  :visible.sync=&quot;helpDrawer.show&quot;  direction=&quot;rtl&quot;  class=&quot;my-drawer&quot;&gt;  &lt;template #title&gt;    &lt;div class=&quot;draw-title&quot;&gt;&#123;&#123; helpDrawer.title &#125;&#125;&lt;/div&gt;  &lt;/template&gt;  &lt;Editor    v-model=&quot;helpDrawer.html&quot;    v-loading=&quot;helpDrawer.loading&quot;    class=&quot;my-wang-editor&quot;    style=&quot;overflow-y: auto;&quot;    :default-config=&quot;helpDrawer.editorConfig&quot;    :mode=&quot;helpDrawer.mode&quot;    @onCreated=&quot;onCreatedHelp&quot;  /&gt;&lt;/el-drawer&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElementUI </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud系列之接入SkyWalking进行链路追踪和日志收集</title>
      <link href="/2021/09/26/spring-cloud-skywalking/"/>
      <url>/2021/09/26/spring-cloud-skywalking/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一段时间一直在研究升级公司项目的架构，在不断学习和试错后，最终确定了一套基于 k8s 的高可用架构体系，未来几期会将这套架构体系的架设过程和注意事项以系列文章的形式分享出来，敬请期待！</p><p>由于集群和分布式规模的扩大，对微服务链路的监控和日志收集，越来越有必要性，所以在筛选了了一些方案后，发现 SkyWalking 完美符合我们的预期，对链路追踪和日志收集都有不错的实现。</p><h2 id="SkyWalking-简介"><a href="#SkyWalking-简介" class="headerlink" title="SkyWalking 简介"></a>SkyWalking 简介</h2><p>SkyWalking 是一款 APM（应用程序监控）系统，转为微服务、云原生、基于容器的架构而设计。主要包含了一下核心功能</p><ol><li>对服务、运行实例、API进行指标分析</li><li>链路检测，检查缓慢的服务和API</li><li>对基础设施（VM、网络、磁盘、数据库）进行监控</li><li>对超出阈值的情况进行警报</li><li>等等</li></ol><p>开源地址：<a href="https://github.com/apache/skywalking">apache&#x2F;skywalking</a></p><p>官网：<a href="https://skywalking.apache.org/">Apache SkyWalking</a></p><h2 id="SpringCloud-整合-SkyWalking"><a href="#SpringCloud-整合-SkyWalking" class="headerlink" title="SpringCloud 整合 SkyWalking"></a>SpringCloud 整合 SkyWalking</h2><h3 id="1-搭建-SkyWalking-服务"><a href="#1-搭建-SkyWalking-服务" class="headerlink" title="1. 搭建 SkyWalking 服务"></a>1. 搭建 SkyWalking 服务</h3><p>在使用 SkyWalking 进行链路追踪和日志收集之前，需要先搭建起一套 SkyWalking 的服务，然后才能通过 agent 将 SpringCloud 的运行状态和日志发送给 SkyWalking 进行解析和展示。</p><p>SkyWalking 的搭建方式有很多中，我这里介绍两种 docker-compose（非高可用，快速启动，方便测试、学习） 和 k8s（高可用、生产级别）</p><h4 id="docker-compose-的方式"><a href="#docker-compose-的方式" class="headerlink" title="docker-compose 的方式"></a>docker-compose 的方式</h4><p>docker 和 docker-compose 的安装不是本文的重点，所以有需要可以自行查询。</p><p>以下操作会启动三个容器</p><ol><li><code>elasticsearch</code> 作为 skywalking 的存储，保存链路和日志数据等</li><li><code>oap</code> 数据接收和分析 Observability Analysis Platform</li><li><code>ui</code> web端的数据展示</li></ol><pre><code class="bash"># 创建配置文件保存的目录mkdir -p /data/docker/admin/skywalking# 切换到刚创建的目录cd /data/docker/admin/skywalking# 将下面的 docker-compose.yml 文件保存到这个目录vi docker-compose.yml# 拉去镜像并启动docker-compose up -d# 查看日志docker-compose logs -f</code></pre><p>docker-compose.yml</p><pre><code class="yaml">version: &#39;3.8&#39;services:  elasticsearch:    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1    container_name: elasticsearch    restart: always    ports:      - 9200:9200    healthcheck:      test: [&quot;CMD-SHELL&quot;, &quot;curl --silent --fail localhost:9200/_cluster/health || exit 1&quot;]      interval: 30s      timeout: 10s      retries: 3      start_period: 40s    environment:      - discovery.type=single-node      - bootstrap.memory_lock=true      - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;      - TZ=Asia/Shanghai    ulimits:      memlock:        soft: -1        hard: -1  oap:    image: apache/skywalking-oap-server:8.7.0-es7    container_name: oap    depends_on:      - elasticsearch    links:      - elasticsearch    restart: always    ports:      - 11800:11800      - 12800:12800    healthcheck:      test: [&quot;CMD-SHELL&quot;, &quot;/skywalking/bin/swctl&quot;]      interval: 30s      timeout: 10s      retries: 3      start_period: 40s    environment:      TZ: Asia/Shanghai      SW_STORAGE: elasticsearch7      SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200  ui:    image: apache/skywalking-ui:8.7.0    container_name: ui    depends_on:      - oap    links:      - oap    restart: always    ports:      - 8088:8080    environment:      TZ: Asia/Shanghai      SW_OAP_ADDRESS: http://oap:12800</code></pre><p>启动之后浏览器访问 <code>服务ip:8080</code> 即可</p><h4 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h4><p>等待更新。。</p><h3 id="2-下载-agent-代理包"><a href="#2-下载-agent-代理包" class="headerlink" title="2. 下载 agent 代理包"></a>2. 下载 agent 代理包</h3><p>点击链接进行下载，<a href="https://archive.apache.org/dist/skywalking/8.7.0/apache-skywalking-apm-8.7.0.tar.gz">skywalking-apm-8.7</a></p><blockquote><p>其他版本可以看 <a href="https://archive.apache.org/dist/skywalking/">apache 归档站</a>，找到对应版本的 <code>.tar.gz</code> 后缀的包，进行下载</p></blockquote><p>通过命令或者软件进行解压 <code>tar -zxvf apache-skywalking-apm-8.7.0.tar.gz</code></p><h3 id="3-java-命令使用代码启动-jar-包"><a href="#3-java-命令使用代码启动-jar-包" class="headerlink" title="3. java 命令使用代码启动 jar 包"></a>3. java 命令使用代码启动 jar 包</h3><p>springcloud&#x2F;springboot 一般是通过 <code>java -jar xxx.jar</code> 进行启动。我们只需要在其中加上 <code>-javaagent</code> 参数即可，如下</p><p>其中 <strong>自定义服务名</strong> 可以改为应用名 如 <code>lemes-auth</code>，<strong>服务ip</strong> 为第一步搭建的 SkyWalking 服务的ip，<strong>端口11800</strong> 为启动的 oap 这个容器的端口</p><pre><code class="bash">java -javaagent:上一步解压目录/agent/skywalking-agent.jar=agent.service_name=自定义服务名,collector.backend_service=服务ip:11800 -jar xx.jar</code></pre><p>执行命令启动后，访问以下接口，就可以在第一步 <code>服务ip:8080</code> 中看到访问的链接和调用链路。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20210926164151.png" alt="链路追踪"><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20210926164350.png" alt="拓扑图"></p><h3 id="4-开启日志收集"><a href="#4-开启日志收集" class="headerlink" title="4. 开启日志收集"></a>4. 开启日志收集</h3><p>本文主要以 log4j2 来介绍，其他的大同小异，可以网上找教程。SpringCloud 集成 log4j2 不是本文重点，所以请自行 Google。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>要开启日志收集，必须要添加依赖，如下</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.apache.skywalking&lt;/groupId&gt;    &lt;artifactId&gt;apm-toolkit-log4j-2.x&lt;/artifactId&gt;    &lt;version&gt;8.7.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="修改-log4j2-xml"><a href="#修改-log4j2-xml" class="headerlink" title="修改 log4j2.xml"></a>修改 log4j2.xml</h4><p>需要修改 log4j2.xml 主要添加下面两个关键点</p><ul><li>添加 <code>%traceId</code> 来打印 traceid</li><li>声明 GRPCLogClientAppender</li></ul><p>完整内容如下</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，     你会看到log4j2内部各种详细输出。可以设置成OFF(关闭) 或 Error(只输出错误信息)。--&gt;&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;&lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot;&gt;    &lt;Properties&gt;        &lt;Property name=&quot;log.path&quot;&gt;logs/lemes-auth&lt;/Property&gt;        &lt;Property name=&quot;logging.lemes.pattern&quot;&gt;            %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] [%traceId] [%logger&#123;50&#125;.%M:%L] - %msg%n        &lt;/Property&gt;    &lt;/Properties&gt;    &lt;Appenders&gt;        &lt;!-- 输出控制台日志的配置 --&gt;        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;            &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;            &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;            &lt;!-- 输出日志的格式 --&gt;            &lt;PatternLayout pattern=&quot;$&#123;logging.lemes.pattern&#125;&quot;/&gt;        &lt;/Console&gt;        &lt;RollingRandomAccessFile name=&quot;debugRollingFile&quot; fileName=&quot;$&#123;log.path&#125;/debug.log&quot;                                 filePattern=&quot;$&#123;log.path&#125;/debug/$$&#123;date:yyyy-MM&#125;/debug.%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;&gt;            &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt;            &lt;PatternLayout charset=&quot;UTF-8&quot; pattern=&quot;$&#123;logging.lemes.pattern&#125;&quot;/&gt;            &lt;Policies&gt;                &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;/&gt;                &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt;            &lt;/Policies&gt;            &lt;DefaultRolloverStrategy max=&quot;30&quot;/&gt;        &lt;/RollingRandomAccessFile&gt;        &lt;GRPCLogClientAppender name=&quot;grpc-log&quot;&gt;            &lt;PatternLayout pattern=&quot;$&#123;logging.lemes.pattern&#125;&quot;/&gt;        &lt;/GRPCLogClientAppender&gt;    &lt;/Appenders&gt;    &lt;Loggers&gt;        &lt;!-- ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF --&gt;        &lt;Logger name=&quot;com.lenovo.lemes&quot; level=&quot;debug&quot;/&gt;        &lt;Logger name=&quot;org.apache.kafka&quot; level=&quot;warn&quot;/&gt;        &lt;Root level=&quot;info&quot;&gt;            &lt;AppenderRef ref=&quot;Console&quot;/&gt;            &lt;AppenderRef ref=&quot;debugRollingFile&quot;/&gt;            &lt;AppenderRef ref=&quot;grpc-log&quot;/&gt;        &lt;/Root&gt;    &lt;/Loggers&gt;&lt;/configuration&gt;</code></pre><h4 id="启动命令中声明上报日志"><a href="#启动命令中声明上报日志" class="headerlink" title="启动命令中声明上报日志"></a>启动命令中声明上报日志</h4><p>在上一步的 agent 中添加上报日志的参数 <code>plugin.toolkit.log.grpc.reporter.server_host=服务ip,plugin.toolkit.log.grpc.reporter.server_port=11800</code></p><p>完整如下</p><pre><code class="bash">java -javaagent:上一步解压目录/agent/skywalking-agent.jar=agent.service_name=自定义服务名,collector.backend_service=服务ip:11800,plugin.toolkit.log.grpc.reporter.server_host=服务ip,plugin.toolkit.log.grpc.reporter.server_port=11800 -jar xx.jar</code></pre><h4 id="日志收集效果"><a href="#日志收集效果" class="headerlink" title="日志收集效果"></a>日志收集效果</h4><p>这样启动日志中就会打印 traceid , <code>N/A</code> 代表的是非请求的日志，有 traceid 的为 api 请求日志</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20210926170409.png" alt="traceid"></p><p>在 skywalking 中就能看到我们上报的日志</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20210926170953.png" alt="skywalking 日志上报"></p><p>重点：SkyWalking 可以在链路追踪中查看当前请求的所有日志（不同实例&#x2F;模块）</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20210926171217.png" alt="SkyWalking 链路日志"></p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20210926171256.png" alt="SkyWalking 链路日志"></p><h3 id="5-兼容-spring-cloud-gateway"><a href="#5-兼容-spring-cloud-gateway" class="headerlink" title="5. 兼容 spring-cloud-gateway"></a>5. 兼容 spring-cloud-gateway</h3><p>经过上面的步骤之后，链路已经搭建完成，查看发现了一个问题，gateway 模块的 <code>traceId</code> 和 业务模块的 <code>traceId</code> 不统一。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20210926164350.png" alt="拓扑图"></p><p>这是由于 SkyWalking 对于 <code>spring-cloud-gateway</code> 的支持不是默认的，所以需要将 <code>agent/optional-plugins/apm-spring-cloud-gateway-2.1.x-plugin-8.7.0.jar</code> 复制到 <code>agent/plugins</code> 下，然后重启即可。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20210926180619.png" alt="优化过 gateway 的拓扑图"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>SkyWalking 上面这两个功能就已经非常强大，能够有效帮助我们优化我们的程序，监控系统的问题，并及时报警。日志收集也解决的在大规模分布式集群下日志查询难的问题。</p><p>SkyWalking 还支持 VM、浏览器、k8s等监控，后续如果有实践，将会逐步更新。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> SkyWalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yabai</title>
      <link href="/2021/07/01/mac-yabai/"/>
      <url>/2021/07/01/mac-yabai/</url>
      
        <content type="html"><![CDATA[<h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><pre><code class="bash">brew services restart skhdbrew services restart yabaibrew services restart spacebarsudo yabai --load-sa</code></pre><h2 id="快捷键规划"><a href="#快捷键规划" class="headerlink" title="快捷键规划"></a>快捷键规划</h2><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">alt - h</td><td align="left">focus west window</td></tr><tr><td align="left">alt - j</td><td align="left">focus south window</td></tr><tr><td align="left">alt - k</td><td align="left">focus north window</td></tr><tr><td align="left">alt - l</td><td align="left">focus east window</td></tr></tbody></table><h3 id="desktop"><a href="#desktop" class="headerlink" title="desktop"></a>desktop</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">alt - 1</td><td align="left">focus desktop 1</td></tr><tr><td align="left">alt - n</td><td align="left">focus next desktop</td></tr><tr><td align="left">alt - p</td><td align="left">focus previous desktop</td></tr><tr><td align="left">ctrl - alt - 1</td><td align="left">move window to desktop 1</td></tr><tr><td align="left">ctrl - alt - n</td><td align="left">move window to next desktop</td></tr><tr><td align="left">ctrl - alt - p</td><td align="left">move window to previous desktop</td></tr></tbody></table><h3 id="create-quit"><a href="#create-quit" class="headerlink" title="create&#x2F;quit"></a>create&#x2F;quit</h3><table><thead><tr><th align="left">快捷键</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">alt - w</td><td align="left">close current window, and focus left window</td></tr><tr><td align="left">alt - q</td><td align="left">close current desktop, and focus recent desktop</td></tr><tr><td align="left">alt - c</td><td align="left">create desktop</td></tr><tr><td align="left">alt - ctrl - c</td><td align="left">create desktop and move current window to the new desktop</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> window-manager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo添加自定义图标</title>
      <link href="/2020/12/28/3-hexo-add-icon/"/>
      <url>/2020/12/28/3-hexo-add-icon/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>鉴于许多人问过如何添加自定义图标，这里就详细说明一下，以备后人乘凉。</p><p>这篇文章主要讲解是从 <a href="https://www.iconfont.cn/">iconfont</a> 添加图标。</p><h2 id="二、添加彩色图标"><a href="#二、添加彩色图标" class="headerlink" title="二、添加彩色图标"></a>二、添加彩色图标</h2><h3 id="2-1-登录并添加图标"><a href="#2-1-登录并添加图标" class="headerlink" title="2.1 登录并添加图标"></a>2.1 登录并添加图标</h3><p>访问 <a href="https://www.iconfont.cn/">iconfont</a>，点击如下图位置登录，可以使用 <code>Github</code> 账号登录。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20201228230707.png" alt="iconfont 登录"></p><p>登录成功后，搜索合适的图标，然后点击添加到购物车，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20201228231118.png"></p><p>添加了多个后，可以点击右上角的“购物车”，添加到项目，点击加号创建项目，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20201228231558.png"></p><p>添加完成后回到项目页面，找到自己刚刚创建的项目。</p><blockquote><p>如果没有到项目页面，可以点击上面菜单进入：资源管理 -&gt; 我的项目</p></blockquote><h3 id="2-2-引入-3-hexo-中"><a href="#2-2-引入-3-hexo-中" class="headerlink" title="2.2 引入 3-hexo 中"></a>2.2 引入 3-hexo 中</h3><p>点击下载到本地，解压并复制其中的 <code>iconfont.js</code> 到项目 <code>3-hexo/source/js/</code> 下，并改名 <code>custom-iconfont.js</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20201229003210.png"></p><p>在文件 <code>3-hexo/layout/_partial/meta.ejs</code> 最后追加下面一行。</p><pre><code class="html">&lt;script src=&quot;&lt;%=theme.blog_path?theme.blog_path.lastIndexOf(&quot;/&quot;) === theme.blog_path.length-1?theme.blog_path.slice(0, theme.blog_path.length-1):theme.blog_path:&#39;&#39; %&gt;/js/custom-iconfont.js?v=&lt;%=theme.version%&gt;&quot; &gt;&lt;/script&gt;</code></pre><h3 id="2-3-在配置文件中添加生效"><a href="#2-3-在配置文件中添加生效" class="headerlink" title="2.3 在配置文件中添加生效"></a>2.3 在配置文件中添加生效</h3><p>修改 <code>3-hexo/_config.yml</code> 如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20201229001129.png"></p><p>完成！</p><blockquote><p>图标名如上面的 <code>gitee</code> 可以在 网站上修改，如下图所示<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20201229002057.png"></p></blockquote><h2 id="三、添加黑白图标"><a href="#三、添加黑白图标" class="headerlink" title="三、添加黑白图标"></a>三、添加黑白图标</h2><p><code>link.theme=white</code></p><h3 id="3-1-同-2-1"><a href="#3-1-同-2-1" class="headerlink" title="3.1 同 2.1"></a>3.1 同 2.1</h3><h3 id="3-2-引入-3-hexo-中"><a href="#3-2-引入-3-hexo-中" class="headerlink" title="3.2 引入 3-hexo 中"></a>3.2 引入 3-hexo 中</h3><p>点击生成代码，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniu20201228231715.png"></p><p>复制生成的代码，修改 <code>font-family</code> 的值为 <code>custom-iconfont</code>，添加到 <code>3-hexo/source/css/_partial/font.styl</code> 最后，并写入图标信息，<code>content</code> 可以移到图标上进行复制，注意前面斜杠转译和去掉后面的分号。</p><pre><code class="css">@font-face &#123;  font-family: &#39;custom-iconfont&#39;;  /* project id 2298064 */  src: url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.eot&#39;);  src: url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;),  url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.woff2&#39;) format(&#39;woff2&#39;),  url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.woff&#39;) format(&#39;woff&#39;),  url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.ttf&#39;) format(&#39;truetype&#39;),  url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.svg#iconfont&#39;) format(&#39;svg&#39;);&#125;.icon-gitee:before &#123;  content: &quot;\e602&quot;;&#125;.icon-youtubeautored:before &#123;  content: &quot;\e649&quot;;&#125;</code></pre><h3 id="3-3-在配置文件中添加生效-同2-2"><a href="#3-3-在配置文件中添加生效-同2-2" class="headerlink" title="3.3 在配置文件中添加生效 同2.2"></a>3.3 在配置文件中添加生效 同2.2</h3><p>结束！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文看懂JavaScript中的Promise</title>
      <link href="/2020/10/20/know-javascript-promise/"/>
      <url>/2020/10/20/know-javascript-promise/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Promise-是什么"><a href="#一、Promise-是什么" class="headerlink" title="一、Promise 是什么"></a>一、Promise 是什么</h2><p><code>Promise</code> 是 <code>ES6</code> 提供的原生对象，用来处理异步操作</p><p>它有三种状态</p><ul><li><code>pending</code>: 初始状态，不是成功或失败状态。</li><li><code>fulfilled</code>: 意味着操作成功完成。</li><li><code>rejected</code>: 意味着操作失败。</li></ul><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="2-1-创建-Promise"><a href="#2-1-创建-Promise" class="headerlink" title="2.1 创建 Promise"></a>2.1 创建 Promise</h3><p>通过 <code>new Promise</code> 来实例化，支持链式调用</p><pre><code class="javascript">new Promise((resolve, reject)=&gt;&#123;  // 逻辑&#125;).then(()=&gt;&#123;  //当上面&quot;逻辑&quot;中调用 resolve() 时触发此方法&#125;).catch(()=&gt;&#123;  //当上面&quot;逻辑&quot;中调用 reject() 时触发此方法&#125;)</code></pre><h3 id="2-2-执行顺序"><a href="#2-2-执行顺序" class="headerlink" title="2.2 执行顺序"></a>2.2 执行顺序</h3><p><code>Promise</code>一旦创建就立即执行，并且无法中途取消，执行逻辑和顺序可以从下面的示例中获得</p><p>如下，可修改 <code>if</code> 条件来改变异步结果，下面打印开始的数字是执行顺序</p><p><a href="https://jsbin.com/cijuwakeha/1/edit?js,console">在线调试此示例 - jsbin</a></p><pre><code class="javascript">console.log(&#39;1.开始创建并执行 Promise&#39;)new Promise(function(resolve, reject) &#123;  console.log(&#39;2.由于创建会立即执行，所以会立即执行到本行&#39;)  setTimeout(()=&gt;&#123; // 模拟异步请求    console.log(&#39;4. 1s之期已到，开始执行异步操作&#39;)    if (true) &#123;        // 一般我们符合预期的结果时调用 resolve()，会在 .then 中继续执行        resolve(&#39;成功&#39;)    &#125; else &#123;        // 不符合预期时调用 reject()，会在 .catch 中继续执行        reject(&#39;不符合预期&#39;)    &#125;  &#125;, 1000)&#125;).then((res)=&gt;&#123;  console.log(&#39;5.调用了then，接收数据：&#39; + res)&#125;).catch((error)=&gt;&#123;  console.log(&#39;5.调用了catch，错误信息：&#39; + error)&#125;)console.log(&#39;3.本行为同步操作，所以先于 Promise 内的异步操作（setTimeout）&#39;)</code></pre><p>执行结果如下</p><pre><code class="javascript">&quot;1.开始创建并执行 Promise&quot;&quot;2.由于创建会立即执行，所以会立即执行到本行&quot;&quot;3.本行为同步操作，所以先于 Promise 内的异步操作（setTimeout）&quot;&quot;4. 1s之期已到，开始执行异步操作&quot;&quot;5.调用了then，接收数据：成功&quot;</code></pre><h3 id="2-3-用函数封装-Promise"><a href="#2-3-用函数封装-Promise" class="headerlink" title="2.3 用函数封装 Promise"></a>2.3 用函数封装 Promise</h3><p>这是比较常用的方法，如下用 <code>setTimeout</code> 模拟异步请求，封装通用请求函数</p><p><a href="https://jsbin.com/figuhohoki/1/edit?js,console">在线调试此示例 - jsbin</a></p><pre><code class="javascript">// 这是一个异步方法function ajax(url)&#123;  return new Promise(resolve=&gt;&#123;    console.log(&#39;异步方法开始执行&#39;)    setTimeout(()=&gt;&#123;      console.log(&#39;异步方法执行完成&#39;)      resolve(url+&#39;的结果集&#39;)    &#125;, 1000)  &#125;)&#125;// 调用请求函数，并接受处理返回结果ajax(&#39;/user/list&#39;).then((res)=&gt;&#123;  console.log(res)&#125;)</code></pre><p>执行结果</p><pre><code class="javascript">&quot;异步方法开始执行&quot;&quot;异步方法执行完成&quot;&quot;/user/list的结果集&quot;</code></pre><h2 id="三、高级用法"><a href="#三、高级用法" class="headerlink" title="三、高级用法"></a>三、高级用法</h2><h3 id="3-1-同时支持Callback与Promise"><a href="#3-1-同时支持Callback与Promise" class="headerlink" title="3.1 同时支持Callback与Promise"></a>3.1 同时支持Callback与Promise</h3><p><a href="https://jsbin.com/qitewirina/1/edit?js,console">在线调试此示例 - jsbin</a></p><pre><code class="javascript">function ajax(url, success, fail) &#123;  if (typeof success === &#39;function&#39;) &#123;    setTimeout(() =&gt; &#123;      if (true) &#123;        success(&#123;user: &#39;羊&#39;&#125;)      &#125; else if (typeof fail === &#39;function&#39;) &#123;        console.log(typeof fail)        fail(&#39;用户不存在&#39;)      &#125;    &#125;, 1000)  &#125; else &#123;    return new Promise((resolve, reject) =&gt; &#123;      this.ajax(url, resolve, reject)    &#125;)  &#125;&#125;// callback 调用方式ajax(&#39;/user/get&#39;, (res)=&gt;&#123;  console.log(&#39;Callback请求成功！返回结果:&#39;, res)&#125;, (error)=&gt;&#123;  console.log(&#39;Callback请求失败！错误信息:&#39;, error)&#125;)// Promise 调用方式ajax(&#39;/user/get&#39;).then((res)=&gt;&#123;  console.log(&#39;Pormise请求成功！返回结果：&#39;, res)&#125;).catch((error)=&gt;&#123;  console.log(&#39;Promise请求失败！返回结果：&#39;, error)&#125;)</code></pre><p>执行结果</p><pre><code class="javascript">Callback请求成功！返回结果: &#123;user: &quot;羊&quot;&#125;Pormise请求成功！返回结果： &#123;user: &quot;羊&quot;&#125;</code></pre><h3 id="3-2-链式调用"><a href="#3-2-链式调用" class="headerlink" title="3.2 链式调用"></a>3.2 链式调用</h3><p><code>.then</code> 支持返回 <code>Promise</code> 对象进行链式调用</p><pre><code class="javascript">ajax(&#39;/user/info&#39;).then((res)=&gt;&#123;  // 用户信息查询成功后，可以根据返回结果查询后续信息  console.log(&#39;用户信息:&#39;, res)  return ajax(&#39;/user/score&#39;)&#125;).then((res)=&gt;&#123;  console.log(&#39;用户成绩:&#39;, res)  return ajax(&#39;/user/friends&#39;)&#125;).then((res)=&gt;&#123;  console.log(&#39;用户朋友:&#39;, res)&#125;)</code></pre><h3 id="3-3-Promise-all"><a href="#3-3-Promise-all" class="headerlink" title="3.3 Promise.all"></a>3.3 Promise.all</h3><p><code>Promise.all</code> 方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。<br><a href="https://jsbin.com/xojifuzapo/1/edit?js,console">在线调试此示例 - jsbin</a></p><pre><code class="javascript">// 生成一个Promise对象的数组var promises = [2, 3, 5, 7, 11, 13].map(function(id)&#123;  return new Promise((resolve, reject)=&gt;&#123;    if (id % 3 === 0) &#123;      resolve(id)    &#125; else &#123;      reject(id)    &#125;  &#125;);&#125;);Promise.all(promises).then(function(post) &#123;  console.log(&#39;全部通过&#39;)&#125;).catch(function(reason)&#123;  console.log(&#39;未全部通过，有问题id：&#39;+reason)&#125;);</code></pre><p>执行结果</p><pre><code class="javascript">未全部通过，有问题id：2</code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">mozilla web docs</a></p>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 技术整理</title>
      <link href="/2020/09/01/Docker-summary/"/>
      <url>/2020/09/01/Docker-summary/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-什么是docker"><a href="#1-1-什么是docker" class="headerlink" title="1.1 什么是docker"></a>1.1 什么是docker</h3><p>Docker 诞生于 2013 年初，由 dotCloud 公司（后改名为 Docker Inc）基于 Go 语言实现并开源的项目。此项目后来加入 Linux基金会，遵从了 Apache 2.0 协议</p><p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。Docker 是在 Linux 容器技术（LXC）的基础上进行了封装，让用户可以快速并可靠的将应用程序从一台运行到另一台上。</p><p>使用容器部署应用被称为<strong>容器化</strong>，容器化技术的几大优势：</p><ol><li><strong>灵活</strong>：甚至复杂的应用也可以被容器化</li><li><strong>轻量</strong>：容器利用和共享宿主机内核，从而在利用系统资源比虚拟机更加的有效</li><li><strong>可移植</strong>：你可以在本地构建，在云端部署并在任何地方运行</li><li><strong>松耦合</strong>：容器是高度封装和自给自足的，允许你在不破环其他容器的情况下替换或升级任何一个</li><li><strong>可扩展</strong>：你可以通过数据中心来新增和自动分发容器</li><li><strong>安全</strong>：容器依赖强约束和独立的进程</li></ol><h3 id="1-2-和传统虚拟机的区别"><a href="#1-2-和传统虚拟机的区别" class="headerlink" title="1.2 和传统虚拟机的区别"></a>1.2 和传统虚拟机的区别</h3><p>容器在Linux上本地运行，并与其他容器共享主机的内核。它运行一个离散进程，不占用任何其他可执行文件更多的内存，从而使其轻巧。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/93990/1598693996043-1d7fecba-79fd-489c-b933-2d23c37680a8.png" alt="image.png"></p><h3 id="1-3-相关链接"><a href="#1-3-相关链接" class="headerlink" title="1.3 相关链接"></a>1.3 相关链接</h3><p>官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p>文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><h2 id="二、Image镜像"><a href="#二、Image镜像" class="headerlink" title="二、Image镜像"></a>二、Image镜像</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也<strong>不会被改变</strong>。</p><ol><li><strong>父镜像</strong>：每个镜像都可能依赖于有一个或多个下层组成的另一个镜像。下层那个镜像就是上层镜像的父镜像</li><li><strong>基础镜像</strong>：一个没有任何父镜像的镜像，被称为基础镜像</li><li><strong>镜像ID</strong>：所有镜像都是通过一个 64 位十六进制字符串（256 bit 的值）来标识的。为了简化使用，前 12 个自负可以组成一个短ID，可以在命令行中使用。短ID还是有一定的碰撞几率，所以服务器总是返回长ID</li></ol><h3 id="2-2-从仓库下载镜像"><a href="#2-2-从仓库下载镜像" class="headerlink" title="2.2 从仓库下载镜像"></a>2.2 从仓库下载镜像</h3><p>可以通过 <code>docker pull</code> 命令从仓库获取所需要的镜像</p><pre><code>docker pull [选项] [Docker Registry 地址]&lt;镜像名&gt;:&lt;标签&gt;</code></pre><p><strong>选项:</strong></p><ol><li>–all-tags,-a : 拉去所有 tagged 镜像</li><li>–disable-content-trust：忽略镜像的校验，默认</li><li>–platform：如果服务器是开启多平台支持的，则需要设置平台</li><li>–quiet,-q：静默执行，不打印详细信息</li></ol><p>标签： 下载指定标签的镜像，默认 <code>latest</code></p><p><strong>示例</strong></p><pre><code># 从 Docker Hub 下载最新的 debian 镜像docker pull debian# 从 Docker Hub 下载 jessie 版 debian 镜像docker pull debian:jessie# 下载指定摘要(sha256)的镜像docker pull ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2</code></pre><h3 id="2-3-列出本地镜像"><a href="#2-3-列出本地镜像" class="headerlink" title="2.3 列出本地镜像"></a>2.3 列出本地镜像</h3><pre><code># 列出已下载的镜像 image_name: 指定列出某个镜像docker images [选项] [image_name]</code></pre><p><strong>选项</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–all, -a</td><td>展示所有镜像(包括 intermediate 镜像)</td></tr><tr><td>–digests</td><td>展示摘要</td></tr><tr><td>–filter, -f</td><td>添加过滤条件</td></tr><tr><td>–format</td><td>使用 Go 模版更好的展示</td></tr><tr><td>–no-trunc</td><td>不删减输出</td></tr><tr><td>–quiet, -q</td><td>静默输出，仅仅展示 IDs</td></tr></tbody></table><p><strong>示例</strong></p><pre><code># 展示本地所有下载的镜像docker images# 在本地查找镜像名是 &quot;java&quot; 标签是 &quot;8&quot; 的 奖项docker images: java:8# 查找悬挂镜像docker images --filter &quot;dangling=true&quot;# 过滤 lable 为 &quot;com.example.version&quot; 的值为 0.1 的镜像docker images --filter &quot;label=com.example.version=0.1&quot;</code></pre><h3 id="2-4-Dockerfile创建镜像"><a href="#2-4-Dockerfile创建镜像" class="headerlink" title="2.4 Dockerfile创建镜像"></a>2.4 Dockerfile创建镜像</h3><p>为了方便分享和快速部署，我们可以使用 <code>docker build</code> 来创建一个新的镜像，首先创建一个文件 Dockerfile，如下</p><pre><code># This is a commentFROM ubuntu:14.04MAINTAINER Chris &lt;jaytp@qq.com&gt;RUN apt-get -qq updateRUN apt-get -qqy install ruby ruby-devRUN gem install sinatra</code></pre><p>然后在此 Dockerfile 所在目录执行 <code>docker build -t yelog/ubuntu:v1 .</code> 来生成镜像，所属组织&#x2F;镜像名:标签</p><h3 id="2-5-上传镜像"><a href="#2-5-上传镜像" class="headerlink" title="2.5 上传镜像"></a>2.5 上传镜像</h3><p>用户可以通过 <code>docker push</code> 命令，把自己创建的镜像上传到仓库中来共享。例如，用户在 Docker Hub 上完成注册后，可以推送自己的镜像到仓库中。</p><pre><code>docker push yelog/ubuntu</code></pre><h3 id="2-6-导出和载入镜像"><a href="#2-6-导出和载入镜像" class="headerlink" title="2.6 导出和载入镜像"></a>2.6 导出和载入镜像</h3><p>docker 支持将镜像导出为文件，然后可以再从文件导入到本地镜像仓库</p><pre><code># 导出docker load --input yelog_ubuntu_v1.tar# 载入docker load &lt; yelog_ubuntu_v1.tar</code></pre><h3 id="2-7-移除本地镜像"><a href="#2-7-移除本地镜像" class="headerlink" title="2.7 移除本地镜像"></a>2.7 移除本地镜像</h3><pre><code class="bash"># -f 强制删除docker rmi [-f] yelog/ubuntu:v1# 删除悬挂镜像docker rmi $(docker images -f &quot;dangling=true&quot; -q)# 删除所有未被容器使用的镜像docker image prune -a# 删除所有镜像为10.188.132.123:5000/library/maven:3.9.6-amazoncorretto17.0.8的容器docker rm $(docker ps -a | grep &quot;3.9.6-amazoncorretto17.0.8&quot; | awk &#39;&#123;print $1&#125;&#39;)</code></pre><h2 id="三、容器"><a href="#三、容器" class="headerlink" title="三、容器"></a>三、容器</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>容器和镜像，就像面向对象中的 <strong>类</strong> 和 <strong>示例</strong> 一样，镜像是静态的定义，容器是镜像运行的实体，容器可以被创建、启动、停止、删除和暂停等</p><p>容器的实质是进城，耽于直接的宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、网络配置和进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><h3 id="3-2-创建容器"><a href="#3-2-创建容器" class="headerlink" title="3.2 创建容器"></a>3.2 创建容器</h3><p>我们可以通过命令 <code>docker run</code> 命令创建容器</p><p>如下，启动一个容器，执行命令输出 “Hello word”，之后终止容器</p><pre><code>docker run ubuntu:14.04 /bin/echo &#39;Hello world&#39;</code></pre><p>下面的命令则是启动一个 bash 终端，允许用户进行交互</p><pre><code>docker run -t -i ubuntu:14.04 /bin/bash</code></pre><p><code>-t</code> 让 Dcoker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</p><p><code>-i</code> 责让容器的标准输入保持打开</p><p>更多参数可选</p><table><thead><tr><th>-a stdin</th><th>指定标准输入输出内容类型</th></tr></thead><tbody><tr><td>-d</td><td>后台运行容器，并返回容器ID</td></tr><tr><td>-i</td><td>以交互模式运行容器，通常与 -t 同时使用</td></tr><tr><td>-P</td><td>随机端口映射，容器端口内部随即映射到宿主机的端口上</td></tr><tr><td>-p</td><td>指定端口映射， -p 宿主机端口:容器端口</td></tr><tr><td>-t</td><td>为容器重新分配一个伪输入终，通常与 -i 同时使用</td></tr><tr><td>–name&#x3D;”gate”</td><td>为容器指定一个名称</td></tr><tr><td>–dns 8.8.8.8</td><td>指定容器的 DNS 服务器，默认与宿主机一致</td></tr><tr><td>–dns-search example.com</td><td>指定容器 DNS 搜索域名，默认与宿主机一致</td></tr><tr><td>-h “gate”</td><td>指定容器的 hostname</td></tr><tr><td>-e username&#x3D;’gate’</td><td>设置环境变量</td></tr><tr><td>–env-file&#x3D;[]</td><td>从指定文件读入环境变量</td></tr><tr><td>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”</td><td>绑定容器到指定 CPU 运行</td></tr><tr><td>-m</td><td>设置容器使用内存最大值</td></tr><tr><td>–net&#x3D;”bridge”</td><td>指定容器的网络连接类型支持 bridge&#x2F;host&#x2F;none&#x2F;container</td></tr><tr><td>–link&#x3D;[]</td><td>添加链接到另一个容器</td></tr><tr><td>–expose&#x3D;[]</td><td>开放一个端口或一组端口</td></tr><tr><td>–volume,-v</td><td>绑定一个卷</td></tr></tbody></table><p>当利用 <code>docker run</code> 来创建容器时，Dcoker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像外面挂在一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟借口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><h3 id="3-3-启动容器"><a href="#3-3-启动容器" class="headerlink" title="3.3 启动容器"></a>3.3 启动容器</h3><pre><code class="bash"># 创建一个名为 test 的容器，容器任务是：打印一行 Hello worddocker run --name=&#39;test&#39; ubuntu:14.04 /bin/echo &#39;Hello world&#39;# 查看所有可用容器 [-a]包括终止在内的所有容器docker ps -a# 启动指定 name 的容器docker start test# 重启指定 name 的容器docker restart test# 查看日志运行日志（每次启动的日志均被查询出来）$ docker logs testHello worldHello world</code></pre><h3 id="3-4-守护态运行"><a href="#3-4-守护态运行" class="headerlink" title="3.4 守护态运行"></a>3.4 守护态运行</h3><p>前面创建的容器都是执行任务（打印Hello world）后，容器就终止了。更多的时候，我们需要让 Docker 容器在后台以守护态（Daemonized）形式运行。此时，可以通过添加 <code>-d</code> 参数来实现</p><blockquote><p>注意：docker是否会长久运行，和 docker run 指定的命令有关</p></blockquote><pre><code># 创建 docker 后台守护进程的容器docker run --name=&#39;test2&#39; -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;# 查看容器$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES237e555d4457        ubuntu:14.04        &quot;/bin/sh -c &#39;while t…&quot;   52 seconds ago      Up 51 seconds                                           test2# 获取容器的输出信息$ docker logs test2hello worldhello worldhello world</code></pre><h3 id="3-5-进入容器"><a href="#3-5-进入容器" class="headerlink" title="3.5 进入容器"></a>3.5 进入容器</h3><p>上一步我们已经实现了容器守护态长久运行，某些时候需要进入容器进行操作，可以使用 <code>attach</code> 、<code>exec</code> 进入容器。</p><pre><code># 不安全的，ctrl+d 退出时容器也会终止docker attach [容器Name]# 以交互式命令行进入，安全的，推荐使用docker exec -it [容器Name] /bin/bash</code></pre><p><strong>命令优化</strong></p><ol><li>使用 <code>docker exec</code> 命令时，好用，但是命令过长，我们可以通过自定义命令来简化使用</li><li>创建文件 <code>/user/bin/ctn</code> 命令文件，内容如下</li></ol><pre><code>docker exec -it $1 /bin/bash</code></pre><ol><li>检查环境变量有没有配置目录 <code>/usr/bin</code> （一般是有配置在环境变量里面的，不过最好再确认一下）</li></ol><pre><code>$PATHbash: /usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games: No such file or directory</code></pre><ol><li>完成上面步骤后，就可以直接通过命令 <code>ctn</code> 来进入容器</li></ol><blockquote><p>注意：如果是使用非 root 账号创建的命令，而 docker 命令是 root 权限，可能存在权限问题，可以通过设置 <code>chmod 777 /usr/bin/ctn</code> 设置权限，使用 <code>sudo ctn [容器Name]</code> 即可进入容器</p></blockquote><pre><code>$ ctn [容器Name]</code></pre><ol><li>使用上面命令时，容器Name 需要手动输入，容器出错。我们可以借助 <code>complete</code> 命令来补全 容器Name，在 <code>~/.bashrc</code> （作用于当前用户，如果想要所要用户上校，可以修改 <code>/etc/bashrc</code>）文件中添加一行，内容如下。保存后执行 <code>source ~/.bashrc</code> 使之生效，之后我们输入 <code>ctn</code> 后，按 <code>tab</code> 就会提示或自动补全容器名了了</li></ol><pre><code># ctn auto completecomplete -W &quot;$(docker ps --format&quot;&#123;&#123;.Names&#125;&#125;&quot;)&quot; ctn</code></pre><blockquote><p>注意： 由于提示的 容器Name 是 <code>~/.bashrc</code> 生效时的列表，所有如果之后 docker 容器列表有变动，需要重新执行 <code>source ~/.bashrc</code> 使之更新提示列表</p></blockquote><h3 id="3-6-终止容器"><a href="#3-6-终止容器" class="headerlink" title="3.6 终止容器"></a>3.6 终止容器</h3><p>通过 <code>docker stop [容器Name]</code> 来终止一个<strong>运行中</strong>的容器</p><pre><code># 终止容器名为 test2 的容器docker stop test2# 查看正在运行中的容器docker ps# 查看所有容器（包括终止的）docker ps -a</code></pre><h3 id="3-7-将容器保存为镜像"><a href="#3-7-将容器保存为镜像" class="headerlink" title="3.7 将容器保存为镜像"></a>3.7 将容器保存为镜像</h3><p>我们修改一个容器后，可以经当前容器状态打包成镜像，方便下次直接通过镜像仓库生成当前状态的容器。</p><pre><code># 创建容器docker run -t -i training/sinatra /bin/bash# 添加两个应用gem install json# 将修改后的容器打包成新的镜像docker commit -m &quot;Added json gem&quot; -a &quot;Docker Newbee&quot; 0b2616b0e5a8 ouruser/sinatra:v2</code></pre><h3 id="3-8-导出-导入容器"><a href="#3-8-导出-导入容器" class="headerlink" title="3.8 导出&#x2F;导入容器"></a>3.8 导出&#x2F;导入容器</h3><p>容器 -&gt;导出&gt; 容器快照文件 -&gt;导入&gt; 本地镜像仓库 -&gt;新建&gt; 容器</p><pre><code>$ docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES2a8bffa405c8        ubuntu:14.04        &quot;/bin/sh -c &#39;while t…&quot;   About an hour ago   Up 3 seconds                                            test2# 导出$ docker export 2a8bffa405c8 &gt; ubuntu.tar# 导入为镜像$ docker ubuntu.tar | docker import - test/ubuntu:v1.0# 从指定 URL 或者某个目录导入$ docker import http://example.com/exampleimage.tgz example/imagerepo</code></pre><blockquote><p>注意：用户既可以通过 <code>docker load</code> 来导入镜像存储文件到本地镜像仓库，也可以使用 <code>docker import</code> 来导入一个容器快找到本地镜像仓库，两者的区别在于容器快照将丢失所有的历史记录和元数据信息，仅保存容器当时的状态，而镜像存储文件将保存完成的记录，体积要更大。所有容器快照文件导入时需要重新指定标签等元数据信息。</p></blockquote><h3 id="3-9-删除容器"><a href="#3-9-删除容器" class="headerlink" title="3.9 删除容器"></a>3.9 删除容器</h3><p>可以使用 <code>docker rm [容器Name]</code> 来删除一个终止状态的容器，如果容器还未终止，可以先使用 <code>docker stop [容器Name]</code> 来终止容器，再进行删除操作</p><pre><code>docker rm test2# 删除容器 -f: 强制删除，无视是否运行$ docker [-f] rm myubuntu# 删除所有已关闭的容器$ docker rm $(docker ps -a -q)</code></pre><h3 id="3-10-查看容器状态"><a href="#3-10-查看容器状态" class="headerlink" title="3.10 查看容器状态"></a>3.10 查看容器状态</h3><pre><code>docker stats $(docker ps --format=&#123;&#123;.Names&#125;&#125;)</code></pre><h2 id="四、数据卷"><a href="#四、数据卷" class="headerlink" title="四、数据卷"></a>四、数据卷</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多特性：</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>卷会一直存在，直到没有容器使用</li></ul><blockquote><p>数据卷类似于 Linux 下对目录或文件进行 mount</p></blockquote><h3 id="4-2-创建数据卷"><a href="#4-2-创建数据卷" class="headerlink" title="4.2 创建数据卷"></a>4.2 创建数据卷</h3><p>在用 <code>docker run</code> 命令的时候，使用 <code>-v</code> 标记来创建一个数据卷并挂在在容器里，可同时挂在多个。</p><pre><code># 创建一个 web 容器，并加载一个数据卷到容器的 /webapp 目录docker run -d -P --name web -v /webapp training/webapp python app.py# 挂载一个宿主机目录 /data/webapp 到容器中的 /opt/webappdocker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py# 默认是读写权限，也可以指定为只读docker run -d -P --name web -v /src/webapp:/opt/webapp:ro# 挂载单个文件docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</code></pre><h3 id="4-3-数据卷容器"><a href="#4-3-数据卷容器" class="headerlink" title="4.3 数据卷容器"></a>4.3 数据卷容器</h3><p>如果需要多个容器共享数据，最好创建数据卷容器，就是一个正常的容器，撰文用来提供数据卷供其他容器挂载的</p><pre><code># 创建一个数据卷容器 dbdatadocker run -d -v /dbdata --name dbdata training/postgres echo Data-only container for postgres# 其他容器挂载 dbdata 容器的数据卷docker run -d --volumes-from dbdata --name db1 training/postgresdocker run -d --volumes-from dbdata --name db2 training/postgres</code></pre><h2 id="五、网络"><a href="#五、网络" class="headerlink" title="五、网络"></a>五、网络</h2><h3 id="5-1-外部访问容器"><a href="#5-1-外部访问容器" class="headerlink" title="5.1 外部访问容器"></a>5.1 外部访问容器</h3><p>在容器内运行一些服务，需要外部可以访问到这些服务，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p><p>当使用 <code>-P</code> 标记时，Docker 会随即映射一个 <code>49000～49900</code> 的端口到内部容器开放的网络端口。</p><p>使用 <code>docker ps</code> 可以查看端口映射情况</p><pre><code>$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES7f43807dc042        training/webapp     &quot;python app.py&quot;          3 seconds ago       Up 2 seconds        0.0.0.0:32770-&gt;5000/tcp             amazing_liskov</code></pre><p>-p 指定端口映射，支持格式 <code>ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</code></p><pre><code># 不限制ip访问docker run -d -p 5000:5000 training/webapp python app.py# 只允许宿主机回环地址访问docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py# 宿主机自动分配绑定端口docker run -d -p 127.0.0.1::5000 training/webapp python app.py# 指定 udp 端口docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py# 指定多个端口映射docker run -d -p 5000:5000  -p 3000:80 training/webapp python app.py# 查看映射端口配置$ docker port amazing_liskov5000/tcp -&gt; 0.0.0.0:32770</code></pre><h3 id="5-2-容器互联"><a href="#5-2-容器互联" class="headerlink" title="5.2 容器互联"></a>5.2 容器互联</h3><p>容器除了跟宿主机端口映射外，还有一种容器间交互的方式，可以在源&#x2F;目标容器之间建立一个隧道，目标容器可以看到源容器指定的信息。</p><p>可以通过 <code>--link name:alias</code> 来连接容器，下面就是 “web容器连接db容器” 的例子</p><pre><code># 创建 容器dbdocker run -d --name db training/postgres# 创建 容器web 并连接到 容器dbdocker run -d -P --name web --link db:db training/webapp python app.py# 进入 容器web，测试连通性$ ctn web$ ping dbPING db (172.17.0.3) 56(84) bytes of data.64 bytes from db (172.17.0.3): icmp_seq=1 ttl=64 time=0.254 ms64 bytes from db (172.17.0.3): icmp_seq=2 ttl=64 time=0.190 ms64 bytes from db (172.17.0.3): icmp_seq=3 ttl=64 time=0.389 ms</code></pre><h3 id="5-3-访问控制"><a href="#5-3-访问控制" class="headerlink" title="5.3 访问控制"></a>5.3 访问控制</h3><p>容器想要访问外部网络，需要宿主机的转发支持。在 Linux 系统中，通过以下命令检查是否打开</p><pre><code>$ sysctl net.ipv4.ip_forwardnet.ipv4.ip_forward = 1</code></pre><p>如果是 0，说明没有开启转发，则需要手动打开。</p><pre><code>$ sysctl -w net.ipv4.ip_forward=1</code></pre><h3 id="5-4-配置-docker0-桥接"><a href="#5-4-配置-docker0-桥接" class="headerlink" title="5.4 配置 docker0 桥接"></a>5.4 配置 docker0 桥接</h3><p>Docker 服务默认会创建一个 <code>docker0</code> 网桥，他在内核层连通了其他物理或虚拟网卡，这就将容器和主机都放在同一个物理网络。</p><p>Docker 默认制定了 <code>docker0</code> 接口的IP地址和子网掩码，让主机和容器间可以通过网桥相互通信，他还给了 MTU（接口允许接收的最大单元），通常是 1500 Bytes，或宿主机网络路由上支持的默认值。这些都可以在服务启动的时候进行配置。</p><ul><li><code>--bip=CIDR</code> ip地址加子网掩码格式，如 192.168.1.5&#x2F;24</li><li><code>--mtu=BYTES</code> 覆盖默认的 Docker MTU 配置</li></ul><p>可以通过 <code>brctl show</code> 来查看网桥和端口连接信息</p><h3 id="5-5-网络配置文件"><a href="#5-5-网络配置文件" class="headerlink" title="5.5 网络配置文件"></a>5.5 网络配置文件</h3><p>Docker 1.2.0 开始支持在运行中的容器里编辑 <code>/etc/hosts</code> 、<code>/etc/hostsname</code> 和 <code>/etc/resolve.conf</code> 文件，修改都是临时的，重新容器将会丢失修改，通过 <code>docker commit</code> 也不会被提交。</p><h2 id="六、Dockerfile"><a href="#六、Dockerfile" class="headerlink" title="六、Dockerfile"></a>六、Dockerfile</h2><h3 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6.1 介绍"></a>6.1 介绍</h3><p>Dockerfile 是由一行行命令组成的命令集合，分为四个部分：</p><ol><li>基础镜像信息</li><li>维护着信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ol><p>如下：</p><pre><code># 最前面一般放这个 Dockerfile 的介绍、版本、作者及使用说明等# This dockerfile uses the ubuntu image# VERSION 2 - EDITION 1# Author: docker_user# Command format: Instruction [arguments / command] ..# 使用的基础镜像，必须放在非注释第一行FROM ubuntu# 维护着信息信息： 名字 联系方式MAINTAINER docker_user docker_user@email.com# 构建镜像的命令：对镜像做的调整都在这里RUN echo &quot;deb http://archive.ubuntu.com/ubuntu/ raring main universe&quot; &gt;&gt; /etc/apt/sources.listRUN apt-get update &amp;&amp; apt-get install -y nginxRUN echo &quot;\ndaemon off;&quot; &gt;&gt; /etc/nginx/nginx.conf# 创建/运行 容器时的操作指令 # 可以理解为 docker run 后跟的运行指令CMD /usr/sbin/nginx</code></pre><h3 id="6-2-指令"><a href="#6-2-指令" class="headerlink" title="6.2 指令"></a>6.2 指令</h3><p>指令一般格式为 <code>INSTRUCTION args</code>，包括 <code>FORM</code> 、 <code>MAINTAINER</code> 、<code>RUN</code> 等</p><table><thead><tr><th>FORM</th><th>第一条指令必须是 <code>FORM</code> 指令，并且如果在同一个<code>Dockerfile</code> 中创建多个镜像，可以使用多个 <code>FROM</code> 指令（每个镜像一次）</th><th>FORM ubuntuFORM ubuntu:14.04</th></tr></thead><tbody><tr><td>MAINTAINER</td><td>维护者信息</td><td>MAINTAINER Chris <a href="mailto:&#120;&#120;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#120;&#120;&#x40;&#103;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></td></tr><tr><td>RUN</td><td>每条 RUN 指令在当前镜像基础上执行命令，并提交为新的镜像。当命令过长时可以使用 <code>\</code> 来换行</td><td>在 shell 终端中运行命令<code>RUN apt-get update &amp;&amp; apt-get install -y nginx</code>在 <code>exec</code> 中执行:<code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code></td></tr><tr><td>CMD</td><td>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</td><td><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> 使用 <code>exec</code> 执行，推荐方式；<code>CMD command param1 param2</code> 在 <code>/bin/sh</code> 中执行，提供给需要交互的应用；<code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> 提供给 <code>ENTRYPOINT</code> 的默认参数；</td></tr><tr><td>EXPOSE</td><td>告诉服务端容器暴露的端口号，</td><td>EXPOSE <port></td></tr><tr><td>ENV</td><td>指定环境变量</td><td>ENV PG_MAJOR 9.3ENV PATH &#x2F;usr&#x2F;local&#x2F;postgres-$PG_MAJOR&#x2F;bin:$PATH</td></tr><tr><td>ADD</td><td><code>ADD  </code>该命令将复制指定的 <code> </code>到容器中的 <code>。其中 </code> 可以是 <code>Dockerfile</code> 所在目录的一个相对路径，也可以是一个<code>URL</code>；还可以是一个 tar文件（自动解压为目录）</td><td></td></tr><tr><td>COPY</td><td>格式为 <code>COPY  </code>复制本地主机的 <code>（为 Dockerfile 所在目录的相对路径）到容器中的</code> 。当使用本地目录为源目录时，推荐使用 <code>COPY</code></td><td></td></tr><tr><td>ENTRYPOINT</td><td>配置容器启动执行的命令，并且不可被 <code>docker run</code> 提供的参数覆盖每个Docekrfile 中只能有一个 <code>ENTRYPOINT</code> ，当指定多个时，只有最后一个起效</td><td>两种格式<code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]``ENTRYPOINT command param1 param2</code>（shell中执行）</td></tr><tr><td>VOLUME</td><td>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</td><td>VOLUME [“&#x2F;data”]</td></tr><tr><td>USER</td><td>指定运行容器时的用户名或 UID，后续的 <code>RUN</code> 也会使用指定用户</td><td>USER daemon</td></tr><tr><td>WORKDIR</td><td>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录。可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。</td><td>格式为 <code>WORKDIR /path/to/workdir</code>。 WORKDIR &#x2F;aWORKDIR bWORKDIR cRUN pwd最后的路径为 &#x2F;a&#x2F;b&#x2F;c</td></tr><tr><td>ONBUILD</td><td>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</td><td>格式为 <code>ONBUILD [INSTRUCTION]</code>。</td></tr></tbody></table><h3 id="6-3-创建镜像"><a href="#6-3-创建镜像" class="headerlink" title="6.3 创建镜像"></a>6.3 创建镜像</h3><p>编写完成 Dockerfile 之后，可以通过 <code>docker build</code> 命令来创建镜像</p><p><code>docker build [选项] 路径</code> 该命令江都区指定路径下（包括子目录）的Dockerfile，并将该路径下所有内容发送给 Docker 服务端，有服务端来创建镜像。可以通过 <code>.dockerignore</code> 文件来让 Docker 忽略路径下的目录与文件</p><pre><code># 使用 -t 指定镜像的标签信息docker build -t myrepo/myimage .</code></pre><h2 id="七、Docker-Compose"><a href="#七、Docker-Compose" class="headerlink" title="七、Docker Compose"></a>七、Docker Compose</h2><h3 id="7-1-介绍"><a href="#7-1-介绍" class="headerlink" title="7.1 介绍"></a>7.1 介绍</h3><p>Docker Compose 是 Docker 官方编排项目之一，负责快速在集群中部署分布式应用。维护地址：<a href="https://github.com/docker/compose%EF%BC%8C%E7%94%B1">https://github.com/docker/compose，由</a> Python 编写，实际调用 Docker提供的API实现。</p><p>Dockerfile 可以让用户管理一个单独的应用容器，而 Compose 则允许用户在一个模版（YAML格式）中定义一组相关联的应用容器（被称为一个project&#x2F;项目），例如一个 web容器再加上数据库、redis等。</p><h3 id="7-2-安装"><a href="#7-2-安装" class="headerlink" title="7.2 安装"></a>7.2 安装</h3><pre><code># 使用 pip 进行安装pip install -U docker-compose# 查看用法docker-ompose -h# 添加 bash 补全命令curl -L https://raw.githubusercontent.com/docker/compose/1.2.0/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</code></pre><h3 id="7-3-使用"><a href="#7-3-使用" class="headerlink" title="7.3 使用"></a>7.3 使用</h3><p>术语</p><ul><li>服务&#x2F;service： 一个应用容器，实际上可以运行多个相同镜像的实例</li><li>项目&#x2F;project： 有一组关联的应用容器组成的完成业务单元</li></ul><p>示例：创建一个 Haproxy 挂载三个 Web 容器</p><p>创建一个 <code>compose-haproxy-web</code> 目录，作为项目工作目录，并在其中分别创建两个子目录： <code>haproxy</code> 和 <code>web</code> 。</p><pre><code>compose-haproxy-webcompose-haproxy-webgit clone https://github.com/yelog/compose-haproxy-web.git</code></pre><p>目录长这样：</p><pre><code>compose-haproxy-web├── docker-compose.yml├── haproxy│   └── haproxy.cfg└── web    ├── Dockerfile    ├── index.html    └── index.py</code></pre><p>在该目录执行 <code>docker-compose up</code> 命令，会整合输出所有容器的输出</p><pre><code>$ docker-compose upStarting compose-haproxy-web_webb_1 ... doneStarting compose-haproxy-web_webc_1 ... doneStarting compose-haproxy-web_weba_1 ... doneRecreating compose-haproxy-web_haproxy_1 ... doneAttaching to compose-haproxy-web_webb_1, compose-haproxy-web_weba_1, compose-haproxy-web_webc_1, compose-haproxy-web_haproxy_1haproxy_1  | [NOTICE] 244/131022 (1) : haproxy version is 2.2.2haproxy_1  | [NOTICE] 244/131022 (1) : path to executable is /usr/local/sbin/haproxyhaproxy_1  | [ALERT] 244/131022 (1) : parsing [/usr/local/etc/haproxy/haproxy.cfg:14] : &#39;listen&#39; cannot handle unexpected argument &#39;:70&#39;.haproxy_1  | [ALERT] 244/131022 (1) : parsing [/usr/local/etc/haproxy/haproxy.cfg:14] : please use the &#39;bind&#39; keyword for listening addresses.haproxy_1  | [ALERT] 244/131022 (1) : Error(s) found in configuration file : /usr/local/etc/haproxy/haproxy.cfghaproxy_1  | [ALERT] 244/131022 (1) : Fatal errors found in configuration.compose-haproxy-web_haproxy_1 exited with code 1</code></pre><p>此时访问本地的 80 端口，会经过 haproxy 自动转发到后端的某个 web 容器上，刷新页面，可以观察到访问的容器地址的变化。</p><h3 id="7-4-命令说明"><a href="#7-4-命令说明" class="headerlink" title="7.4 命令说明"></a>7.4 命令说明</h3><p>大部分命令都可以运行在一个或多个服务上。如果没有特别的说明，命令则应用在项目所有的服务上。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 查看具体某个命令的使用说明</p><p>使用格式</p><pre><code>docker-compose [options] [COMMAND] [ARGS...]</code></pre><table><thead><tr><th>build</th><th>构建&#x2F;重建服务服务一旦构建后，将会带上一个标记名，例如 web_db可以随时在项目目录运行 <code>docker-compose build</code> 来重新构建服务</th></tr></thead><tbody><tr><td>help</td><td>获得一个命令的信息</td></tr><tr><td>kill</td><td>通过发送 <code>SIGKILL</code> 信号来强制停止服务容器，支持通过参数来指定发送信号，例如<code>docker-compose kill -s SIGINT</code></td></tr><tr><td>logs</td><td>查看服务的输出</td></tr><tr><td>port</td><td>打印绑定的公共端口</td></tr><tr><td>ps</td><td>列出所有容器</td></tr><tr><td>pull</td><td>拉去服务镜像</td></tr><tr><td>rm</td><td>删除停止的服务容器</td></tr><tr><td>run</td><td>在一个服务上执行一个命令<code>docker-compose run ubuntu ping docker.com</code></td></tr><tr><td>scale</td><td>设置同一个服务运行的容器个数通过 <code>service=num</code> 的参数来设置数量<code>docker-compose scale web=2 worker=3</code></td></tr><tr><td>start</td><td>启动一个已经存在的服务容器</td></tr><tr><td>stop</td><td>停止一个已经运行的容器，但不删除。可以通过 <code>docker-compose start</code> 再次启动</td></tr><tr><td>up</td><td>构建、创建、启动、链接一个服务相关的容器链接服务都将被启动，除非他们已经运行<code>docker-compose up -d</code> 将后台运行并启动<code>docker-compose up</code> 已存在容器将会重新创建<code>docker-compose up --no-recreate</code> 将不会重新创建容器</td></tr></tbody></table><h3 id="7-5-环境变量"><a href="#7-5-环境变量" class="headerlink" title="7.5 环境变量"></a>7.5 环境变量</h3><p>环境变量可以用来配置 Compose 的行为</p><p>以 <code>Docker_</code> 开头的变量用来配置 Docker 命令行客户端使用的一样</p><table><thead><tr><th>COMPOSE_PROJECT_NAME</th><th>设置通过 Compose 启动的每一个容器前添加的项目名称，默认是当前工作目录的名字。</th></tr></thead><tbody><tr><td>COMPOSE_FILE</td><td>设置要使用的 <code>docker-compose.yml</code> 的路径。默认路径是当前工作目录。</td></tr><tr><td>DOCKER_HOST</td><td>设置 Docker daemon 的地址。默认使用 <code>unix:///var/run/docker.sock</code>，与 Docker 客户端采用的默认值一致。</td></tr><tr><td>DOCKER_TLS_VERIFY</td><td>如果设置不为空，则与 Docker daemon 交互通过 TLS 进行。</td></tr><tr><td>DOCKER_CERT_PATH</td><td>配置 TLS 通信所需要的验证（<code>ca.pem</code>、<code>cert.pem</code> 和 <code>key.pem</code>）文件的路径，默认是 <code>~/.docker</code> 。</td></tr></tbody></table><h3 id="7-6-docker-compose-yml"><a href="#7-6-docker-compose-yml" class="headerlink" title="7.6 docker-compose.yml"></a>7.6 docker-compose.yml</h3><p>默认模版文件是 <code>docker-compose.yml</code> ，启动定义了每个服务都必须经过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile) 来自动构建。</p><p>其他大部分指令跟 <code>docker run</code> 类似</p><p>如果使用 <code>build</code> 指令，在 Dockerfile 中设置的选项（如 <code>CMD</code> 、<code>EXPOSE</code> 等）将会被自动获取，无需在 <code>docker-compose.yml</code> 中再次设置。</p><pre><code>**image**</code></pre><p>指定镜像名称或镜像ID，如果本地仓库不存在，将尝试从远程仓库拉去此镜像</p><pre><code>image: ubuntuimage: orchardup/postgresqlimage: a4bc65fd**build**</code></pre><p>指定 <code>Dockerfile</code> 所在文件的路径。<code>Compose</code> 将利用它自动构建这个镜像，然后使用这个镜像。</p><pre><code>build: /path/to/build/dir**command**</code></pre><p>覆盖容器启动默认执行命令</p><pre><code>command: bundle exec thin -p 3000**links**</code></pre><p>链接到其他服务中的容器，使用服务名称或别名</p><pre><code>links:    - db  - db:database  - redis</code></pre><p>别名会自动在服务器中的 <code>/etc/hosts</code> 里创建。例如：</p><pre><code>172.17.2.186  db172.17.2.186  database172.17.2.187  redis**external_links**</code></pre><p>连接到 <code>docker-compose.yml</code> 外部的容器，甚至并非 <code>Compose</code> 管理的容器。</p><pre><code>external_links: - redis_1 - project_db_1:mysql - project_db_1:postgresql</code></pre><p><strong><code>ports</code></strong></p><p>暴露端口信息 <code>HOST:CONTAINER</code></p><p>格式或者仅仅指定容器的端口（宿主机会随机分配端口）</p><pre><code>ports: - &quot;3000&quot; - &quot;8000:8000&quot; - &quot;49100:22&quot; - &quot;127.0.0.1:8001:8001&quot;</code></pre><blockquote><p><em>注：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 <code>YAML</code> 将会解析 <code>xx:yy</code> 这种数字格式为 60 进制。所以建议采用字符串格式。</em></p></blockquote><pre><code>**expose**</code></pre><p>暴露端口，但不映射到宿主机，只被连接的服务访问</p><pre><code>expose: - &quot;3000&quot; - &quot;8000&quot;</code></pre><p><strong><code>volumes</code></strong></p><p>卷挂载路径设置。可以设置宿主机路径 （<code>HOST:CONTAINER</code>） 或加上访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><pre><code>volumes: - /var/lib/mysql - cache/:/tmp/cache - ~/configs:/etc/configs/:ro</code></pre><p>**<br>**</p><p><strong><code>volumes_from</code></strong></p><p>从另一个服务或容器挂载它的所有卷。</p><pre><code>volumes_from: - service_name - container_name</code></pre><pre><code>environment</code></pre><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。</p><pre><code>environment:  RACK_ENV: development  SESSION_SECRET:environment:  - RACK_ENV=development  - SESSION_SECRET</code></pre><p><strong><code>env_file</code></strong></p><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 指定了模板文件，则 <code>env_file</code> 中路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则以后者为准。</p><pre><code>env_file: .envenv_file:  - ./common.env  - ./apps/web.env  - /opt/secrets.env</code></pre><p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p><pre><code># common.env: Set Rails/Rack environmentRACK_ENV=development</code></pre><p><strong><code>extends</code></strong></p><p>基于已有的服务进行扩展。例如我们已经有了一个 webapp 服务，模板文件为 <code>common.yml</code>。</p><pre><code># common.ymlwebapp:  build: ./webapp  environment:    - DEBUG=false    - SEND_EMAILS=false</code></pre><p>编写一个新的 <code>development.yml</code> 文件，使用 <code>common.yml</code> 中的 webapp 服务进行扩展。</p><pre><code># development.ymlweb:  extends:    file: common.yml    service: webapp  ports:    - &quot;8000:8000&quot;  links:    - db  environment:    - DEBUG=truedb:  image: postgres</code></pre><p>后者会自动继承 common.yml 中的 webapp 服务及相关环节变量。</p><p>**<br>**</p><p><strong><code>net</code></strong></p><p>设置网络模式。使用和 <code>docker client</code> 的 <code>--net</code> 参数一样的值。</p><pre><code>net: &quot;bridge&quot;net: &quot;none&quot;net: &quot;container:[name or id]&quot;net: &quot;host&quot;</code></pre><p>**<br>**</p><p><strong><code>pid</code></strong></p><p>跟主机系统共享进程命名空间。打开该选项的容器可以相互通过进程 ID 来访问和操作。</p><pre><code>pid: &quot;host&quot;</code></pre><p><strong><code>dns</code></strong></p><p>配置 DNS 服务器。可以是一个值，也可以是一个列表。</p><pre><code>dns: 8.8.8.8dns:  - 8.8.8.8  - 9.9.9.9</code></pre><p><strong><code>cap_add, cap_drop</code></strong></p><p>添加或放弃容器的 Linux 能力（Capabiliity）。</p><pre><code>cap_add:  - ALLcap_drop:  - NET_ADMIN  - SYS_ADMIN</code></pre><p>**<br>**</p><p><strong><code>dns_search</code></strong></p><p>配置 DNS 搜索域。可以是一个值，也可以是一个列表。</p><pre><code class="yaml">dns_search: example.comdns_search:  - domain1.example.com  - domain2.example.com</code></pre><p>**<br>**</p><p><strong><code>working_dir, entrypoint, user, hostname, domainname, mem_limit, privileged, restart, stdin_open, tty, cpu_shares</code></strong></p><p>这些都是和 <code>docker run</code> 支持的选项类似。</p><h2 id="八、安全"><a href="#八、安全" class="headerlink" title="八、安全"></a>八、安全</h2><h3 id="8-1-内核命名空间"><a href="#8-1-内核命名空间" class="headerlink" title="8.1 内核命名空间"></a>8.1 内核命名空间</h3><p>当使用 <code>docker run</code> 启动一个容器时，在后台 Docker 为容器创建一个独立的命名空间和控制集合。命名空间踢空了最基础的也是最直接的隔离，在容器中运行的进程不会被运行在主机上的进程和其他容器发现和作用。</p><h3 id="8-2-控制组"><a href="#8-2-控制组" class="headerlink" title="8.2 控制组"></a>8.2 控制组</h3><p>控制组是 Linux 容器机制的另一个关键组件，负责实现资源的审计和限制。</p><p>它提供了很多特性，确保哥哥容器可以公平地分享主机的内存、CPU、磁盘IO等资源；当然，更重要的是，控制组确保了当容器内的资源使用产生压力时不会连累主机系统。</p><h3 id="8-3-内核能力机制"><a href="#8-3-内核能力机制" class="headerlink" title="8.3 内核能力机制"></a>8.3 内核能力机制</h3><p>能力机制是 Linux 内核的一个强大特性，可以提供细粒度的权限访问控制。 可以作用在进程上，也可以作用在文件上。</p><p>例如一个服务需要绑定低于 1024 的端口权限，并不需要 root 权限，那么它只需要被授权 <code>net_bind_service</code> 能力即可。</p><p>默认情况下， Docker 启动的容器被严格限制只允许使用内核的一部分能力。</p><p>使用能力机制加强 Docker 容器的安全有很多好处，可以按需分配给容器权限，这样，即便攻击者在容器中取得了 root 权限，也不能获取宿主机较高权限，能进行的破坏也是有限的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.docker.com/engine/reference/commandline/images/">https://docs.docker.com/engine/reference/commandline/images/</a></p><p><a href="http://www.dockerinfo.net/">http://www.dockerinfo.net/</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo评论设置</title>
      <link href="/2020/05/23/3-hexo-comment/"/>
      <url>/2020/05/23/3-hexo-comment/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前 <code>3-hexo</code> 已经集成了评论系统有 <code>gitalk</code> 、<code>gitment</code>、 <code>disqus</code> 、<code>来必力</code>、<code>utteranc</code></p><h2 id="一、gitalk"><a href="#一、gitalk" class="headerlink" title="一、gitalk"></a>一、gitalk</h2><p>gitalk 是一款基于 Github Issue 和 Preact 开发的评论插件 官网: <a href="https://gitalk.github.io/">https://gitalk.github.io/</a></p><h3 id="1-登录-github-，注册应用"><a href="#1-登录-github-，注册应用" class="headerlink" title="1. 登录 github ，注册应用"></a>1. 登录 github ，注册应用</h3><p><a href="https://github.com/settings/applications/new">点击进行注册</a> ，如下</p><p><img src="https://i.loli.net/2020/05/23/6BmnUbX5gzPHqk1.png" alt="注册应用"></p><p>注册完后，可得到 <code>Client ID</code> 和 <code>Client Secret</code></p><h3 id="2-新建存放评论的仓库"><a href="#2-新建存放评论的仓库" class="headerlink" title="2. 新建存放评论的仓库"></a>2. 新建存放评论的仓库</h3><p>因为 <code>gitalk</code> 是基于 Github 的 Issue 的，所以需要指定一个仓库，用来承接 gitalk 的评论，我们一般使用 Github Page 来做我们博客的评论，所以，新建仓库名为 <code>xxx.github.io</code>，其中 xxx 为你的 Github 用户名</p><h3 id="3-配置主题"><a href="#3-配置主题" class="headerlink" title="3. 配置主题"></a>3. 配置主题</h3><p>在主题下 <code>_config.yml</code> 中找到如下配置，启用评论，并使用 <code>gitalk</code></p><pre><code class="yaml">##########评论设置#############comment:  on: true  type: gitalk</code></pre><p>在主题下 <code>_config.yml</code> 中找到 gitalk 配置，将 第1步 得到的  <code>Client ID</code> 和 <code>Client Secret</code> 复制到如下位置</p><pre><code class="yaml">gitalk:  githubID:    # 填你的 github 用户名  repo:  xxx.github.io # 承载评论的仓库，一般使用 Github Page 仓库  ClientID:   # 第1步获得 Client ID  ClientSecret:  # 第1步获得 Client Secret  adminUser:     # Github 用户名  distractionFreeMode: true  language: zh-CN  perPage: 10</code></pre><h2 id="二、来必力"><a href="#二、来必力" class="headerlink" title="二、来必力"></a>二、来必力</h2><h3 id="1-创建来必力账号，并选择-City-免费版"><a href="#1-创建来必力账号，并选择-City-免费版" class="headerlink" title="1. 创建来必力账号，并选择 City 免费版"></a>1. 创建来必力账号，并选择 City 免费版</h3><p>官网<a href="http://livere.com/">http://livere.com/</a> ，创建账号，点击上面的安装，选择 City 免费版</p><p><img src="https://i.loli.net/2020/05/23/mLYfjrJ1UgOIpiD.png" alt="选择 city 免费版"></p><p>复制获取到的代码中的 <code>data-uid</code></p><p><img src="http://yelog-img.test.upcdn.net/447D431A-998C-4327-9463-A51D7CE91CE3.png" alt="复制 data-uid"></p><h3 id="2-主题选择使用来必力评论"><a href="#2-主题选择使用来必力评论" class="headerlink" title="2. 主题选择使用来必力评论"></a>2. 主题选择使用来必力评论</h3><p>在主题下 <code>_config.yml</code>  </p><p>在找到来必力配置如下，第一步中复制的 <code>data-uid</code> 粘贴到下面 <code>data_uid</code> 处</p><pre><code class="yaml">livere:  data_uid: xxxxxx</code></pre><p>找到以下代码， 开启并选择 livere (来必力)</p><pre><code class="yaml">##########评论设置#############comment:  on: true  type: livere</code></pre><h2 id="三、utteranc"><a href="#三、utteranc" class="headerlink" title="三、utteranc"></a>三、utteranc</h2><p>官网地址：<a href="https://utteranc.es/">https://utteranc.es/</a></p><h3 id="1-安装-utterances"><a href="#1-安装-utterances" class="headerlink" title="1. 安装 utterances"></a>1. 安装 utterances</h3><p><a href="https://github.com/apps/utterances">点我进行安装</a></p><h3 id="2-配置主题"><a href="#2-配置主题" class="headerlink" title="2. 配置主题"></a>2. 配置主题</h3><p>在主题下 <code>_config.yml</code> 中找到 <code>utteranc</code> 的配置 ，修改 <code>repo</code> 为自己的仓库名</p><pre><code class="yaml">utteranc:  repo: xxx/xxx.github.io # 承载评论的仓库，填上自己的仓库  issue_term: pathname    # Issue 与 博客文章 之间映射关系  label: utteranc         # 创建的 Issue 添加的标签  theme: github-light     # 主题，可选主题请查看官方文档 https://utteranc.es/#heading-theme# 官方文档 https://utteranc.es/# 使用说明 https://yelog.org//2020/05/23/3-hexo-comment/</code></pre><p>在主题下 <code>_config.yml</code> 中找到如下配置，启用评论，并使用 <code>utteranc</code></p><pre><code class="yaml">comment:  on: true  type: utteranc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo支持mermaid图表</title>
      <link href="/2019/11/12/3-hexo-support-mermaid/"/>
      <url>/2019/11/12/3-hexo-support-mermaid/</url>
      
        <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><ol><li>安装hexo插件</li></ol><pre><code class="bash">npm install hexo-filter-mermaid-diagrams</code></pre><ol start="2"><li>修改<code>themes/3-hexo/_config.yml</code> 的 <code>mermaid.on</code>，开启主题支持</li></ol><pre><code class="yml"># Mermaid 支持mermaid:  on: true  cdn: //cdn.jsdelivr.net/npm/mermaid@8.4.2/dist/mermaid.min.js  #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.3.1/mermaid.min.js  options: # 更多配置信息可以参考 https://mermaidjs.github.io/#/mermaidAPI    theme: &#39;default&#39;    startOnLoad: true    flowchart:      useMaxWidth: false      htmlLabels: true</code></pre><ol start="3"><li>在markdown中，像写代码块一样写图表<br><img src="//img.saodiyang.com/FuBTJvG5xIOIcKZPnO9UX5GCwthK.png"></li></ol><h2 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h2><p>以下示例源码可以在这边查看 <a href="https://github.com/yelog/blog/blob/master/source/_posts/tools/3-hexo%E6%94%AF%E6%8C%81mermaid%E5%9B%BE%E8%A1%A8.md">本文源码</a><br>更多示例可以查看官网：<a href="https://mermaidjs.github.io/">https://mermaidjs.github.io</a></p><h3 id="1-flowchart"><a href="#1-flowchart" class="headerlink" title="1. flowchart"></a>1. flowchart</h3><pre class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</pre><pre class="mermaid">graph TB    c1-->a2    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end</pre><h3 id="2-Sequence-diagrams"><a href="#2-Sequence-diagrams" class="headerlink" title="2.Sequence diagrams"></a>2.Sequence diagrams</h3><pre class="mermaid">sequenceDiagram    participant Alice    participant Bob    Alice->>John: Hello John, how are you?    loop Healthcheck        John->>John: Fight against hypochondria    end    Note right of John: Rational thoughts <br/>prevail!    John-->>Alice: Great!    John->>Bob: How about you?    Bob-->>John: Jolly good!</pre><h3 id="3-Class-diagrams"><a href="#3-Class-diagrams" class="headerlink" title="3.Class diagrams"></a>3.Class diagrams</h3><pre class="mermaid">classDiagram     Animal <|-- Duck     Animal <|-- Fish     Animal <|-- Zebra     Animal : +int age     Animal : +String gender     Animal: +isMammal()     Animal: +mate()     class Duck{         +String beakColor         +swim()         +quack()     }     class Fish{         -int sizeInFeet         -canEat()     }     class Zebra{         +bool is_wild         +run()     }</pre><h3 id="4-State-diagrams"><a href="#4-State-diagrams" class="headerlink" title="4.State diagrams"></a>4.State diagrams</h3><pre class="mermaid">stateDiagram       [*] --> Active       state Active {           [*] --> NumLockOff           NumLockOff --> NumLockOn : EvNumLockPressed           NumLockOn --> NumLockOff : EvNumLockPressed           --           [*] --> CapsLockOff           CapsLockOff --> CapsLockOn : EvCapsLockPressed           CapsLockOn --> CapsLockOff : EvCapsLockPressed           --           [*] --> ScrollLockOff           ScrollLockOff --> ScrollLockOn : EvCapsLockPressed           ScrollLockOn --> ScrollLockOff : EvCapsLockPressed       }</pre><h3 id="5-Gantt-diagrams"><a href="#5-Gantt-diagrams" class="headerlink" title="5.Gantt diagrams"></a>5.Gantt diagrams</h3><pre class="mermaid">gantt       dateFormat  YYYY-MM-DD       title Adding GANTT diagram functionality to mermaid       section A section       Completed task            :done,    des1, 2014-01-06,2014-01-08       Active task               :active,  des2, 2014-01-09, 3d       Future task               :         des3, after des2, 5d       Future task2              :         des4, after des3, 5d       section Critical tasks       Completed task in the critical line :crit, done, 2014-01-06,24h       Implement parser and jison          :crit, done, after des1, 2d       Create tests for parser             :crit, active, 3d       Future task in critical line        :crit, 5d       Create tests for renderer           :2d       Add to mermaid                      :1d       section Documentation       Describe gantt syntax               :active, a1, after des1, 3d       Add gantt diagram to demo page      :after a1  , 20h       Add another diagram to demo page    :doc1, after a1  , 48h       section Last section       Describe gantt syntax               :after doc1, 3d       Add gantt diagram to demo page      :20h       Add another diagram to demo page    :48h</pre><h3 id="6-Pie-chart-diagrams"><a href="#6-Pie-chart-diagrams" class="headerlink" title="6.Pie chart diagrams"></a>6.Pie chart diagrams</h3><pre class="mermaid">pie    "Dogs" : 386    "Cats" : 85    "Rats" : 15</pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo 添加音乐插件</title>
      <link href="/2019/10/08/3-hexo-add-music/"/>
      <url>/2019/10/08/3-hexo-add-music/</url>
      
        <content type="html"><![CDATA[<h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><h3 id="1-复制网易云音乐插件代码"><a href="#1-复制网易云音乐插件代码" class="headerlink" title="1. 复制网易云音乐插件代码"></a>1. 复制网易云音乐插件代码</h3><p>前往<a href="https://music.163.com/">网易云音乐官网</a>，搜索一个作为背景音乐的歌曲，并进入播放页面，点击 <strong>生成外链播放器</strong><br><img src="https://i.loli.net/2019/10/08/RgSUj1i8vXNk5IP.png" alt="生成外链播放器"></p><p>设置好想要显示的样式后，复制 html 代码</p><p><img src="https://i.loli.net/2019/10/08/rbHRZEoB4mzip75.png"></p><p>最好外层在加一个 <code>div</code>，如下，可直接将上一步复制的 <code>iframe</code> 替换下方里面的 <code>iframe</code></p><pre><code class="html">&lt;div id=&quot;musicMouseDrag&quot; style=&quot;position:fixed; z-index: 9999; bottom: 0; right: 0;&quot;&gt;    &lt;div id=&quot;musicDragArea&quot; style=&quot;position: absolute; top: 0; left: 0; width: 100%;height: 10px;cursor: move; z-index: 10;&quot;&gt;&lt;/div&gt;    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38592976&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;</code></pre><h3 id="2-将插件引入到主题中"><a href="#2-将插件引入到主题中" class="headerlink" title="2. 将插件引入到主题中"></a>2. 将插件引入到主题中</h3><p>将上一步加过 <code>div</code> 的代码粘贴到主题下 <code>layout/_partial/footer.ejs</code> 的最后面<br><img src="https://i.loli.net/2019/10/08/FRJOKxLECcvinmf.png" alt="效果"></p><h3 id="3-调整位置"><a href="#3-调整位置" class="headerlink" title="3. 调整位置"></a>3. 调整位置</h3><p>默认给的样式是显示在右下角，可以通过调整上一步粘贴的 <code>div</code> 的 <code>style</code> 中 <code>bottom</code> 和 <code>right</code> 来调整位置。</p><h3 id="4-自由拖动"><a href="#4-自由拖动" class="headerlink" title="4. 自由拖动"></a>4. 自由拖动</h3><p>如果需要自由拖动，在刚才添加的代码后面，再添加下面代码即可，鼠标就可以在音乐控件的 <strong>上边沿</strong> 点击拖动</p><pre><code class="html">&lt;!--以下代码是为了支持随时拖动音乐控件的位置，如没有需求，可去掉下面代码--&gt;&lt;script&gt;    var $DOC = $(document)    $(&#39;#musicMouseDrag&#39;).on(&#39;mousedown&#39;, function (e) &#123;      // 阻止文本选中      $DOC.bind(&quot;selectstart&quot;, function () &#123;        return false;      &#125;);      $(&#39;#musicDragArea&#39;).css(&#39;height&#39;, &#39;100%&#39;);      var $moveTarget = $(&#39;#musicMouseDrag&#39;);      $moveTarget.css(&#39;border&#39;, &#39;1px dashed grey&#39;)      var div_x = e.pageX - $moveTarget.offset().left;      var div_y = e.pageY - $moveTarget.offset().top;      $DOC.on(&#39;mousemove&#39;, function (e) &#123;        var targetX = e.pageX - div_x;        var targetY = e.pageY - div_y;        targetX = targetX &lt; 0 ? 0 : (targetX + $moveTarget.outerWidth() &gt;= window.innerWidth) ? window.innerWidth - $moveTarget.outerWidth() : targetX;        targetY = targetY &lt; 0 ? 0 : (targetY + $moveTarget.outerHeight() &gt;= window.innerHeight) ? window.innerHeight - $moveTarget.outerHeight() : targetY;        $moveTarget.css(&#123;&#39;left&#39;: targetX + &#39;px&#39;, &#39;top&#39;: targetY + &#39;px&#39;, &#39;bottom&#39;: &#39;inherit&#39;, &#39;right&#39;: &#39;inherit&#39;&#125;)      &#125;).on(&#39;mouseup&#39;, function () &#123;        $DOC.unbind(&quot;selectstart&quot;);        $DOC.off(&#39;mousemove&#39;)        $DOC.off(&#39;mouseup&#39;)        $moveTarget.css(&#39;border&#39;, &#39;none&#39;)        $(&#39;#musicDragArea&#39;).css(&#39;height&#39;, &#39;10px&#39;);      &#125;)    &#125;)&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo支持jsfiddle渲染</title>
      <link href="/2019/09/24/3-hexo-jsfiddle/"/>
      <url>/2019/09/24/3-hexo-jsfiddle/</url>
      
        <content type="html"><![CDATA[<h3 id="1-canvas-粒子效果"><a href="#1-canvas-粒子效果" class="headerlink" title="1. canvas 粒子效果"></a>1. canvas 粒子效果</h3><script async src="//jsfiddle.net/yelog/eqc7zdLo/embed/result,js,html,css/"></script><h3 id="2-复选框动画"><a href="#2-复选框动画" class="headerlink" title="2. 复选框动画"></a>2. 复选框动画</h3><script async src="//jsfiddle.net/yelog/5g9jf31t/1/embed/result,html,css/"></script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo文章内toc生成</title>
      <link href="/2019/09/24/3-hexo-toc/"/>
      <url>/2019/09/24/3-hexo-toc/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h2 id="1-如何使用"><a href="#1-如何使用" class="headerlink" title="1. 如何使用"></a>1. 如何使用</h2><h3 id="1-1-关键字"><a href="#1-1-关键字" class="headerlink" title="1.1 关键字"></a>1.1 关键字</h3><p>只要在在文章中使用如下关键字，不区分大小写，便可以在相应位置显示目录导航，效果文章开头<br><img src="https://i.loli.net/2020/05/23/Zq9jCWfwxNBpcOm.png" alt="toc"></p><h3 id="1-2-小标题2jlksjdflksdjflksjdflksjdflkaj-sdfjka-lskdjfla-skjdf-lajsdflkjal-sdjkf-laskjdf"><a href="#1-2-小标题2jlksjdflksdjflksjdflksjdflkaj-sdfjka-lskdjfla-skjdf-lajsdflkjal-sdjkf-laskjdf" class="headerlink" title="1.2 小标题2jlksjdflksdjflksjdflksjdflkaj;sdfjka;lskdjfla;skjdf;lajsdflkjal;sdjkf;laskjdf"></a>1.2 小标题2jlksjdflksdjflksjdflksjdflkaj;sdfjka;lskdjfla;skjdf;lajsdflkjal;sdjkf;laskjdf</h3><p>占位<br>占位</p><h4 id="1-3-小标题"><a href="#1-3-小标题" class="headerlink" title="1.3 小标题"></a>1.3 小标题</h4><p>占位<br>占位<br>占位</p><h2 id="2-标题二"><a href="#2-标题二" class="headerlink" title="2. 标题二"></a>2. 标题二</h2><p>占位<br><br>占位<br><br>占位<br></p><h3 id="2-1-小标题"><a href="#2-1-小标题" class="headerlink" title="2.1 小标题"></a>2.1 小标题</h3><p>占位<br><br>占位<br></p><h3 id="2-2-小标题2"><a href="#2-2-小标题2" class="headerlink" title="2.2 小标题2"></a>2.2 小标题2</h3><p>占位<br><br>占位<br><br>占位<br><br>占位<br><br>占位<br></p><h2 id="文末"><a href="#文末" class="headerlink" title="文末"></a>文末</h2><p>占位<br><br>占位<br><br>占位<br><br>占位<br><br>占位<br></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[记]《知识分子的不幸》-王小波</title>
      <link href="/2019/06/09/misfortune-intellectual/"/>
      <url>/2019/06/09/misfortune-intellectual/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章发表于1996年第二期《东方》杂志，同样收录于《沉默的大多数》一书中。</p><h2 id="所想"><a href="#所想" class="headerlink" title="所想"></a>所想</h2><p>文章一开头就抛出了一个问题：什么是知识分子最害怕的事？想起了高晓松在晓说中提到过这个问题，晓松肯定是看过这篇文章的。</p><p>王小波说：“<strong>知识分子最怕活在不理智的年代。”所谓不理智的年代，就是伽利略低头认罪，承认地球不转的年代，也是拉瓦斯上断头台的年代；是茨威格服毒自杀的年代，也是老舍跳太平湖的年代。</strong>“</p><p>王小波和他的美国老师谈论了一个问题：”有信仰比无信仰要好。“，由于王小波是经历过文革的，所以王小波一开始是抵触这种思想的，尤其是 <strong>课间祷告 <strong>让王小波想起了文革中的 <strong>早请示</strong>。但老师最终说服了他，“</strong>不管是信神，还是自珍自重，人活在世界上总得有点信念才成。就我个人而言，虽是无神论者，我也有个人操守，从不逾越。</strong>”</p><p>国内的学者，只搞学术研究，不搞意识形态，这由不了自己。有朝一日它成了意识形态，你的话就是罪状。言论不自由，不理智，民族狂热，这不就是知识分子最怕的事情吗？</p><p>王小波崇拜墨子：其一，他思维缜密，其二，他敢赤裸裸地谈利害。（有了他，我也敢说自己是中华民族的赤诚分子，不怕国学家说我是全盘西化了。）</p><p>营造意识形态则是灭绝思想额丰饶。中国的人文知识分子，有种以天下为己任的使命感，总觉得自己该搞出些老百姓当信仰的东西。</p><p>国学，这种东西实在厉害。最可怕之处就在于那个“国”字。顶着这个字，谁敢有不同意见？抢到了这个制高点，就可以压制一切不同意见；所以很容易落入思想流氓的手中变成一种凶器。</p><p>目前正值 “<strong>中美贸易战</strong>”，各种自媒体为了点击量、关注度。煽动民族狂热情绪，导致民众根本容不得半点不同意见，不讲道理，“盲目爱国“。</p><p>认真思索，真诚的明辨是非，有这种态度大概就可算是善良了吧。</p><p>人活在世上，自会形成信念，一种学问、一本书，假如不对我的价值观发生变化，就不值得一学，不值得一看。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人们在一本叫《活着》的书中纷纷死去</title>
      <link href="/2019/05/02/to-live/"/>
      <url>/2019/05/02/to-live/</url>
      
        <content type="html"><![CDATA[<p>有那么一个年代，离我们很近，它腥风血雨，连活着都是一件奢侈的事。</p><p>在富贵的一生中，每次出现看似被上天眷顾的福气后（如有庆长跑第一、凤霞嫁了人并怀了孩子），读者还在替富贵开心的时候，他们却以各种方式迅速死去，最终富贵亲手埋葬了他所有的亲人。</p><p>一本 12w 左右的小说，但是在没有华丽词藻的情况下，在顺畅流利的写作手法、跌宕起伏的剧情、第一人称的代入感下一口气读完了。期间多次痛哭流涕（一点儿没夸张），不得不放下书本，洗过脸后才能继续阅读。所以已经多年没写书评的我，还是忍不住为她写下书评。</p><blockquote><p>人是为了活着本身而活着，而不是为了活着之外的任何事物所活着。</p></blockquote><p>这是作者在中文序言中的一句话，在当今生活着的我，初读序言中的这句话，并无任何共鸣，甚至还行吐槽两句。随着富贵将他的”一生”娓娓道来，你就会明白在那样的时代背景下，活着已经是一件不容易的事。 所以作者在日文版序言中说到：</p><blockquote><p>在旁人眼中富贵的一生是苦熬的一生；可是对于富贵自己，我相信他更多地感受到了幸福。</p></blockquote><p>因为他相信自己的妻子是世上最好的妻子，他相信自己的子女也是世上最好的子女，还有他的女婿他的外孙，还有他的那头也叫富贵的牛，还有一起上火锅的朋友们，还有生活的点点滴滴……</p><p>富贵的真是一路跌下去的一生，从”富家少爷”赌光了家产、气死了爹爹。由于母亲生病，为母亲求医路上被国民党抓壮丁，被俘虏后，放回家中。却发现母亲已死，女儿也由于生病变成了聋哑人。本想着大难之后必有后福，却只是悲惨一生的开端。儿子有庆由于和县长夫人血型匹配，遭抽血而亡、女儿凤霞产子大出血而亡、妻子家珍失去儿女后，失去了最后与病魔争斗的信念，也走了、女婿二喜在工地被水泥板拍死、外孙苦根难得吃到豆子，却被豆子撑死。最后只剩下自己和一个也叫作富贵的老牛。</p><p>春生想自杀前，找到富贵告别，在被家珍原谅，并答应不会自杀，在这种情况下坚持了一个月，最终还是自杀了。那种时代背景下的无奈，那种窒息感。。。</p><p>富贵的一生跨越了地主、解放战争、人民公社运动、大炼钢铁、自然灾害和文化大革命，从一个人的视角看到每个时代下的一个小小的缩影，但却比任何其他的描述更让人深刻了解到这些时代背景下人们的生活状态。</p><p>在那时，活着不仅是幸运，也更需要勇气。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1556806574463&di=868e65579acfc800020db78de3c07ac4&imgtype=0&src=http://s1.sinaimg.cn/large/001Pe7mxzy76VARpXvdc3"></p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
            <tag> 活着 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell速查表</title>
      <link href="/2018/09/08/shell-command/"/>
      <url>/2018/09/08/shell-command/</url>
      
        <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><pre><code class="bash">#!/bin/bashmsg=&quot;hello world&quot;echo $msg</code></pre><blockquote><p><strong>变量名的命名须遵循如下规则：</strong></p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul></blockquote><h2 id="2-传参"><a href="#2-传参" class="headerlink" title="2. 传参"></a>2. 传参</h2><pre><code class="bash">#!/bin/bashecho &quot;执行的文件名：$0&quot;;echo &quot;第一个参数为：$1&quot;;echo &quot;第二个参数为：$2&quot;;echo &quot;第三个参数为：$3&quot;;</code></pre><blockquote><p><strong>脚本内获取参数的格式为：</strong><br>$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……<br><strong>另外，还有几个特殊字符用来处理参数：</strong></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>$#</code></td><td>传递到脚本的参数个数</td></tr><tr><td><code>$*</code></td><td>以一个单字符串显示所有向脚本传递的参数。<br>如<code>&quot;$*&quot;</code>用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td><code>$$</code></td><td>脚本运行的当前进程ID号</td></tr><tr><td><code>$!</code></td><td>后台运行的最后一个进程的ID号</td></tr><tr><td><code>$@</code></td><td>与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数。<br>如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td><code>$-</code></td><td>显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td><code>$?</code></td><td>显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table></blockquote><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h2><pre><code class="bash">#!/bin/bashmy_array=(A B &quot;C&quot; D)echo &quot;第一个元素为: $&#123;my_array[0]&#125;&quot;echo &quot;第二个元素为: $&#123;my_array[1]&#125;&quot;echo &quot;第三个元素为: $&#123;my_array[2]&#125;&quot;echo &quot;第四个元素为: $&#123;my_array[3]&#125;&quot;echo &quot;数组的元素为: $&#123;my_array[*]&#125;&quot;echo &quot;数组的元素为: $&#123;my_array[@]&#125;&quot;echo &quot;数组元素个数为: $&#123;#my_array[*]&#125;&quot;echo &quot;数组元素个数为: $&#123;#my_array[@]&#125;&quot;</code></pre><p>执行结果如下：</p><pre><code class="yml">第一个元素为: A第二个元素为: B第三个元素为: C第四个元素为: D数组的元素为: A B C D数组的元素为: A B C D数组元素个数为: 4数组元素个数为: 4</code></pre><h2 id="4-基本运算符"><a href="#4-基本运算符" class="headerlink" title="4. 基本运算符"></a>4. 基本运算符</h2><blockquote><p>原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p></blockquote><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><h3 id="①-算数运算符"><a href="#①-算数运算符" class="headerlink" title="① 算数运算符"></a>① 算数运算符</h3><pre><code class="bash">#!/bin/bashecho &quot;2加2等于&quot;`expr 2 + 2`echo &quot;2减2等于&quot;`expr 2 - 2`echo &quot;2乘2等于&quot;`expr 2 \* 2`echo &quot;2除2等于&quot;`expr 2 / 2`echo &quot;2除2取余&quot;`expr 2 % 2`</code></pre><h3 id="②-关系运算符"><a href="#②-关系运算符" class="headerlink" title="② 关系运算符"></a>② 关系运算符</h3><pre><code class="bash">#!/bin/basha=10b=20if [ $a -eq $b ] # 检测两个数是否相等，相等返回 true。if [ $a -ne $b ] # 检测两个数是否不相等，不相等返回 true。if [ $a -gt $b ] # 检测左边的数是否大于右边的，如果是，则返回 true。if [ $a -lt $b ] # 检测左边的数是否小于右边的，如果是，则返回 true。if [ $a -ge $b ] # 检测左边的数是否大于等于右边的，如果是，则返回 true。if [ $a -le $b ] # 检测左边的数是否小于等于右边的，如果是，则返回 true。</code></pre><h3 id="③-布尔运算符"><a href="#③-布尔运算符" class="headerlink" title="③ 布尔运算符"></a>③ 布尔运算符</h3><pre><code class="bash">#!/bin/bashif [ ! false ]       # 非运算，返回 trueif [ true -o false ] # 或运算，返回 trueif [ true -a false ] # 与运算，返回 false</code></pre><h3 id="④-逻辑运算符"><a href="#④-逻辑运算符" class="headerlink" title="④ 逻辑运算符"></a>④ 逻辑运算符</h3><pre><code class="bash">#!/bin/basha=10b=20if [[ $a -lt $b &amp;&amp; $a -gt $b ]]   # 逻辑的 AND, 返回 falseif [ $a -lt $b ] &amp;&amp; [ $a -gt $b ] # 逻辑的 AND, 返回 falseif [[ $a -lt $b || $a -gt $b ]]   # 逻辑的 OR, 返回 trueif [ $a -lt $b ] || [ $a -gt $b ] # 逻辑的 OR, 返回 true</code></pre><h3 id="⑤-字符串运算符"><a href="#⑤-字符串运算符" class="headerlink" title="⑤ 字符串运算符"></a>⑤ 字符串运算符</h3><pre><code class="bash">#!/bin/basha=&quot;abc&quot;b=&quot;efg&quot;if [ $a = $b ]   # 检测两个字符串是否相等，相等返回 true。if [ $a != $b ]  # 检测两个字符串是否相等，不相等返回 true。if [ -z $a ]     # 检测字符串长度是否为0，为0返回 true。if [ -n &quot;$a&quot; ]   # 检测字符串长度是否为0，不为0返回 true。if [ $a ]        # 检测字符串是否为空，不为空返回 true。</code></pre><h3 id="⑥-文件测试运算符"><a href="#⑥-文件测试运算符" class="headerlink" title="⑥ 文件测试运算符"></a>⑥ 文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td></tr></tbody></table><h2 id="5-echo"><a href="#5-echo" class="headerlink" title="5. echo"></a>5. echo</h2><h3 id="①-命令格式"><a href="#①-命令格式" class="headerlink" title="① 命令格式"></a>① 命令格式</h3><pre><code class="bash">#!/bin/bashecho &quot;It is a test&quot;echo It is a testecho &quot;\&quot;It is a test\&quot;&quot;      # 转义name=Chrisecho &quot;$name is handsome&quot;echo -e &quot;OK! \n&quot;             # 显示换行 -e 开启转义echo &quot;It is a test&quot; &gt; myfile # 显示结果定向至文件echo &#39;$name\&quot;&#39;               # 原样输入字符串，不进行转义或取变量（使用单引号）echo `date`                  # 显示命令执行结构</code></pre><h3 id="②-颜色显示"><a href="#②-颜色显示" class="headerlink" title="② 颜色显示"></a>② 颜色显示</h3><pre><code class="bash">echo -e &quot;\033[字背景颜色；文字颜色m字符串\033[0m&quot;echo -e “\033[30m 黑色字 \033[0m”echo -e “\033[31m 红色字 \033[0m”echo -e “\033[32m 绿色字 \033[0m”echo -e “\033[33m 黄色字 \033[0m”echo -e “\033[34m 蓝色字 \033[0m”echo -e “\033[35m 紫色字 \033[0m”echo -e “\033[36m 天蓝字 \033[0m”echo -e “\033[37m 白色字 \033[0m”echo -e “\033[40;37m 黑底白字 \033[0m”echo -e “\033[41;37m 红底白字 \033[0m”echo -e “\033[42;37m 绿底白字 \033[0m”echo -e “\033[43;37m 黄底白字 \033[0m”echo -e “\033[44;37m 蓝底白字 \033[0m”echo -e “\033[45;37m 紫底白字 \033[0m”echo -e “\033[46;37m 天蓝底白字 \033[0m”echo -e “\033[47;30m 白底黑字 \033[0m”\33[0m 关闭所有属性\33[1m 设置高亮度\33[4m 下划线\33[5m 闪烁\33[7m 反显\33[8m 消隐\33[30m — \33[37m 设置前景色\33[40m — \33[47m 设置背景色\33[nA 光标上移n行\33[nB 光标下移n行\33[nC 光标右移n行\33[nD 光标左移n行\33[y;xH设置光标位置\33[2J 清屏\33[K 清除从光标到行尾的内容\33[s 保存光标位置\33[u 恢复光标位置\33[?25l 隐藏光标\33[?25h 显示光标</code></pre><h2 id="6-sprintf"><a href="#6-sprintf" class="headerlink" title="6. sprintf"></a>6. sprintf</h2><pre><code class="bash">#!/bin/bashprintf &quot;%-10s %-8s %-4s\n&quot; 姓名 性别 体重kg  printf &quot;%-10s %-8s %-4.2f\n&quot; 郭靖 男 66.1234printf &quot;%-10s %-8s %-4.2f\n&quot; 杨过 男 48.6543printf &quot;%-10s %-8s %-4.2f\n&quot; 郭芙 女 47.9876</code></pre><p>结果：</p><pre><code>姓名     性别   体重kg郭靖     男      66.12杨过     男      48.65郭芙     女      47.99</code></pre><blockquote><p><code>%s %c %d %f</code> 都是格式替代符<br><code>d</code>: Decimal 十进制整数 – 对应位置参数必须是十进制整数，否则报错！<br><code>s</code>: String 字符串 – 对应位置参数必须是字符串或者字符型，否则报错！<br><code>c</code>: Char 字符 – 对应位置参数必须是字符串或者字符型，否则报错！<br><code>f</code>: Float 浮点 – 对应位置参数必须是数字型，否则报错！<br><code>%-10s</code> 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐）,任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。<br><code>%-4.2f</code> 指格式化为小数，其中.2指保留2位小数。</p></blockquote><h2 id="7-test"><a href="#7-test" class="headerlink" title="7. test"></a>7. test</h2><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><pre><code class="bash">#!/bin/bashnum1=100num2=100if test $[num1] -eq $[num2]</code></pre><h2 id="8-流程控制"><a href="#8-流程控制" class="headerlink" title="8. 流程控制"></a>8. 流程控制</h2><h3 id="①-if-else"><a href="#①-if-else" class="headerlink" title="① if-else"></a>① if-else</h3><pre><code class="bash">#!/bin/basha=10b=20if [ $a == $b ]then   echo &quot;a 等于 b&quot;elif [ $a -gt $b ]then   echo &quot;a 大于 b&quot;elif [ $a -lt $b ]then   echo &quot;a 小于 b&quot;else   echo &quot;没有符合的条件&quot;fi# 判断数组为空时list=()if [ $&#123;#list[@]&#125; == 0 ]then  echo &quot;数组为空&quot;else  echo &quot;数组不为空&quot;fi</code></pre><h3 id="②-for"><a href="#②-for" class="headerlink" title="② for"></a>② for</h3><pre><code class="bash">#!/bin/bashfor loop in 1 2 3 4 5do    echo &quot;The value is: $loop&quot;done</code></pre><h3 id="③-while"><a href="#③-while" class="headerlink" title="③ while"></a>③ while</h3><pre><code class="bash">#!/bin/bashint=1while(( $int&lt;=5 ))do    echo $int    let &quot;int++&quot;done</code></pre><h3 id="④-case"><a href="#④-case" class="headerlink" title="④ case"></a>④ case</h3><pre><code class="bash">#!/bin/bashecho &#39;输入 1 到 4 之间的数字:&#39;echo &#39;你输入的数字为:&#39;read aNumcase $aNum in    1)  echo &#39;你选择了 1&#39;    ;;    2)  echo &#39;你选择了 2&#39;    ;;    3)  echo &#39;你选择了 3&#39;    ;;    4)  echo &#39;你选择了 4&#39;    ;;    *)  echo &#39;你没有输入 1 到 4 之间的数字&#39;    ;;esac</code></pre><h3 id="⑤-break"><a href="#⑤-break" class="headerlink" title="⑤ break"></a>⑤ break</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><pre><code class="bash">#!/bin/bashwhile :do    echo -n &quot;输入 1 到 5 之间的数字:&quot;    read aNum    case $aNum in        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;        ;;        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;            break        ;;    esacdone</code></pre><h3 id="⑥-continue"><a href="#⑥-continue" class="headerlink" title="⑥ continue"></a>⑥ continue</h3><p>跳出当前循环。</p><pre><code class="bash">#!/bin/bashwhile :do    echo -n &quot;输入 1 到 5 之间的数字: &quot;    read aNum    case $aNum in        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;        ;;        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;            continue            echo &quot;游戏结束&quot;        ;;    esacdone</code></pre><h3 id="⑦-until"><a href="#⑦-until" class="headerlink" title="⑦ until"></a>⑦ until</h3><pre><code class="bash">#!/bin/basha=0until [ ! $a -lt 10 ]do   echo $a   a=`expr $a + 1`done</code></pre><h2 id="9-函数"><a href="#9-函数" class="headerlink" title="9. 函数"></a>9. 函数</h2><pre><code class="bash">#!/bin/bashfunWithParam()&#123;    echo &quot;第一个参数为 $1 !&quot;    echo &quot;第二个参数为 $2 !&quot;    echo &quot;第十个参数为 $10 !&quot;    echo &quot;第十个参数为 $&#123;10&#125; !&quot;    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;    echo &quot;参数总数有 $# 个!&quot;    echo &quot;作为一个字符串输出所有参数 $* !&quot;&#125;funWithParam 1 2 3 4 5 6 7 8 9 34 73</code></pre><p>结果：</p><pre><code>第一个参数为 1 !第二个参数为 2 !第十个参数为 10 !第十个参数为 34 !第十一个参数为 73 !参数总数有 11 个!作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</code></pre><h2 id="10-输入输出"><a href="#10-输入输出" class="headerlink" title="10. 输入输出"></a>10. 输入输出</h2><pre><code class="bash">#!/bin/bashwho &gt; today.log # 执行结果覆盖到文件 today.logecho &quot;菜鸟教程：www.runoob.com&quot; &gt;&gt; today.log # 执行结果追加到文件 today.logwc -l &lt; today.log # 统计 today.log 行数wc -l &lt;&lt; EOF    李白    苏轼    王勃EOF</code></pre><h2 id="11-文件包含"><a href="#11-文件包含" class="headerlink" title="11. 文件包含"></a>11. 文件包含</h2><p>test1.sh</p><pre><code class="bash">#!/bin/bashname=&quot;Chris&quot;</code></pre><p>test2.sh</p><pre><code class="bash">#!/bin/bash#使用 . 号来引用test1.sh 文件. ./test1.sh# 或者使用以下包含文件代码# source ./test1.shecho $name</code></pre><blockquote><p>注：被包含的文件 test1.sh 不需要可执行权限。</p></blockquote><h2 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h2><p>[1] <a href="http://www.runoob.com/linux/linux-shell.html">http://www.runoob.com/linux/linux-shell.html</a></p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><h2 id="统计代码行数"><a href="#统计代码行数" class="headerlink" title="统计代码行数"></a>统计代码行数</h2><pre><code class="bash">find . -type f | grep -v &#39;.git\|.idea\|target&#39; | xargs cat | wc -l</code></pre><h2 id="查询-data-docker-system-containers-下的-log-大小总和"><a href="#查询-data-docker-system-containers-下的-log-大小总和" class="headerlink" title="查询 &#x2F;data&#x2F;docker&#x2F;system&#x2F;containers 下的 log 大小总和"></a>查询 &#x2F;data&#x2F;docker&#x2F;system&#x2F;containers 下的 log 大小总和</h2><pre><code class="bash">find . -name &quot;*-json.log&quot; | xargs ls -l | awk &#39;&#123;print $5&#125;&#39; | awk &#39;&#123;sum+=$1&#125;END&#123;print sum&#125;&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx常用配置和命令</title>
      <link href="/2018/02/08/nginx-config-commands/"/>
      <url>/2018/02/08/nginx-config-commands/</url>
      
        <content type="html"><![CDATA[<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre><code class="bash"># 启动nginx [-c /path/to/nginx.conf]# 热更新配置nginx -s reload# 强制停止 nginx 服务nginx -s stoppkill nginxkill -9 pid# 优雅停止 nginx 服务, 等待请求结束后再停止nginx -s quit# 帮助nginx -h# 查看 nginx 版本nginx -v# 查看配置文件的正确性nginx -t# 粗诶配置文件, 并显示文件内容nginx -T# 测试配置文件, 但只显示错误信息nginx -q</code></pre><h2 id="解析示例"><a href="#解析示例" class="headerlink" title="解析示例"></a>解析示例</h2><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><pre><code class="yaml">location / &#123;    root /data/layui-soul-table/docs;&#125;</code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><pre><code class="yaml"> server &#123;        listen       80 default_server;        listen       [::]:80 default_server;        server_name  saodiyang.com;        root         /usr/share/nginx/html;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        location / &#123;                root /data/layui-soul-table/docs;        &#125;        location /layui-soul-table-java/ &#123;                proxy_pass http://127.0.0.1:8080/;                proxy_connect_timeout 600s;                proxy_send_timeout 600s;                proxy_read_timeout 600s;                proxy_set_header X-Real-IP $remote_addr;                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        &#125;        error_page 404 /404.html;                location = /40x.html &#123;        &#125;        error_page 500 502 503 504 /50x.html;                location = /50x.html &#123;        &#125;&#125;</code></pre><h2 id="启用https"><a href="#启用https" class="headerlink" title="启用https"></a>启用https</h2><h3 id="1-购买免费证书"><a href="#1-购买免费证书" class="headerlink" title="1.购买免费证书"></a>1.购买免费证书</h3><p>登录阿里云 -&gt; 控制台 -&gt; 安全（云盾） -&gt; CA证书服务 -&gt; 购买证书<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fr8xZ-Z1ylYPcoN1PCTk_5SDm6TM.png" alt="购买免费证书"></p><h3 id="2-补全证书信息"><a href="#2-补全证书信息" class="headerlink" title="2.补全证书信息"></a>2.补全证书信息</h3><p>点击补全，绑定域名</p><h3 id="3-下载并配置"><a href="#3-下载并配置" class="headerlink" title="3.下载并配置"></a>3.下载并配置</h3><p>选择下载 证书for nginx<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FnMUOU4IZY2ZbMZcqggp4v7JHtej.png" alt="下载证书"></p><p>上面这个页面有相关的配置信息，下面简单介绍：</p><p>① 将下载文件中的 <code>*.pem</code>、<code>*.key</code>, 拷贝到 nginx 目录下 的 <code>cert</code> , 当然也可以是其他目录<br>② 修改 <code>nginx.conf</code></p><pre><code class="conf">server &#123;      listen       443 ssl;      server_name  xiangzhangshugongyi.com;      ssl_certificate      cert/214487958220243.pem;      ssl_certificate_key  cert/214487958220243.key;      ssl_session_cache    shared:SSL:1m;      ssl_session_timeout  5m;      ssl_ciphers  HIGH:!aNULL:!MD5;      ssl_prefer_server_ciphers  on;      location / &#123;          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;          proxy_set_header Host $http_host;          proxy_set_header X-Forwarded-Proto https;          proxy_redirect off;          proxy_connect_timeout      240;          proxy_send_timeout         240;          proxy_read_timeout         240;          # note, there is not SSL here! plain HTTP is used          proxy_pass http://127.0.0.1:8080;      &#125;  &#125;</code></pre><p>③ 重启 nginx，通过 证书绑定域名进行 https 访问到 服务器跑在 8080 的服务<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FtTXB9QIYoZOlPFKsGg-ImxbL58N.png" alt="通过https访问"></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac神器-BTT(BetterTouchTool)不完全教程</title>
      <link href="/2017/12/13/Mac-BetterTouchTool/"/>
      <url>/2017/12/13/Mac-BetterTouchTool/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fm6s-GR0yVJgdndJwftdj9eXL7LB.png" alt="BetterTouchTool"><br>BetterTouchTool 是一款专为Mac用户开发的 窗口管理&#x2F;<code>Trackpad</code>(触控板)&#x2F;<code>Magic Mouse</code>(苹果鼠标)&#x2F;<code>Keyboard</code>(键盘)&#x2F;<code>TouchBar</code> 功能增强制作的软件。</p><p>这款软件不但可以设置全局的 手势&#x2F;快捷键&#x2F;TouchBar ，还可以给不同的应用定义不同的姿势，再配合上 Alfred 的 workflow，简直各种高难度姿势都能玩的出来。</p><p>本文主要介绍以下功能：</p><ol><li>窗口管理</li><li>帮 Trackpad 定义各种姿势</li><li>帮 Magic Mouse 定义各种姿势</li><li>帮 Keyboard 定义各种姿势</li><li>帮任何应用自定义 TouchBar</li></ol><p><em>本文以 macbook pro 2017 touchbar 版为例</em></p><h2 id="1-窗口管理"><a href="#1-窗口管理" class="headerlink" title="1. 窗口管理"></a>1. 窗口管理</h2><p>这个功能无需过多配置，默认配置即可很好使用（和windows的理念相似）</p><ul><li>将窗口移到左右边缘，最大化至半屏</li><li>将窗口移到上边缘，最大化至全屏</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/lhfTY9ysdWOzOOKprnh0X6MTfoT8.gif" alt="窗口管理"><br>如果对默认配置不满意，也可以在如下图所示的位置来调整窗口展示：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FkluTBqX_n2UXj2ICsOE1tW1yFan.png" alt="窗口管理配置"></p><h2 id="2-帮-Trackpad-定义各种姿势"><a href="#2-帮-Trackpad-定义各种姿势" class="headerlink" title="2. 帮 Trackpad 定义各种姿势"></a>2. 帮 Trackpad 定义各种姿势</h2><h3 id="姿势选择"><a href="#姿势选择" class="headerlink" title="姿势选择"></a>姿势选择</h3><p>在界面选择 Trackpad（触摸板） -&gt; Add New Gesture（添加一个新姿势）</p><p>左边可以选择生效的范围：全局或者某个应用</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FsPEIn9TlNOwHkWHgyD32snaT7bY.jpg" alt="选择触摸板姿势"><br>如上图所示，姿势包括但不限于如：</p><ol><li>单指：左下角单击、单指轻拍右上角、单指轻拍上边中点</li><li>双指：两个手指捏、张开两指以两指中心为圆轴逆时针、中指拍住中央食指轻拍面板、双指从上边缘下滑</li><li>三指：三指轻拍、三指拍顶端、三指点击并向上滑、两指轻拍住，拍左、右二指固定拍住，左一下滑</li><li>四指：四指双轻拍、中指无名小拍住，食单击、食中指无名拍住，小单击</li><li>五指：五手指轻拍、五手指上滑</li></ol><p>上面只是列一些典型，更多姿势可以在上图中浏览。</p><h3 id="绑定功能"><a href="#绑定功能" class="headerlink" title="绑定功能"></a>绑定功能</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FjNWJgoefc34vGaUhruvWQr2R--5.png" alt="定义姿势功能"></p><p>选择过姿势之后，也可以选择在按住某个功能键的时候才能使用（左下角）。</p><p>右边是绑定功能：快捷键或动作。</p><ul><li><p>绑定快捷键举例：<br>比如 给chrome 设置 姿势（两指从触控板下边缘滑入），弹出开发者模式（快捷键绑定：command+option+i），如下图：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fnuaa2qtpdf28autM22l3RPRtCau.jpg" alt="给chrome设置姿势，弹出开发者模式"></p></li><li><p>绑定动作举例：<br>设置 在任何应用内，五指下滑 锁屏，如下图<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FuTHBQJRvDVem9c14G608eXKtR7R.png" alt="五指下滑锁屏"></p></li></ul><h2 id="3-帮-Magic-Mouse-定义各种姿势"><a href="#3-帮-Magic-Mouse-定义各种姿势" class="headerlink" title="3. 帮 Magic Mouse 定义各种姿势"></a>3. 帮 Magic Mouse 定义各种姿势</h2><p>这个功能设置和 Trackpad 设置 大同小异，所以这边就不多讲，直接图示几个功能。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FgwGsolKj59jVnOkgI5vb4zdxNwm.png" alt="两指上滑呼出Mission Control"></p><p>我快捷键设置了 option+E 鼠标取词翻译（欧陆词典），然后绑定到双指轻拍鼠标，即可触发翻译。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FsuJ3xU8k5ANQkuXdgpy0Xxkhdme.png" alt="双指轻拍-取词翻译"></p><h2 id="4-帮-Keyboard-定义各种姿势"><a href="#4-帮-Keyboard-定义各种姿势" class="headerlink" title="4. 帮 Keyboard 定义各种姿势"></a>4. 帮 Keyboard 定义各种姿势</h2><p>这个功能比较简单，设置一些 键盘快捷键或录制案件序列 来触发 一些动作或者其他快捷键功能。</p><h2 id="5-帮任何应用自定义-TouchBar"><a href="#5-帮任何应用自定义-TouchBar" class="headerlink" title="5. 帮任何应用自定义 TouchBar"></a>5. 帮任何应用自定义 TouchBar</h2><p>这个重磅功能，可以帮助不支持touchbar的软件定制 TouchBar，是不是有点厉害。</p><p>下面就以我给 IntelliJ IDEA 定制 TouchBar 为例 (没有F1 ~ F12 功能键，debug真的很痛苦，这个软件真的是雪中送炭)，展示一下使用效果</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fl0oSr-rNLr3f23_E_ZTlMEo46l1.png" alt="定制 TouchBar"></p><p>如上图所示，我给 IntelliJ IDEA 添加了 四个功能 step over&#x2F;step into&#x2F;resume&#x2F;evaluate</p><p>添加完之后，切到 IntelliJ IDEA 软件中时，TouchBar 就显示我们添加的四个功能键， 如下图所示<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fi4MOmPsZDPj0Z2UEUxOqCbeIV1o.png" alt="IntelliJ IDEA 定制 TouchBar"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>BTT还有其他很方便的功能，这盘就介绍到这里，等之后更新了 Alfred 的 workflow 开发指南之后，再一起更新一篇有意思的 BTT+Alfred 效率流。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> efficiency </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]谈谈Java中的语法糖</title>
      <link href="/2017/11/27/java-grammatical-sugar/"/>
      <url>/2017/11/27/java-grammatical-sugar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>语法糖（Syntactic Sugar），也称糖衣语法，指在计算机语言中添加的某种语法，这种语法对语言本身功能来说没有什么影响，只是为了方便程序员的开发，提高开发效率。说白了，语法糖就是对现有语法的一个封装。</p></blockquote><p>Java作为一种与平台无关的高级语言，当然也含有语法糖，这些语法糖并不被虚拟机所支持，在编译成字节码阶段就自动转换成简单常用语法。一般来说Java中的语法糖主要有以下几种：</p><ol><li>泛型与类型擦除</li><li>自动装箱与拆箱，变长参数、</li><li>增强for循环</li><li>内部类与枚举类</li></ol><h2 id="泛型与类型擦除"><a href="#泛型与类型擦除" class="headerlink" title="泛型与类型擦除"></a>泛型与类型擦除</h2><p>Java语言并不是一开始就支持泛型的。在早期的JDK中，只能通过Object类是所有类型的父类和强制类型转换来实现泛型的功能。强制类型转换的缺点就是把编译期间的问题延迟到运行时，JVM并不能为我们提供编译期间的检查。</p><p>在JDK1.5中，Java语言引入了泛型机制。但是这种泛型机制是通过类型擦除来实现的，即Java中的泛型只在程序源代码中有效（源代码阶段提供类型检查），在编译后的字节码中自动用强制类型转换进行替代。也就是说，Java语言中的泛型机制其实就是一颗语法糖，相较与C++、C#相比，其泛型实现实在是不那么优雅。</p><pre><code class="java">/*** 在源代码中存在泛型*/public static void main(String[] args) &#123;    Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();    map.put(&quot;hello&quot;,&quot;你好&quot;);    String hello = map.get(&quot;hello&quot;);    System.out.println(hello);&#125;</code></pre><p>当上述源代码被编译为class文件后，泛型被擦除且引入强制类型转换</p><pre><code class="java">public static void main(String[] args) &#123;    HashMap map = new HashMap(); //类型擦除    map.put(&quot;hello&quot;, &quot;你好&quot;);    String hello = (String)map.get(&quot;hello&quot;);//强制转换    System.out.println(hello);&#125;</code></pre><h2 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h2><blockquote><p>Java中的自动装箱与拆箱指的是基本数据类型与他们的包装类型之间的相互转换。</p></blockquote><p>我们知道Java是一门面向对象的语言，在Java世界中有一句话是这么说的：“万物皆对象”。但是Java中的基本数据类型却不是对象，他们不需要进行new操作，也不能调用任何方法，这在使用的时候有诸多不便。因此Java为这些基本类型提供了包装类，并且为了使用方便，提供了自动装箱与拆箱功能。自动装箱与拆箱在使用的过程中，其实是一个语法糖，内部还是调用了相应的函数进行转换。</p><p>下面代码演示了自动装箱和拆箱功能</p><pre><code class="java">public static void main(String[] args) &#123;    Integer a = 1;    int b = 2;    int c = a + b;    System.out.println(c);&#125;</code></pre><p>经过编译后，代码如下</p><pre><code class="java">public static void main(String[] args) &#123;    Integer a = Integer.valueOf(1); // 自动装箱    byte b = 2;    int c = a.intValue() + b;//自动拆箱    System.out.println(c);&#125;</code></pre><h2 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h2><blockquote><p>所谓变长参数，就是方法可以接受长度不定确定的参数</p></blockquote><p>变长参数特性是在JDK1.5中引入的，使用变长参数有两个条件，一是变长的那一部分参数具有相同的类型，二是变长参数必须位于方法参数列表的最后面。变长参数同样是Java中的语法糖，其内部实现是Java数组。</p><pre><code class="java">public class Varargs &#123;    public static void print(String... args) &#123;        for(String str : args)&#123;            System.out.println(str);        &#125;    &#125;    public static void main(String[] args) &#123;        print(&quot;hello&quot;, &quot;world&quot;);    &#125;&#125;</code></pre><p>编译为class文件后如下，从中可以很明显的看出变长参数内部是通过数组实现的</p><pre><code class="java">public class Varargs &#123;    public Varargs() &#123;    &#125;    public static void print(String... args) &#123;        String[] var1 = args;        int var2 = args.length;        //增强for循环的数组实现方式        for(int var3 = 0; var3 &lt; var2; ++var3) &#123;            String str = var1[var3];            System.out.println(str);        &#125;    &#125;    public static void main(String[] args) &#123;        //变长参数转换为数组        print(new String[]&#123;&quot;hello&quot;, &quot;world&quot;&#125;);    &#125;&#125;</code></pre><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><blockquote><p>增强for循环与普通for循环相比，功能更强并且代码更简洁</p></blockquote><p>增强for循环的对象要么是一个数组，要么实现了Iterable接口。这个语法糖主要用来对数组或者集合进行遍历，其在循环过程中不能改变集合的大小。</p><pre><code class="java">public static void main(String[] args) &#123;    String[] params = new String[]&#123;&quot;hello&quot;,&quot;world&quot;&#125;;    //增强for循环对象为数组    for(String str : params)&#123;        System.out.println(str);    &#125;    List&lt;String&gt; lists = Arrays.asList(&quot;hello&quot;,&quot;world&quot;);    //增强for循环对象实现Iterable接口    for(String str : lists)&#123;        System.out.println(str);    &#125;&#125;</code></pre><p>编译后的class文件为</p><pre><code class="java">public static void main(String[] args) &#123;   String[] params = new String[]&#123;&quot;hello&quot;, &quot;world&quot;&#125;;   String[] lists = params;   int var3 = params.length;   //数组形式的增强for退化为普通for   for(int str = 0; str &lt; var3; ++str) &#123;       String str1 = lists[str];       System.out.println(str1);   &#125;   List var6 = Arrays.asList(new String[]&#123;&quot;hello&quot;, &quot;world&quot;&#125;);   Iterator var7 = var6.iterator();   //实现Iterable接口的增强for使用iterator接口进行遍历   while(var7.hasNext()) &#123;       String var8 = (String)var7.next();       System.out.println(var8);   &#125;&#125;</code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><blockquote><p>内部类就是定义在一个类内部的类</p></blockquote><p>Java语言中之所以引入内部类，是因为有些时候一个类只在另一个类中有用，我们不想让其在另外一个地方被使用。内部类之所以是语法糖，是因为其只是一个编译时的概念，一旦编译完成，编译器就会为内部类生成一个单独的class文件，名为outer$innter.class。</p><pre><code class="java">public class Outer &#123;    class Inner&#123;    &#125;&#125;</code></pre><p>使用javac编译后，生成两个class文件Outer.class和Outer$Inner.class，其中Outer$Inner.class的内容如下：</p><pre><code class="java">class Outer$Inner &#123;    Outer$Inner(Outer var1) &#123;        this.this$0 = var1;    &#125;&#125;</code></pre><p>内部类分为四种：成员内部类、局部内部类、匿名内部类、静态内部类，每一种都有其用法，这里就不介绍了</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><blockquote><p>枚举类型就是一些具有相同特性的类常量</p></blockquote><p>java中类的定义使用class，枚举类的定义使用enum。在Java的字节码结构中，其实并没有枚举类型，枚举类型只是一个语法糖，在编译完成后被编译成一个普通的类。这个类继承java.lang.Enum，并被final关键字修饰。</p><pre><code class="java">public enum Fruit &#123;    APPLE,ORINGE&#125;</code></pre><p>使用jad对编译后的class文件进行反编译后得到</p><pre><code class="java">//继承java.lang.Enum并声明为finalpublic final class Fruit extends Enum&#123;    public static Fruit[] values()    &#123;        return (Fruit[])$VALUES.clone();    &#125;    public static Fruit valueOf(String s)    &#123;        return (Fruit)Enum.valueOf(Fruit, s);    &#125;    private Fruit(String s, int i)    &#123;        super(s, i);    &#125;    //枚举类型常量    public static final Fruit APPLE;    public static final Fruit ORANGE;    private static final Fruit $VALUES[];//使用数组进行维护    static    &#123;        APPLE = new Fruit(&quot;APPLE&quot;, 0);        ORANGE = new Fruit(&quot;ORANGE&quot;, 1);        $VALUES = (new Fruit[] &#123;            APPLE, ORANGE        &#125;);    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL事务及隔离级别</title>
      <link href="/2017/11/09/PostgreSQL%E4%BA%8B%E7%89%A9%E5%8F%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2017/11/09/PostgreSQL%E4%BA%8B%E7%89%A9%E5%8F%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>PostgreSQL中提供了多种数据完整性的保证机制。如：约束、触发器、事务和锁管理等。</p><p>事务主要是为了保证一组相关数据库的操作能全部执行成功，从而保证数据的完整性。锁机制主要是控制多个用户对同一数据进行操作，使用锁机制可以解决并发问题。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是用户对一个数据库操作的一个序列，这些操作要么全做，要么全不做，是一个不可分割的单位。</p><p>事务管理的常用语句如下：</p><pre><code class="sql">BEGIN;SQL语句1;SQL语句2;...COMMIT;</code></pre><p>事务块是指包围在BEGIN和COMMIT之间的语句。在PostgreSQL9中，常用的事务块管理语句含义如下：</p><blockquote><p><strong>START TRANSACTION</strong>：此命令表示开始一个新的事务块.<br><strong>BEGIN</strong>：初始化一个事务块。在BEGIN命令后的语句都将在一个事务里面执行，知道遇见COMMIT或ROLLBACK。它和START TRANSACTION是一样的。<br><strong>COMMIT</strong>：提交事务。<br><strong>ROLLBACK</strong>：事务失败时执行回滚操作。<br><strong>SET TRANSACTION</strong>：设置当前事务的特性。对后面的事务没有影响。</p></blockquote><h3 id="事务隔离及并发控制"><a href="#事务隔离及并发控制" class="headerlink" title="事务隔离及并发控制"></a>事务隔离及并发控制</h3><p>PostgreSQL是一个支持多用户的数据库，当多个用户操作同一数据库时，并发控制要保证所有用户可以高效的访问的同时不破坏数据的完整性。</p><p>数据库中数据的并发操作经常发生，而对数据的并发操作会带来下面的一些问题：</p><ol><li>脏读<br>一个事务读取了另一个未提交事务写入的数据。</li><li>不可重复读<br>一个事务重新读取前面读取过的数据，发现该数据已经被另一个已经提交的事务修改。</li><li>幻读<br>一个事务重新执行一个查询，返回符合查询条件的行的集合，发现满足查询条件的行的集合因为其它最近提交的事务而发生了改变。</li></ol><p>SQL标准定义了四个级别的事务隔离。</p><p>| 隔离级别 | 脏读 | 幻读 | 不可重复性读取 |<br>| :- | :- |<br>|读未提交|可能|可能|可能|<br>|读已提交|不可能|可能|可能|<br>|可重复读|不可能|可能|不可能|<br>|可串行读|不可能|不可能|不可能|</p><p>在PostgreSQL中，可以请求4种隔离级别中的任意一种。但是在内部，实际上只有两种独立的隔离级别，分别对应已提交和可串行化。如果选择了读未提交的级别，实际上使用的是读已提交，在选择可重复读级别的时候，实际上用的是可串行化，所以实际的隔离级别可能比选择的更严格。这是SQL标准允许的：4种隔离级别只定义了哪种现象不能发生，但是没有定义哪种现象一定发生。</p><p>PostgreSQL只提供两种隔离级别的原因是，这是把标准的隔离级别与多版本并发控制架构映射相关的唯一合理方法。</p><ol><li>读已提交<br>这是PostgreSQL中默认的隔离级别，当一个事务运行在这个隔离级别时，一个SELECT查询只能看到查询开始前已提交的数据，而无法看到未提交的数据或者在查询期间其他的事务已提交的数据。</li><li>可串行化<br>可串行化提供最严格的事务隔离。这个级别模拟串行的事务执行，就好像事务是一个接着一个串行的执行。不过，这个级别的应用必须准备在串行化失败的时候重新启动事务。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下修改按键ESC&lt;=&gt;CAPSLOCK和Control=&gt;ALT_R</title>
      <link href="/2017/10/20/linux%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%8C%89%E9%94%AEESC%3C=%3ECAPSLOCK%E5%92%8CControl=%3EALT_R/"/>
      <url>/2017/10/20/linux%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%8C%89%E9%94%AEESC%3C=%3ECAPSLOCK%E5%92%8CControl=%3EALT_R/</url>
      
        <content type="html"><![CDATA[<p>使用 <code>vim</code> 过程中发现 <code>esc</code> 和 <code>ctrl</code> 按键很难按，小拇指没有那么长啊～～，而 <code>caps_lock</code> 和 <code>alt_r</code>(右alt) 很少用。</p><p>本教程将 <code>esc</code> 和 <code>caps_lock</code> 两个按键交换， <code>alt_r</code>(右alt) 改为 <code>ctrl</code>。</p><h2 id="一、-esc-与-caps-lock-按键交换"><a href="#一、-esc-与-caps-lock-按键交换" class="headerlink" title="一、 esc 与 caps_lock 按键交换"></a>一、 esc 与 caps_lock 按键交换</h2><p>①. 创建 <code>.xmodmaprc</code> 文件。<br>②. 加入以下内容：</p><pre><code class="bash">remove Lock = Caps_Lockadd Lock = Escapekeysym Caps_Lock = Escapekeysym Escape = Caps_Lock</code></pre><p>③. 执行 <code>xmodmap .xmodmaprc</code> 使之生效。</p><h2 id="二、-将-右alt-改为-ctrl"><a href="#二、-将-右alt-改为-ctrl" class="headerlink" title="二、 将 右alt 改为 ctrl"></a>二、 将 右alt 改为 ctrl</h2><p>①. 查看需要修改键位的 keysym<br>通过 <code>xev | grep keycode</code> 获取右 <code>alt</code> 的 keysym 为 <code>Alt_R</code>。如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FvuqjLi5czeBluMTyIfv_xUOcu5k.png" alt="通过xev获取右alt的keysym"></p><p>②. 查看 <code>Alt_R</code> 是哪个 modifier 使用的<br>通过 <code>xmodmap -pm</code> 查看，发现 <code>Alt_R</code> 是作为 modifier <code>mod1</code> 使用的。如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fib8QjT-Ccx30DCf2rF4WkzHsbOH.png" alt="查看 Alt_R 是作为 mode1 使用的"></p><p>③. 修改 modifier</p><pre><code class="bash">xmodmap -e &#39;remove mod1 = Alt_R&#39; # 解除原来绑定xmodmap -e &#39;add control = Alt_R&#39; # 作为 control 使用</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> keybord </tag>
            
            <tag> emacs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）</title>
      <link href="/2017/09/25/ascii-ansi-unicode-utf-8/"/>
      <url>/2017/09/25/ascii-ansi-unicode-utf-8/</url>
      
        <content type="html"><![CDATA[<p>很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们认为8个开关状态作为原子单位很好，于是他们把这称为”字节”。</p><p>再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出更多的状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”计算机”。</p><p>开始计算机只在美国用。八位的字节一共可以组合出256（2的8次方）种不同的状态。</p><p>他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端设备或者打印机遇上这些约定好的字节时，就要做一些约定的动作。遇上 00x10, 终端就换行，遇上0x07, 终端就向人们嘟嘟叫，例好遇上0x1b, 打印机就打印反白的字，对于终端就用彩色显示字母。他们看到这样很好，于是就把这些0x20（十进制32）以下的字节状态称为”控制码”。</p><p>他们又把所有的空格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的 文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做 ANSI 的”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。</p><p>后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们用到的许多字母在ASCII中根本没有，为了也可以在计算机中保存他们的文字，他们决定采用127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128到255这一页的字符集被称”扩展字符集”。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！</p><p>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉，并且规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p><p>中国人民看到这样很不错，于是就把这种汉字方案叫做”GB2312”。GB2312 是对 ASCII 的中文扩展。</p><p>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人（如朱镕基的“镕”字）。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。</p><p>后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 GBK 标准，GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。</p><p>后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK 扩成了 GB18030。从此之后，中华民族的文化就可以在计算机时代中传承了。</p><p>中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 “DBCS”（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍：</p><p>“一个汉字算两个英文字符！一个汉字算两个英文字符……”</p><p>因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案——当时的中国人想让电脑显示汉字，就必须装上一个”汉字系统”，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序就必须加装另一套支持 BIG5 编码的什么”倚天汉字系统”才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎么办？</p><p>真是计算机的巴比伦塔命题啊！</p><p>正在这时，大天使加百列及时出现了——一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “UNICODE”。</p><p>UNICODE 开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO 就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ascii里的那些”半角”字符，UNICODE 包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于”半角”英文符号只需要用到低8位，所以其高 8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。</p><p>这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的strlen函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是 的，从 UNICODE 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的”一个字符”！同时，也都是统一的”两个字节”，请注意”字符”和”字节”两个术语的不同， “字节”是一个8位的物理存贮单元，而”字符”则是一个文化相关的符号。在UNICODE 中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。</p><p>从前多种字符集存在时，那些做多语言软件的公司遇上过很大麻烦，他们为了在不同的国家销售同一套软件，就不得不在区域化软件时也加持那个双字节字符集咒语，不仅要处处小心不要搞错，还要把软件中的文字在不同的字符集中转来转去。UNICODE 对于他们来说是一个很好的一揽子解决方案，于是从 Windows NT 开始，MS 趁机把它们的操作系统改了一遍，把所有的核心代码都改成了用 UNICODE 方式工作的版本，从这时开始，WINDOWS 系统终于无需要加装各种本土语言系统，就可以显示全世界上所有文化的字符了。</p><p>但是，UNICODE 在制订时没有考虑与任何一种现有的编码方案保持兼容，这使得 GBK 与UNICODE 在汉字的内码编排上完全是不一样的，没有一种简单的算术方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行。</p><p>如前所述，UNICODE 是用两个字节来表示为一个字符，他总共可以组合出65535不同的字符，这大概已经可以覆盖世界上所有文化的符号。如果还不够也没有关系，ISO已经准备了UCS-4方案，说简单了就是四个字节来表示一个字符，这样我们就可以组合出21亿个不同的字符出来（最高位有其他用途），这大概可以用到银河联邦成立那一天吧！</p><p>UNICODE 来到时，一起到来的还有计算机网络的兴起，UNICODE 如何在网络上传输也是一个必须考虑的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF8就是每次8个位传输数据，而UTF16就是每次16个位，只不过为了传输时的可靠性，从UNICODE到 UTF时并不是直接的对应，而是要过一些算法和规则来转换。</p><p>受到过网络编程加持的计算机僧侣们都知道，在网络里传递信息时有一个很重要的问题，就是对于数据高低位的解读方式，一些计算机是采用低位先发送的方法，例如我们PC机采用的 INTEL 架构；而另一些是采用高位先发送的方式。在网络中交换数据时，为了核对双方对于高低位的认识是否是一致的，采用了一种很简便的方法，就是在文本流的开始时向对方发送一个标志符——如果之后的文本是高位在位，那就发送”FEFF”，反之，则发送”FFFE”。不信你可以用二进制方式打开一个UTF-X格式的文件，看看开头两个字节是不是这两个字节？</p><p>下面是Unicode和UTF-8转换的规则</p><pre><code class="xml">UnicodeUTF-80000 - 007F0xxxxxxx0080 - 07FF110xxxxx 10xxxxxx0800 - FFFF1110xxxx 10xxxxxx 10xxxxxx</code></pre><p>例如”汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 1100 0100 1001，将这个比特流按三字节模板的分段方法分为0110 110001 001001，依次代替模板中的x，得到：1110-0110 10-110001 10-001001，即E6 B1 89，这就是其UTF8的编码。</p><p>讲到这里，我们再顺便说说一个很著名的奇怪现象：当你在 windows 的记事本里新建一个文件，输入”联通”两个字之后，保存，关闭，然后再次打开，你会发现这两个字已经消失了，代之的是几个乱码！呵呵，有人说这就是联通之所以拼不过移动的原因。</p><p>其实这是因为GB2312编码与UTF8编码产生了编码冲撞的原因。</p><p>当一个软件打开一个文本时，它要做的第一件事是决定这个文本究竟是使用哪种字符集的哪种编码保存的。软件一般采用三种方式来决定文本的字符集和编码：</p><p>检测文件头标识，提示用户选择，根据一定的规则猜测</p><p>最标准的途径是检测文本最开头的几个字节，开头字节 Charset&#x2F;encoding,如下表：</p><pre><code class="xml">EF BB BF UTF-8FF FE UTF-16/UCS-2, little endianFE FF UTF-16/UCS-2, big endianFF FE 00 00 UTF-32/UCS-4, little endian.00 00 FE FF UTF-32/UCS-4, big-endian.</code></pre><p>当你新建一个文本文件时，记事本的编码默认是ANSI（代表系统默认编码，在中文系统中一般是GB系列编码）, 如果你在ANSI的编码输入汉字，那么他实际就是GB系列的编码方式，在这种编码下，”联通”的内码是：</p><pre><code class="xml">c1 1100 0001aa 1010 1010cd 1100 1101a8 1010 1000</code></pre><p>注意到了吗？第一二个字节、第三四个字节的起始部分的都是”110”和”10”，正好与UTF8规则里的两字节模板是一致的，</p><p>于是当我们再次打开记事本时，记事本就误认为这是一个UTF8编码的文件，让我们把第一个字节的110和第二个字节的10去掉，我们就得到了”00001 101010”，再把各位对齐，补上前导的0，就得到了”0000 0000 0110 1010”，不好意思，这是UNICODE的006A，也就是小写的字母”j”，而之后的两字节用UTF8解码之后是0368，这个字符什么也不是。这就是只有”联通”两个字的文件没有办法在记事本里正常显示的原因。</p><p>而如果你在”联通”之后多输入几个字，其他的字的编码不见得又恰好是110和10开始的字节，这样再次打开时，记事本就不会坚持这是一个utf8编码的文件，而会用ANSI的方式解读之，这时乱码又不出现了。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> encoding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建dubbo+zookeeper平台</title>
      <link href="/2017/09/25/%E6%90%AD%E5%BB%BAdubbo+zookeeper%E5%B9%B3%E5%8F%B0/"/>
      <url>/2017/09/25/%E6%90%AD%E5%BB%BAdubbo+zookeeper%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍在SpringMVC+Spring+Mybatis项目中添加 <code>dubbo</code> 作为 <code>rpc</code> 服务。</p><p>文末有项目代码地址。</p><h2 id="一-搭建zookeeper"><a href="#一-搭建zookeeper" class="headerlink" title="一.搭建zookeeper"></a>一.搭建zookeeper</h2><p>使用 docker 一句话创建：</p><pre><code class="bash">docker run -dit --name zookeeper --hostname zookeeper-host -v /data:/data -p 2181:2181 jplock/zookeeper:latest</code></pre><h2 id="二-安装zkui（非必须）"><a href="#二-安装zkui（非必须）" class="headerlink" title="二.安装zkui（非必须）"></a>二.安装zkui（非必须）</h2><p>这个项目为 zookeeper 提供一个 web 的管理界面。当然我们也可以直接在zookeeper中使用命令查看，所以此步骤可以忽略</p><p>在开始前需要安装 Java 环境、Maven 环境。</p><ol><li>到 <a href="https://github.com/DeemOpen/zkui">zkui</a> 的项目中下载代码。</li></ol><pre><code class="bash">git clone https://github.com/DeemOpen/zkui.git</code></pre><ol start="2"><li>执行 <code>mvn clean install</code> 生成jar文件。</li><li>将config.cfg复制到上一步生成的jar文件所在目录，然后修改配置文件中的zookeeper地址。</li><li>执行 <code>nohup java -jar zkui-2.0-SNAPSHOT-jar-with-dependencies.jar &amp;</code></li><li>测试 <code>http://localhost:9090</code>，如果能看到如下页面，表示安装成功。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fherw3peRgh-grmGz6qkNri5J1aG.png" alt="登录页面"><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FvEVMOzSZBP4N4-Q14noQT_VsKF6.png" alt="首页"></p><h2 id="三-使用dubbo"><a href="#三-使用dubbo" class="headerlink" title="三.使用dubbo"></a>三.使用dubbo</h2><ol><li>在原来 SpringMVC+Spring+Mybatis 项目中，除了原来 spring 相关依赖外，还需要加入以下依赖</li></ol><pre><code class="xml">&lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;dubbo&lt;/artifactId&gt;        &lt;version&gt;2.5.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;        &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;        &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;        &lt;version&gt;3.4.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;        &lt;groupId&gt;com.101tec&lt;/groupId&gt;        &lt;artifactId&gt;zkclient&lt;/artifactId&gt;        &lt;version&gt;0.2&lt;/version&gt;&lt;/dependency&gt;</code></pre><ol start="2"><li>定义服务接口</li></ol><pre><code class="java">public interface IPersonService &#123;    List&lt;Person&gt; listAll();    Person getById(Integer id);    Integer delById(Person person);    Integer updatePerson(Person person);&#125;</code></pre><ol start="3"><li>定义服务实现类</li></ol><pre><code class="java">@Servicepublic class PersonService implements IPersonService &#123;    @Autowired    PersonMapper personMapper;    public List&lt;Person&gt; listAll() &#123;        return personMapper.findAll();    &#125;    public Person getById(Integer id) &#123;        return personMapper.findOneById(id);    &#125;    public Integer delById(Person person) &#123;        return personMapper.del(person);    &#125;    public Integer updatePerson(Person person) &#123;        return personMapper.update(person);    &#125;&#125;</code></pre><ol start="4"><li>配置生产者，注册服务信息</li></ol><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;       xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;    &lt;!--定义了提供方应用信息，用于计算依赖关系；--&gt;    &lt;dubbo:application name=&quot;demotest-provider&quot; /&gt;    &lt;!-- 使用 zookeeper 注册中心暴露服务地址 --&gt;    &lt;dubbo:registry address=&quot;zookeeper://192.168.0.86:2181&quot;/&gt;    &lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt;    &lt;!-- 和本地bean一样实现服务 --&gt;    &lt;bean id=&quot;personService&quot; class=&quot;com.ssm.service.PersonService&quot;/&gt;    &lt;!-- 声明需要暴露的服务接口 --&gt;    &lt;dubbo:service interface=&quot;com.ssm.iservice.IPersonService&quot; ref=&quot;personService&quot;/&gt;&lt;/beans&gt;</code></pre><ol start="5"><li>配置消费者，订阅服务</li></ol><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;       xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;    &lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;    &lt;dubbo:application name=&quot;demo-consumer&quot;/&gt;    &lt;!-- 使用 zookeeper 注册中心暴露发现服务地址 --&gt;    &lt;dubbo:registry address=&quot;zookeeper://192.168.0.86:2181&quot;/&gt;    &lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;    &lt;dubbo:reference id=&quot;personService&quot; check=&quot;false&quot; interface=&quot;com.ssm.iservice.IPersonService&quot;/&gt;&lt;/beans&gt;</code></pre><ol start="6"><li>调用远程服务<br>配置完成后，我们就可以像使用本地 bean 一样，使用 rpc 的 service；</li></ol><pre><code class="java">@Controllerpublic class IndexController &#123;    @Autowired    IPersonService personService;    @RequestMapping(&quot;/index.html&quot;)    public String index(Model model) &#123;        RpcContext.getContext().setAttachment(&quot;index&quot;, &quot;1&quot;);//测试ThreadLocal        List&lt;Person&gt; list = personService.listAll();        model.addAttribute(&quot;command&quot;,list);        return &quot;index&quot;;    &#125;&#125;</code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>至此，单机运行的 rpc 服务已搭建完成。</p><p>代码传送文 <a href="https://github.com/yelog/ssm">ssm</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dubbo </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker报错集锦</title>
      <link href="/2017/09/25/docker-errors/"/>
      <url>/2017/09/25/docker-errors/</url>
      
        <content type="html"><![CDATA[<h2 id="docker创建容器"><a href="#docker创建容器" class="headerlink" title="docker创建容器"></a>docker创建容器</h2><h3 id="1-iptables-failed"><a href="#1-iptables-failed" class="headerlink" title="1. iptables failed"></a>1. iptables failed</h3><p>创建 <code>tale</code> 容器时，如下命令：</p><pre><code class="bash">docker run -d --privileged --hostname tale --name tale \-v /etc/localtime:/etc/localtime:ro \-v /home/tale:/var/tale_home -p 127.0.0.1:234:9000 \-m 1024m --memory-swap -1 tale:1.0</code></pre><p>然后就报了以下错误：</p><pre><code class="bash">docker: Error response from daemon: driver failed programming external connectivity on endpoint tale (263775ff559176224428ec44dcec416a1c20e6c69198d9760b38f35849914260): iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 127.0.0.1 --dport 234 -j DNAT --to-destination 172.17.0.4:9000 ! -i docker0: iptables: No chain/target/match by that name. (exit status 1).</code></pre><p>解决办法：重启 docker 服务：</p><pre><code class="bash">$ service docker restart</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo加速渲染速度之fragment_cache</title>
      <link href="/2017/09/21/hexo-fragment_cache/"/>
      <url>/2017/09/21/hexo-fragment_cache/</url>
      
        <content type="html"><![CDATA[<h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>从开发 <code>3-hexo</code> 主题到现在已过去 9 个月时间了，累计在博客中写 132 篇文章了。</p><p>现在发现了严重的问题，<code>hexo generate</code> 渲染的速度越来越慢，现在132篇左右，每次渲染时间到达了 50+ s，相当不爽。</p><p>今日抽时间，查看了官方api，看到了 <code>fragment_cache</code> 局部缓存这个东西，解决了渲染速度的问题。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>局部缓存。它储存局部内容，下次使用时就能直接使用缓存。</p><pre><code class="javascript">&lt;%- fragment_cache(id, fn); %&gt;</code></pre><h3 id="替换简单文本区域"><a href="#替换简单文本区域" class="headerlink" title="替换简单文本区域"></a>替换简单文本区域</h3><p>a. 我们可以将所有页面都一样的区域，如下所示，缓存下来。当下一篇文章在渲染到这个位置时，将不再渲染，直接拿缓存数据。</p><pre><code class="js">&lt;%- fragment_cache(&#39;header&#39;, function()&#123;    return partial(&#39;&lt;head&gt;&lt;/head&gt;&#39;);&#125;) %&gt;</code></pre><p>b. 文章模块也可以使用，原来公共引用部分（没有和当前文章耦合的内容）使用下面的方式：</p><pre><code class="js">&lt;%- partial(&#39;_partial/header&#39;); %&gt;</code></pre><p>改进为以下代码：</p><pre><code class="js">&lt;%- fragment_cache(&#39;header&#39;, function()&#123;    return partial(&#39;_partial/header&#39;);&#125;) %&gt;</code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个语法只适用于所有页面都相同，不随文章内容变化的部分。</p><p>作者在 <code>3-hexo</code> 中加入了此语法，渲染132篇文章的速度已从 50+s 到现在 3s 左右了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> fragment_cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]浏览器前进/后退缓存（BF Cache）</title>
      <link href="/2017/09/21/bf-cache/"/>
      <url>/2017/09/21/bf-cache/</url>
      
        <content type="html"><![CDATA[<hr>[浏览器前进/后退缓存](https://developer.mozilla.org/en-US/docs/Working_with_BFCache)（Backward/Forward Cache，BF Cache）是指浏览器在前进后退过程中， 会应用更强的缓存策略，表现为 DOM、window、甚至 JavaScript 对象被缓存，以及同步 XHR 也被缓存。 这一现象在移动端浏览器尤为常见，除 Chrome for Android、Android Browser 之外的浏览器基本都会触发。<p>BF Cache 本来是一项浏览器优化，但在某些情况下（比如前端路由的 Web App）会引起困惑。 本文主要讨论 BF Cache 的行为、如何检测 BF Cache 缓存、以及如何 workaround。</p><h3 id="缓存行为"><a href="#缓存行为" class="headerlink" title="缓存行为"></a>缓存行为</h3><p>BF Cache 是一种浏览器优化，HTML 标准并未指定其如何进行缓存，因此缓存行为是与浏览器实现相关的。</p><blockquote><p>User agents may discard the Document objects of entries other than the current entry that are not referenced from any script, reloading the pages afresh when the user or script navigates back to such pages. This specification does not specify when user agents should discard Document objects and when they should cache them. – <a href="https://html.spec.whatwg.org/multipage/browsers.html#history">Session history and navigation</a>, WHATWG</p></blockquote><ul><li>Desktop Chrome：阻塞的资源和同步发出的 XHR 都会被缓存，但不缓存渲染结果。因此可以看到明显的载入过程，此时脚本也会重新执行。</li><li>Chrome for Android：有些情况下不会缓存，缓存时与 Desktop Chrome 行为一致。</li><li>Desktop Firefox：页面会被 Frozen，定时器会被暂停，DOM、Window、JavaScript 对象会被缓存，返回时页面脚本重新开始运行。</li><li>iOS Safari：渲染结果也会被缓存，因此才能支持左右滑动手势来前进&#x2F;后退。</li></ul><p>Desktop Firefox 暂停计时器的行为非常有趣，以下 HTML 中显示一个每秒加一的数字。 当页面导航时就会暂停，返回时继续增加（因此直接使用 setInterval 倒计时不仅不精确，而且不可靠）：</p><pre><code class="html">&lt;span id=&quot;timer-tick&quot;&gt;&lt;/span&gt;&lt;a href=&quot;http://harttle.com&quot;&gt;External Link&lt;/a&gt;&lt;script&gt;  var i = 0  setInterval(() =&gt; document.querySelector(&#39;#timer-tick&#39;).innerHTML = i++, 1000)&lt;/script&gt;</code></pre><h3 id="pagehide-pageshow-事件"><a href="#pagehide-pageshow-事件" class="headerlink" title="pagehide&#x2F;pageshow 事件"></a>pagehide&#x2F;pageshow 事件</h3><p>会话（Session）中的某一个页面显示&#x2F;隐藏时，会触发 <code>pagehide</code> 和 <code>pageshow</code> 事件。 这两个事件都有一个 <code>persisted</code> 属性用来指示当前页面是否被 BF Cache 缓存。 因此可以通过 <code>persisted</code> 属性来达到禁用 BF Cache 的效果：</p><pre><code class="javascript">window.onpageshow = function(event) &#123;    if (event.persisted) &#123;        window.location.reload()    &#125;&#125;;</code></pre><p>注意无论页面是否被缓存 <code>pageshow</code> 总会触发，因此需要检测器 <code>persisted</code> 属性。 另外 <code>pageshow</code> 的时机总是在 <code>load</code> 事件之后。 这一点很容易检测，下面的 <code>pageshow</code> 日志总在 <code>load</code> 之前：</p><pre><code class="javascript">window.addEventListener(&#39;pageshow&#39;, function () &#123;  console.log(&#39;on pageshow&#39;)&#125;)window.addEventListener(&#39;load&#39;, function () &#123;  console.log(&#39;load&#39;)&#125;)</code></pre><h3 id="XHR-缓存"><a href="#XHR-缓存" class="headerlink" title="XHR 缓存"></a>XHR 缓存</h3><p>同步（阻塞加载的）脚本发出的 XMLHttpRequest 也会被 Chrome 强制缓存， 因此即使在断网的情况下后退到访问过的页面仍然是可以完美渲染的。 如果页面中有这样一段外部脚本：</p><pre><code class="javascript">sendXHR();function sendXHR () &#123;  var xhr = new XMLHttpRequest()  xhr.open(&#39;GET&#39;, &#39;/data.json&#39;)  xhr.onreadystatechange = function () &#123;    if (xhr.readyState === XMLHttpRequest.DONE &amp;&amp;     xhr.status === 200) &#123;      console.log(&#39;xhr arrived&#39;, xhr.responseText)    &#125;  &#125;  xhr.send()&#125;</code></pre><p>超链接跳转后回来，该 xhr 也会被缓存。注意下图中的 XHR 一项 size 为 “from disk cache”：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FiUT28A3DCpwPiyvJpsvhkdFQai1.png"></p><p>为了强制发送 xhr，可以将 xhr 改为异步发送，或者加一个不重要的 query。</p><pre><code class="javascript">setTimeout(sendXHR, 1000)</code></pre><p>这样就能看到 xhr 真正发送出去了 :) 异步 xhr 缓存时机未经兼容性测试， 还是建议读者使用一个随机产生的 query。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FjwUrogpYSRjC5EGPGIH2x1t2Eff.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决iphone下后退不执行js的问题</title>
      <link href="/2017/09/21/iphone-bf-no-run-js/"/>
      <url>/2017/09/21/iphone-bf-no-run-js/</url>
      
        <content type="html"><![CDATA[<h2 id="直接上解决方法"><a href="#直接上解决方法" class="headerlink" title="直接上解决方法"></a>直接上解决方法</h2><p>不论页面是否被缓存，都会触发 <code>pageshow</code>，所以后退后需要执行的方法可以都放在下面事件内：</p><pre><code class="javascript">window.addEventListener(&#39;pageshow&#39;, function () &#123;  console.log(&#39;on pageshow&#39;)&#125;)`浏览器缓存行为` 的详细介绍可以参考： &#123;% post_link browser-back-forward-cache %&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7使用Firewalld</title>
      <link href="/2017/09/19/CentOS7%E4%BD%BF%E7%94%A8Firewalld/"/>
      <url>/2017/09/19/CentOS7%E4%BD%BF%E7%94%A8Firewalld/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>FirewallD 提供了支持网络&#x2F;防火墙区域(zone)定义网络链接以及接口安全等级的动态防火墙管理工具。它支持 IPv4, IPv6 防火墙设置以及以太网桥接，并且拥有运行时配置和永久配置选项。它也支持允许服务或者应用程序直接添加防火墙规则的接口。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="bash">$ yum install firewalld# 如果需要图形界面的话，则再安装$ yum install firewall-config</code></pre><h3 id="zone"><a href="#zone" class="headerlink" title="zone"></a>zone</h3><p>Firewall 能将不同的网络连接归类到不同的信任级别。</p><pre><code class="bash">$ firewall-cmd --list-all-zones    #查看所有zone信息</code></pre><p>Zone 提供了以下几个级别：</p><ul><li>drop: 丢弃所有进入的包，而不给出任何响应</li><li>block: 拒绝所有外部发起的连接，允许内部发起的连接</li><li>public: 允许指定的进入连接</li><li>external: 同上，对伪装的进入连接，一般用于路由转发</li><li>dmz: 允许受限制的进入连接</li><li>work: 允许受信任的计算机被限制的进入连接，类似 workgroup</li><li>home: 同上，类似 homegroup</li><li>internal: 同上，范围针对所有互联网用户</li><li>trusted: 信任所有连接</li></ul><h3 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h3><ul><li>source: 根据源地址过滤</li><li>interface: 根据网卡过滤</li><li>service: 根据服务名过滤</li><li>port: 根据端口过滤</li><li>icmp-block: icmp 报文过滤，按照 icmp 类型配置</li><li>masquerade: ip 地址伪装</li><li>forward-port: 端口转发</li><li>rule: 自定义规则</li></ul><p><em>过滤规则的优先级遵循如下顺序</em></p><ol><li>source</li><li>interface</li><li>firewalld.conf</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code class="bash">$ systemctl start firewalld         # 启动$ systemctl stop firewalld          # 关闭$ systemctl enable firewalld        # 开机启动$ systemctl disable firewalld       # 取消开机启动</code></pre><p>具体的规则管理，可以使用 <code>firewall-cmd</code>,具体的使用方法</p><pre><code class="bash">$ firewall-cmd --help--zone=NAME                         # 指定 zone--permanent                         # 永久修改，--reload 后生效--timeout=seconds                   # 持续效果，到期后自动移除，用于调试，不能与 --permanent 同时使用</code></pre><h3 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h3><p>查看运行状态</p><pre><code class="bash">$ firewall-cmd --state</code></pre><p>查看已被激活的 Zone 信息</p><pre><code class="bash">$ firewall-cmd --get-active-zonespublic  interfaces: eth0 eth1</code></pre><p>查看指定接口的 Zone 信息</p><pre><code class="bash">$ firewall-cmd --get-zone-of-interface=eth0public</code></pre><p>查看指定级别的接口</p><pre><code class="bash">$ firewall-cmd --zone=public --list-interfaceseth0</code></pre><p>查看指定级别的所有信息，譬如 public</p><pre><code class="bash">$ firewall-cmd --zone=public --list-allpublic (default, active)  interfaces: eth0  sources:  services: dhcpv6-client http ssh  ports:  masquerade: no  forward-ports:  icmp-blocks:  rich rules:</code></pre><p>查看所有级别被允许的信息</p><pre><code class="bash">$ firewall-cmd --get-service</code></pre><p>查看重启后所有 Zones 级别中被允许的服务，即永久放行的服务</p><pre><code class="bash">$ firewall-cmd --get-service --permanent</code></pre><h3 id="管理规则"><a href="#管理规则" class="headerlink" title="管理规则"></a>管理规则</h3><pre><code class="bash">$ firewall-cmd --panic-on           # 丢弃$ firewall-cmd --panic-off          # 取消丢弃$ firewall-cmd --query-panic        # 查看丢弃状态$ firewall-cmd --reload             # 更新规则，不重启服务$ firewall-cmd --complete-reload    # 更新规则，重启服务</code></pre><p>添加某接口至某信任等级，譬如添加 eth0 至 public，永久修改</p><pre><code class="bash">$ firewall-cmd --zone=public --add-interface=eth0 --permanent</code></pre><p>设置 public 为默认的信任级别</p><pre><code class="bash">$ firewall-cmd --set-default-zone=public</code></pre><p><strong><code>a. 管理端口</code></strong><br>列出 dmz 级别的被允许的进入端口</p><pre><code class="bash">$ firewall-cmd --zone=dmz --list-ports</code></pre><p>允许 tcp 端口 8080 至 dmz 级别</p><pre><code class="bash">$ firewall-cmd --zone=dmz --add-port=8080/tcp</code></pre><p>允许某范围的 udp 端口至 public 级别，并永久生效</p><pre><code class="bash">$ firewall-cmd --zone=public --add-port=5060-5059/udp --permanent</code></pre><p><strong><code>b. 网卡接口</code></strong><br>列出 public zone 所有网卡</p><pre><code class="bash">$ firewall-cmd --zone=public --list-interfaces</code></pre><p>将 eth0 添加至 public zone，永久</p><pre><code class="bash">$ firewall-cmd --zone=public --permanent --add-interface=eth0</code></pre><p>eth0 存在与 public zone，将该网卡添加至 work zone，并将之从 public zone 中删除</p><pre><code class="bash">$ firewall-cmd --zone=work --permanent --change-interface=eth0</code></pre><p>删除 public zone 中的 eth0，永久</p><pre><code class="bash">$ firewall-cmd --zone=public --permanent --remove-interface=eth0</code></pre><p><strong><code>c. 管理服务</code></strong><br>添加 smtp 服务至 work zone</p><pre><code class="bash">$ firewall-cmd --zone=work --add-service=smtp</code></pre><p>移除 work zone 中的 smtp 服务</p><pre><code class="bash">$ firewall-cmd --zone=work --remove-service=smtp</code></pre><p><strong><code>d. 配置 external zone 中的 ip 地址伪装</code></strong><br>查看</p><pre><code class="bash">$ firewall-cmd --zone=external --query-masquerade</code></pre><p>打开伪装</p><pre><code class="bash">$ firewall-cmd --zone=external --add-masquerade</code></pre><p>关闭伪装</p><pre><code class="bash">$ firewall-cmd --zone=external --remove-masquerade</code></pre><p><strong><code>e. 配置 public zone 的端口转发</code></strong><br>要打开端口转发，则需要先</p><pre><code class="bash">$ firewall-cmd --zone=public --add-masquerade</code></pre><p>然后转发 tcp 22 端口至 3753</p><pre><code class="bash">$ firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=3753</code></pre><p>转发 22 端口数据至另一个 ip 的相同端口上</p><pre><code class="bash">$ firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toaddr=192.168.1.100</code></pre><p>转发 22 端口数据至另一 ip 的 2055 端口上</p><pre><code class="bash">$ firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=2055:toaddr=192.168.1.100</code></pre><p><strong><code>f. 配置 public zone 的 icmp</code></strong><br>查看所有支持的 icmp 类型</p><pre><code class="bash">$ firewall-cmd --get-icmptypesdestination-unreachable echo-reply echo-request parameter-problem redirect router-advertisement router-solicitation source-quench time-exceeded</code></pre><p>列出</p><pre><code class="bash">$ firewall-cmd --zone=public --list-icmp-blocks</code></pre><p>添加 echo-request 屏蔽</p><pre><code class="bash">$ firewall-cmd --zone=public --add-icmp-block=echo-request [--timeout=seconds]</code></pre><p>移除 echo-reply 屏蔽</p><pre><code class="bash">$ firewall-cmd --zone=public --remove-icmp-block=echo-reply</code></pre><p><strong><code>g. IP 封禁</code></strong></p><pre><code class="bash">$ firewall-cmd --permanent --add-rich-rule=&quot;rule family=&#39;ipv4&#39; source address=&#39;222.222.222.222&#39; reject&quot;</code></pre><p>当然，我们仍然可以通过 ipset 来封禁 ip</p><p>封禁 ip</p><pre><code class="bash">$ firewall-cmd --permanent --zone=public --new-ipset=blacklist --type=hash:ip$ firewall-cmd --permanent --zone=public --ipset=blacklist --add-entry=222.222.222.222</code></pre><p>封禁网段</p><pre><code class="bash">$ firewall-cmd --permanent --zone=public --new-ipset=blacklist --type=hash:net$ firewall-cmd --permanent --zone=public --ipset=blacklist --add-entry=222.222.222.0/24</code></pre><p>倒入 ipset 规则</p><pre><code class="bash">$ firewall-cmd --permanent --zone=public --new-ipset-from-file=/path/blacklist.xml</code></pre><p>然后封禁 blacklist</p><pre><code class="bash">$ firewall-cmd --permanent --zone=public --add-rich-rule=&#39;rule source ipset=blacklist drop&#39;</code></pre><p>重新载入以生效</p><pre><code class="bash">$ firewall-cmd --reload</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker备份恢复之save与export</title>
      <link href="/2017/09/18/docker-save-export/"/>
      <url>/2017/09/18/docker-save-export/</url>
      
        <content type="html"><![CDATA[<h2 id="docker-save"><a href="#docker-save" class="headerlink" title="docker save"></a>docker save</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p><code>docker save</code> 命令用于持久化 <strong>镜像</strong>，先获得镜像名称，再执行保存：</p><pre><code class="bash"># 通过此命令查出要持久化的镜像名称$ docker images# 持久化镜像名为 image_name 的镜像，$ docker save image_name -o ~/save.tar</code></pre><blockquote><p><strong>注意：</strong> 如果镜像是在远程仓库，执行保存镜像的时候可能会报 <code>Cowardly refusing to save to a terminal. Use the -o flag or redirect.</code> 的错，可以通过 <code>docker save image_name &gt; image_name.tar</code> 将镜像从远程仓库持久化到本地。</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><pre><code class="bash"># 导入 save.tar$ docker load &lt; ~/save.tar# 查看镜像$ docker images images</code></pre><h2 id="docker-export"><a href="#docker-export" class="headerlink" title="docker export"></a>docker export</h2><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><p><code>docker export</code> 命令用于持久化 <strong>容器</strong>，先获取容器ID，再执行保存。</p><pre><code class="bash"># 通过此命令查出要持久化的容器ID$ docker ps -a# 持久化容器id为 container_id 的容器$ docker export container_id &gt; ~/export.tar</code></pre><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><pre><code class="bash"># 从 export.tar 导入镜像$ cat ~/export.tar | docker import - my-images:latest# 查看镜像$ sudo docker images</code></pre><h2 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h2><p>通过 <code>sudo docker images --tree</code> 可以查看到镜像的所有层，就会发现， <code>docker export</code> 丢失了所有的历史，而<code>docker save</code> 则会保存所有历史。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sudo命令免密码设置</title>
      <link href="/2017/09/11/sudo%E5%91%BD%E4%BB%A4%E5%85%8D%E5%AF%86%E7%A0%81%E8%AE%BE%E7%BD%AE/"/>
      <url>/2017/09/11/sudo%E5%91%BD%E4%BB%A4%E5%85%8D%E5%AF%86%E7%A0%81%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果某台linux只有自己在使用，比如个人系统，每次调用 <code>sudo</code> 时都需要输入密码，长期下来着实厌烦，因此本文介绍如何配置 <code>sudo</code> 命令，使其在运行时不需要输入密码。</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>执行命令</li></ol><pre><code class="bash">$ sudo visudo</code></pre><ol start="2"><li>添加以下两行， 下面的 sys 表示 sys 组成员不用密码使用sudo</li></ol><pre><code class="bash">aaronkilik ALL=(ALL) NOPASSWD: ALL%sys ALL=(ALL) NOPASSWD: ALL</code></pre><p>现在在使用 <code>sudo</code> 命令， 将不再需要输入密码。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>如果只允许用户使用 <code>kill</code> 和 <code>rm</code> 命令时，不需要输入密码，见如下配置</p><pre><code>%sys ALL=(ALL) NOPASSWD: /bin/kill, /bin/rm</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Maven私服-Nexus</title>
      <link href="/2017/09/06/build-Maven-Nexus/"/>
      <url>/2017/09/06/build-Maven-Nexus/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Maven 私服，可以代理远程仓库和部署自己或第三方构件。本文介绍使用最广泛搭建 Maven 私服的工具： Sonatype Nexus。</p></blockquote><h2 id="作者环境"><a href="#作者环境" class="headerlink" title="作者环境"></a>作者环境</h2><p>  本次搭建私服是在局域网的一台服务器上，操作系统为 CentOS 。<br>  需要部署到私服的项目 <code>soul</code><br>  <code>ssm</code> 项目需要引用 <code>soul</code></p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>  确保服务器已经安装了 java 环境，这个过程不是本文重点，安装过程自行百度。</p><h2 id="安装Nexus"><a href="#安装Nexus" class="headerlink" title="安装Nexus"></a>安装Nexus</h2><blockquote><p>官网 pro 版本的是需要付费的。所以我们使用免费的 OSS 版本，下载地址 (<a href="https://www.sonatype.com/download-oss-sonatype">https://www.sonatype.com/download-oss-sonatype</a>)</p></blockquote><pre><code class="bash"># 上传到服务器并解压$ tar xvf nexus-3.5.1-02-unix.tar.gz</code></pre><h3 id="启动Nexus"><a href="#启动Nexus" class="headerlink" title="启动Nexus"></a>启动Nexus</h3><pre><code class="bash"># 启动服务$ cd /nexus-3.5.1-02/bin/$ ./nexus start</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>打开网址：(<a href="http://192.168.0.86:8081/">http://192.168.0.86:8081/</a>) , ip 为搭建私服的服务器 ip 。<br>用户名&#x2F;密码： admin&#x2F;admin123<br>出现一下画面，就说明安装成功了。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FkIlJRDdMC2yJFT9huIk9gBuCe15.png" alt="nexus"></p><h2 id="发布soul项目到私服"><a href="#发布soul项目到私服" class="headerlink" title="发布soul项目到私服"></a>发布soul项目到私服</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ol><li>创建yelog-release仓库（<em>名字自定义</em>）, type选择 ： release<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fk5UboZXVf4aegz63N4TDrITMh4V.png" alt="①.创建宿主仓库"><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FjAz8w445FFeVqDDzLLTLitOkZyV.png" alt="②.选择hosted类型"><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Ft2u5UPqdAFxldkkwAC2uVBtjDhF.png" alt="③.创建release类型仓库"></li><li>创建yelog-snapshot仓库（<em>名字自定义</em>）， type选择 ： snapshot<br>重复上面 ① 和 ② 步，根据下图选择类型:<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FgX10ufvTV_YUK2vjrdRN3InKN1i.png" alt="创建snapshot类型仓库"></li></ol><p>两个都创建完成后，效果如下：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FjcMrajAM3anymLemHA2OoZZUut-.png" alt="创建自定义release和snapshot仓库"></p><h3 id="pom中添加部署配置"><a href="#pom中添加部署配置" class="headerlink" title="pom中添加部署配置"></a>pom中添加部署配置</h3><p>url 复制上图中新建的仓库的 copy 按钮，复制url。</p><pre><code class="xml">&lt;distributionManagement&gt;    &lt;repository&gt;        &lt;id&gt;yelog-release&lt;/id&gt;        &lt;name&gt;Release Repository of yelog&lt;/name&gt;        &lt;url&gt;http://192.168.0.86:8081/repository/yelog-release/&lt;/url&gt;    &lt;/repository&gt;    &lt;snapshotRepository&gt;        &lt;id&gt;yelog-snapshot&lt;/id&gt;        &lt;name&gt;Snapshot Repository of yelog&lt;/name&gt;        &lt;url&gt;http://192.168.0.86:8081/repository/yelog-snapshot/&lt;/url&gt;    &lt;/snapshotRepository&gt;&lt;/distributionManagement&gt;</code></pre><h3 id="在maven的-settings-xml-中配置"><a href="#在maven的-settings-xml-中配置" class="headerlink" title="在maven的 settings.xml 中配置"></a>在maven的 settings.xml 中配置</h3><p>这里配置 maven 的账号密码，id 要与 distributionManagement 中的id一致。默认账号&#x2F;密码：admin&#x2F;admin123</p><pre><code class="xml">&lt;servers&gt;    &lt;server&gt;      &lt;id&gt;yelog-realease&lt;/id&gt;      &lt;username&gt;admin&lt;/username&gt;      &lt;password&gt;admin123&lt;/password&gt;    &lt;/server&gt;    &lt;server&gt;      &lt;id&gt;yelog-snapshot&lt;/id&gt;      &lt;username&gt;admin&lt;/username&gt;      &lt;password&gt;admin123&lt;/password&gt;    &lt;/server&gt;&lt;/servers&gt;</code></pre><h3 id="执行maven命令部署项目到私服上"><a href="#执行maven命令部署项目到私服上" class="headerlink" title="执行maven命令部署项目到私服上"></a>执行maven命令部署项目到私服上</h3><p>我这里直接使用IDE的插件执行<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Frs7jSIClJvF31AnyAAz5JXL-IAP.png" alt="部署项目到私服"><br>部署完成后，可以在 yelog-snapshot 仓库中，查看部署的情况，如下图所示<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fi1YtOKOAK7KMigjAc4S7ZfwLLjl.png" alt="查看部署情况"></p><h2 id="从私服拉去依赖库"><a href="#从私服拉去依赖库" class="headerlink" title="从私服拉去依赖库"></a>从私服拉去依赖库</h2><blockquote><p>上一步我们已经将项目 <code>soul</code> 部署到私服上了，这一步介绍项目 <code>ssm</code> 如何依赖引用 <code>soul</code>。<br>私服中的 maven-central 可以链接远程仓库。这样，当有依赖在私服中找不到后，就可以通过远程仓库自动下载依赖。</p></blockquote><h3 id="pom-文件中添加如下配置"><a href="#pom-文件中添加如下配置" class="headerlink" title="pom 文件中添加如下配置"></a>pom 文件中添加如下配置</h3><ol><li>public库成员仓库中添加我们自定义的仓库<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FlmsId2u1z_vQ__zlfzoAIytujm3.png" alt="public库设置成员仓库"></li><li>配置远程仓库为私服地址。</li></ol><pre><code class="xml">&lt;repositories&gt;    &lt;repository&gt;        &lt;id&gt;public&lt;/id&gt;        &lt;name&gt;public Repository&lt;/name&gt;        &lt;url&gt;http://192.168.0.86:8081/repository/maven-public/&lt;/url&gt;        &lt;releases&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/releases&gt;        &lt;snapshots&gt;            &lt;enabled&gt;true&lt;/enabled&gt;        &lt;/snapshots&gt;    &lt;/repository&gt;&lt;/repositories&gt;&lt;pluginRepositories&gt;    &lt;pluginRepository&gt;        &lt;id&gt;public&lt;/id&gt;        &lt;name&gt;Public Repositories&lt;/name&gt;        &lt;url&gt;http://192.168.0.86:8081/repository/maven-public/&lt;/url&gt;    &lt;/pluginRepository&gt;&lt;/pluginRepositories&gt;</code></pre><ol start="3"><li>引入依赖</li></ol><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.soul&lt;/groupId&gt;    &lt;artifactId&gt;commons&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt;</code></pre><ol start="4"><li>ssm项目就可以引用到soul代码<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FvVCRBtMwy5ckbase3E3wM9JUXp6.png" alt="在代码中就可以直接引用到部署到私服的soul项目代码"></li></ol><p>本文结束。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> nexus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis常用Mapper语句</title>
      <link href="/2017/08/04/mybatis-Mapper/"/>
      <url>/2017/08/04/mybatis-Mapper/</url>
      
        <content type="html"><![CDATA[<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre><code class="sql">/* 简单插入 */&lt;insert id=&quot;insertOne&quot; parameterType=&quot;Person&quot;&gt;    insert into person (id, name, age) VALUES(#&#123;id&#125;, #&#123;name&#125;, #&#123;age&#125;);&lt;/insert&gt;/* 插入并返回对象的主键（数据库序列） */&lt;insert id=&quot;insertOne&quot; parameterType=&quot;Person&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;    insert into person (name, age) VALUES(#&#123;name&#125;, #&#123;age&#125;);&lt;/insert&gt;</code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre><code class="sql">/* 简单更新 */&lt;update id=&quot;updateName&quot;&gt;     update person set name = #&#123;name&#125; where id = #&#123;id&#125;;&lt;/update&gt;/* 更新值并返回 */&lt;select id=&quot;updateAge&quot; parameterType=&quot;Person&quot;&gt;    update person set age = age + #&#123;age&#125; where id = #&#123;id&#125; returning age;&lt;/select&gt;</code></pre><h3 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h3><p>记录玩家在某种类型游戏下的统计记录：</p><blockquote><p>如果没有记录，则从插入，count字段为1；<br>如果有记录，则更新count字段+1；</p></blockquote><ol><li>方式一</li></ol><pre><code class="sql">&lt;insert id=&quot;addCount&quot; parameterType=&quot;CountRecord&quot;&gt;    /*如果有记录，则更新；无记录，则noting*/    update      count_record    set      &quot;count&quot; = &quot;count&quot;+1    where      type_id = #&#123;typeId&#125;    and      user_id = #&#123;userId&#125;;    /*如果有记录，则noting；无记录，则插入*/    insert into      count_record(type_id, user_id, &quot;count&quot;)      select        #&#123;typeId&#125;, #&#123;userId&#125;, 1      where not exists          (select              *           from              count           where              type_id = #&#123;typeId&#125;           and              user_id = #&#123;userId&#125;);&lt;/insert&gt;</code></pre><ol start="2"><li>方式二</li></ol><pre><code class="sql">/* 利用 PostgreSQL 的 conflic 特性 */&lt;insert id=&quot;addCount&quot; parameterType=&quot;CountRecord&quot;&gt;    insert into      count_record(type_id, user_id, &quot;count&quot;)    VALUES      (#&#123;typeId&#125;, #&#123;userId&#125;, #&#123;count&#125;)    on      conflict(type_id,user_id)    do update set      &quot;count&quot; = count_record.&quot;count&quot; + 1&lt;/insert&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MathJax适配Pjax</title>
      <link href="/2017/07/05/MathJax-pjax/"/>
      <url>/2017/07/05/MathJax-pjax/</url>
      
        <content type="html"><![CDATA[<p>hexo 添加 MathJax 的过程网上很多，这里就不细讲，这里贴一张写的不错的文章 <a href="http://masikkk.com/article/hexo-13-MathJax/">Hexo博客(13)添加MathJax数学公式渲染</a></p><p>由于 <code>3-hexo</code> 这个主题使用了 <code>pjax</code> ，刷新和第一次加载没有问题，但是点到其他文章，再点回来，渲染就无效了。</p><p>这个问题和之前适配多说和高亮时，是同样的问题，只需要在下面配置即可。</p><pre><code class="js">$(document).on(&#123;    /*pjax请求回来页面后触发的事件*/    &#39;pjax:end&#39;: function () &#123;        /*渲染MathJax数学公式*/        $.getScript(&#39;//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&#39;,function () &#123;            MathJax.Hub.Typeset();        &#125;);    &#125;&#125;);</code></pre><p>这样就解决了pjax的适配问题。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathjax </tag>
            
            <tag> pjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo配置MathJax数学公式渲染</title>
      <link href="/2017/07/05/3-hexo-mathjax/"/>
      <url>/2017/07/05/3-hexo-mathjax/</url>
      
        <content type="html"><![CDATA[<hr>在用 markdown 写文档时，免不了碰到数学公式。<h2 id="处理hexo的MarkDown渲染器与MathJax的冲突"><a href="#处理hexo的MarkDown渲染器与MathJax的冲突" class="headerlink" title="处理hexo的MarkDown渲染器与MathJax的冲突"></a>处理hexo的MarkDown渲染器与MathJax的冲突</h2><p>由于hexo的MarkDown渲染器与MathJax有冲突，所以在使用之前需要修改两个地方。</p><p>编辑 <code>node_modules\marked\lib\marked.js</code> 脚本</p><ol><li>将451行 ，这一步取消了对 <code>\\,\&#123;,\&#125;</code> 的转义(escape)</li></ol><pre><code class="js">escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/,改为escape: /^\\([`*\[\]()# +\-.!_&gt;])/,</code></pre><ol start="2"><li>将459行，这一步取消了对斜体标记 <code>_</code> 的转义</li></ol><pre><code class="js">em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,改为em:/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></pre><h2 id="开启MathJax"><a href="#开启MathJax" class="headerlink" title="开启MathJax"></a>开启MathJax</h2><p>修改 <code>3-hexo/_config.yml</code></p><pre><code class="xml"># MathJax 数学公式支持mathjax:  on: true #是否启用  per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax: true</code></pre><p>考虑到页面的加载速度，支持渲染单个页面。</p><p>设置 <code>per_page: false</code> ,在需要渲染的页面内 加入 <code>mathjax: true</code></p><p>这样，就可以在页面内写MathJax公式了。</p><h2 id="MathJax公式书写"><a href="#MathJax公式书写" class="headerlink" title="MathJax公式书写"></a>MathJax公式书写</h2><p>公式书写依然按照MarkDown语法来，基本上也和LaTeX相同，单 <code>$</code> 符引住的是行内公式，双$符引住的是行间公式。</p><ul><li>MathJax公式书写参考<br><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax basic tutorial and quick reference</a></li></ul><h3 id="1-MathJax行内公式"><a href="#1-MathJax行内公式" class="headerlink" title="1.MathJax行内公式"></a>1.MathJax行内公式</h3><p>含有下划线 <code>_</code> 的公式 <code>$x_mu$</code> ： $x_mu$</p><p>希腊字符 <code>$\sigma$</code> ： $\sigma$</p><p>双 <code>\\</code> 公式内换行</p><pre><code class="js">$$f(n) =\begin&#123;cases&#125;n/2,  &amp; \text&#123;if $n$ is even&#125; \\3n+1, &amp; \text&#123;if $n$ is odd&#125;\end&#123;cases&#125;$$</code></pre><p>$$<br>f(n) &#x3D;<br>\begin{cases}<br>n&#x2F;2,  &amp; \text{if $n$ is even} \<br>3n+1, &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p><p>行内公式 <code>$y=ax+b$</code>：$y&#x3D;ax+b$</p><p>行内公式 <code>$\cos 2\theta = \cos^2 \theta - \sin^2 \theta = 2 \cos^2 \theta$</code>：$\cos 2\theta &#x3D; \cos^2 \theta - \sin^2 \theta &#x3D; 2 \cos^2 \theta$</p><p>行内公式 <code>$M(\beta^&#123;\ast&#125;(D),D) \subseteq C$</code> ： $M(\beta^{\ast}(D),D) \subseteq C$</p><h3 id="2-MathJax行间公式"><a href="#2-MathJax行间公式" class="headerlink" title="2.MathJax行间公式"></a>2.MathJax行间公式</h3><p>行间公式<code>$$ \sum_&#123;i=0&#125;^n i^2 = \frac&#123;(n^2+n)(2n+1)&#125;&#123;6&#125; $$</code>：<br>$$ \sum_{i&#x3D;0}^n i^2 &#x3D; \frac{(n^2+n)(2n+1)}{6} $$</p><p>行间公式<code>$$ x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</code>：<br>$$ x &#x3D; \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><h3 id="3-MathJax公式自动编号"><a href="#3-MathJax公式自动编号" class="headerlink" title="3.MathJax公式自动编号"></a>3.MathJax公式自动编号</h3><p>书写时使用</p><pre><code>$$\begin&#123;equation&#125;\end&#123;equation&#125;$$</code></pre><p>进行公式自动编号，同时会自动连续编号，例如：</p><pre><code class="xml">$$\begin&#123;equation&#125;\sum_&#123;i=0&#125;^n F_i \cdot \phi (H, p_i) - \sum_&#123;i=1&#125;^n a_i \cdot ( \tilde&#123;x_i&#125;, \tilde&#123;y_i&#125;) + b_i \cdot ( \tilde&#123;x_i&#125;^2 , \tilde&#123;y_i&#125;^2 )\end&#123;equation&#125;$$$$\begin&#123;equation&#125;\beta^*(D) = \mathop&#123;argmin&#125; \limits_&#123;\beta&#125; \lambda &#123;||\beta||&#125;^2 + \sum_&#123;i=1&#125;^n max(0, 1 - y_i f_&#123;\beta&#125;(x_i))\end&#123;equation&#125;$$</code></pre><p>$$<br>\begin{equation}<br>\sum_{i&#x3D;0}^n F_i \cdot \phi (H, p_i) - \sum_{i&#x3D;1}^n a_i \cdot ( \tilde{x_i}, \tilde{y_i}) + b_i \cdot ( \tilde{x_i}^2 , \tilde{y_i}^2 )<br>\end{equation}<br>$$<br>$$<br>\begin{equation}<br>\beta^*(D) &#x3D; \mathop{argmin} \limits_{\beta} \lambda {||\beta||}^2 + \sum_{i&#x3D;1}^n max(0, 1 - y_i f_{\beta}(x_i))<br>\end{equation}<br>$$</p><h2 id="MathJax公式手动编号"><a href="#MathJax公式手动编号" class="headerlink" title="MathJax公式手动编号"></a>MathJax公式手动编号</h2><p>可以在公式书写时使用 <code>\tag&#123;手动编号&#125;</code> 添加手动编号，例如：</p><pre><code>$$\begin&#123;equation&#125;\sum_&#123;i=0&#125;^n F_i \cdot \phi (H, p_i) - \sum_&#123;i=1&#125;^n a_i \cdot ( \tilde&#123;x_i&#125;, \tilde&#123;y_i&#125;) + b_i \cdot ( \tilde&#123;x_i&#125;^2 , \tilde&#123;y_i&#125;^2 ) \tag&#123;1.2.3&#125;\end&#123;equation&#125;$$</code></pre><p>$$<br>\begin{equation}<br>\sum_{i&#x3D;0}^n F_i \cdot \phi (H, p_i) - \sum_{i&#x3D;1}^n a_i \cdot ( \tilde{x_i}, \tilde{y_i}) + b_i \cdot ( \tilde{x_i}^2 , \tilde{y_i}^2 ) \tag{1.2.3}<br>\end{equation}<br>$$</p><p>不加 <code>\begin&#123;equation&#125; \end&#123;equation&#125;</code> 也可以，例如：</p><pre><code>$$\beta^*(D) = \mathop&#123;argmin&#125; \limits_&#123;\beta&#125; \lambda &#123;||\beta||&#125;^2 + \sum_&#123;i=1&#125;^n max(0, 1 - y_i f_&#123;\beta&#125;(x_i)) \tag&#123;我的公式3&#125;$$</code></pre><p>$$<br>\beta^*(D) &#x3D; \mathop{argmin} \limits_{\beta} \lambda {||\beta||}^2 + \sum_{i&#x3D;1}^n max(0, 1 - y_i f_{\beta}(x_i)) \tag{我的公式3}<br>$$</p><p>行内公式加\tag{}后会自动成为行间公式，例如： <code>$z = (p_0, ..... , p_n) \tag&#123;公式21&#125; $</code><br>$z &#x3D; (p_0, ….. , p_n) \tag{公式21} $</p><h3 id="4-其他公式书写技巧"><a href="#4-其他公式书写技巧" class="headerlink" title="4.其他公式书写技巧"></a>4.其他公式书写技巧</h3><p><strong>如何将下标放到正下方？</strong><br>① 如果是数学符号，那么直接用 <code>\limits</code> 命令放在正下方，如Max函数下面的取值范围，需要放在Max的正下方。可以如下实现：<br><code>$ \max \limits_&#123;a&lt;x&lt;b&#125;\&#123;f(x)\&#125; $</code><br>$ \max \limits_{a&lt;x&lt;b}{f(x)} $</p><p>② 若是普通符号，那么要用 <code>\mathop</code> 先转成数学符号再用 <code>\limits</code>，如<br><code>$ \mathop&#123;a&#125;\limits_&#123;i=1&#125; $</code><br>$ \mathop{a}\limits_{i&#x3D;1} $</p><p><strong>MathJax矩阵输入</strong><br>无括号矩阵：</p><pre><code>$$\begin&#123;matrix&#125;1 &amp; x &amp; x^2 \\1 &amp; y &amp; y^2 \\1 &amp; z &amp; z^2 \\\end&#123;matrix&#125;$$</code></pre><p>$$<br>\begin{matrix}<br>1 &amp; x &amp; x^2 \<br>1 &amp; y &amp; y^2 \<br>1 &amp; z &amp; z^2 \<br>\end{matrix}<br>$$</p><p>有括号有竖线矩阵：</p><pre><code>$$\left[    \begin&#123;array&#125;&#123;cc|c&#125;      1&amp;2&amp;3\\      4&amp;5&amp;6    \end&#123;array&#125;\right]$$</code></pre><p>$$<br>\left[<br>    \begin{array}{cc|c}<br>      1&amp;2&amp;3\<br>      4&amp;5&amp;6<br>    \end{array}<br>\right]<br>$$</p><p>行内小矩阵：<br><code>$\bigl( \begin&#123;smallmatrix&#125; a &amp; b \\ c &amp; d \end&#123;smallmatrix&#125; \bigr)$</code><br>$\bigl( \begin{smallmatrix} a &amp; b \ c &amp; d \end{smallmatrix} \bigr)$</p><p>这里有个问题，上面的写法在矩阵内没有换行，我看了下源码，双反斜杠\又被MarkDown渲染引擎转义为单个反斜杠了，解决方法是写三个反斜杠\\或在双反斜杠后换行即可：</p><p><code>$\bigl( \begin&#123;smallmatrix&#125; a &amp; b \\\ c &amp; d \end&#123;smallmatrix&#125; \bigr)$</code><br>$\bigl( \begin{smallmatrix} a &amp; b \\ c &amp; d \end{smallmatrix} \bigr)$</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://masikkk.com/article/hexo-13-MathJax/">Hexo博客(13)添加MathJax数学公式渲染</a><br><a href="http://www.jianshu.com/p/7ab21c7f0674">在Hexo中渲染MathJax数学公式</a><br><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax basic tutorial and quick reference</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装配置匿名访问Samba</title>
      <link href="/2017/07/03/CentOS7-anonymous-Samba/"/>
      <url>/2017/07/03/CentOS7-anonymous-Samba/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p><strong>Samba</strong>，是种用来让UNIX系列的操作系统与微软Windows操作系统的SMB&#x2F;CIFS（Server Message Block&#x2F;Common Internet File System）网络协议做链接的自由软件   –wikipedia</p></blockquote><p>本文就以 CentOS7 搭建 Samba 匿名完全访问（读&#x2F;写）为目标，实现一个局域网内的文件共享平台。</p><h2 id="1-安装Samba服务"><a href="#1-安装Samba服务" class="headerlink" title="1.安装Samba服务"></a>1.安装Samba服务</h2><p>使用 yum 工具进行安装</p><pre><code class="bash">$ yum install samba samba-client</code></pre><h2 id="2-检查是否安装成功"><a href="#2-检查是否安装成功" class="headerlink" title="2.检查是否安装成功"></a>2.检查是否安装成功</h2><pre><code class="bash">$ rpm -qa | grep samba</code></pre><h2 id="3-防火墙开放端口"><a href="#3-防火墙开放端口" class="headerlink" title="3.防火墙开放端口"></a>3.防火墙开放端口</h2><p>在 <code>/etc/sysconfig/iptables</code> 中添加配置</p><pre><code class="xml">-A INPUT -p tcp -m state --state NEW -m tcp --dport 137 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 138 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 139 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 389 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 445 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 901 -j ACCEPT</code></pre><p>重启 iptables 服务</p><pre><code class="bash">$ service iptables restart</code></pre><p>设置开机自启动</p><pre><code class="bash">$ chkconfig --level 35 smb on</code></pre><h2 id="4-共享配置"><a href="#4-共享配置" class="headerlink" title="4.共享配置"></a>4.共享配置</h2><p>Samba Server的验证方式有四种：</p><ul><li>share：匿名访问共享，不需要提供用户名和口令, 安全性能较低。</li><li>user：共享目录只能被授权的用户访问,由Samba Server负责检查账号和密码的正确性。账号和密码要在本Samba Server中建立。</li><li>server：依靠其他Windows Server或Samba Server来验证用户的账号和密码,是一种代理验证。此种安全模式下,系统管理员可以把所有的Windows用户和口令集中到一个Server系统上,使用 Windows Server进行Samba认证, 远程服务器可以自动认证全部用户和口令,如果认证失败,Samba将使用用户级安全模式作为替代的方式。</li><li>domain：域安全级别,使用主域控制器(PDC)来完成认证。</li></ul><blockquote><p>创建一个匿名共享访问，需要使用share模式，但在CentOS安装的samba4中share 和 server验证方式已被弃用</p></blockquote><p>配置如下：</p><pre><code class="xml">[global]        workgroup = MYGROUP        server string = Samba Server Version %v        log file = /var/log/samba/log.%m        max log size = 50        security = user        map to guest = Bad User        load printers = yes        cups options = raw[share]        comment = share        path = /home/samba          directory mask = 0777          create mask = 0777          #不可视目录        #browseable = yes        guest ok=yes        writable=yes</code></pre><p>创建 <code>/home/samba</code> 共享目录</p><pre><code class="bash">$ mkdir /home/samba</code></pre><p>重启 smb 服务</p><pre><code class="bash">$ service smb restart</code></pre><p>检查服务是否在运行</p><pre><code class="bash">$ pgrep smbd</code></pre><p>检查配置参数</p><pre><code class="bash">$ testparmLoad smb config files from /etc/samba/smb.confProcessing section &quot;[share]&quot;Loaded services file OK.Server role: ROLE_STANDALONEPress enter to see a dump of your service definitions# Global parameters[global]    server string = Samba Server Version %v    workgroup = MYGROUP    log file = /var/log/samba/log.%m    max log size = 50    map to guest = Bad User    security = USER    idmap config * : backend = tdb    cups options = raw[share]    comment = share    path = /home/samba    create mask = 0777    directory mask = 0777    guest ok = Yes    read only = No</code></pre><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>以上就配置完成，如服务器地址为192.168.0.87</p><p>windows 系统访问，直接运行 <code>\\192.168.0.87\share</code></p><p>linux 系统访问， <code>smb://192.168.0.87/share</code></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li>linux 系统可以正常读写修改，但 windows 系统只可以读写，直接打开修改时就，就为只读文件了。<br><strong>解决办法</strong>：修改 <code>/etc/samba/smb.conf</code> ,在 <code>[share]</code> 中加入以下内容</li></ul><pre><code class="xml">create mask = 0777</code></pre><ul><li>访问部分文件可以正常访问，但部分文件无法访问。<br><strong>解决方法</strong>：修改文件访问权限</li></ul><pre><code class="bash">$ chmod -R 1777 /home/samba$ chown nobody:nobody</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://www.cnblogs.com/lion382/p/4078931.html">CentOS7 安装Samba服务</a></li><li><a href="http://blog.leanote.com/post/dapingxia@163.com/CentOS7-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%8C%BF%E5%90%8D%E8%AE%BF%E9%97%AESamba">CentOS7 安装配置匿名访问Samba</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完美替代多说-gitment</title>
      <link href="/2017/06/26/gitment/"/>
      <url>/2017/06/26/gitment/</url>
      
        <content type="html"><![CDATA[<p>自从多说要停止服务时，就开始关注第三方评论系统，现在的评论系统都有这样或那样的问题，见 <a href="/2017/03/23/the-third-comment/" title="关于第三方评论系统">关于第三方评论系统</a> 。忽然看到作者 孙士权 的一片文章 <a href="https://imsun.net/posts/gitment-introduction/">Gitment：使用 GitHub Issues 搭建评论系统</a> 。</p><p>立即就将 <code>gitment</code> 集成到 <code>3-hexo</code> 主题内。本篇文章只讲在 <code>3-hexo</code> 内如何使用，如果想自定义，可以参考上面原文。</p><h2 id="注册-OAuth-Application"><a href="#注册-OAuth-Application" class="headerlink" title="注册 OAuth Application"></a>注册 OAuth Application</h2><p><a href="https://github.com/settings/applications/new">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <a href="http://yelog.org)./">http://yelog.org）。</a><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FsumVHpCC4h5JxRNg0TiKlMf0b1Y.png" alt="作者是这样填的"></p><h2 id="使用-gitment-评论系统"><a href="#使用-gitment-评论系统" class="headerlink" title="使用 gitment 评论系统"></a>使用 gitment 评论系统</h2><p>修改主题 <code>_config.yml</code></p><pre><code class="xml">gitment:  on: true  # 启用gitment评论系统  owner: yelog  # 你的github账号  repo: yelog.github.io  # 评论issue保存的仓库，我选择保存在blog仓库，也可以新建一个仓库  client_id: d64ceca0d8a4e8b1f5c9   # 上一步注册后生成的client_id  client_secret: fb17d5f0aba31372f61a03df707bb20a39a73a06 # 上一步注册后生成的client_secret</code></pre><h2 id="部署并初始化"><a href="#部署并初始化" class="headerlink" title="部署并初始化"></a>部署并初始化</h2><p>1.发布 hexo</p><pre><code class="bash">$ hexo clear &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>2.打开发布的blog，登录github账号，并点击 <code>Initialize Comments</code>。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FnO9sHY-eFVXwnLplwsP9NRvityH.png" alt="初始化本页的评论"></p><p>3.现在其他人就可以进行评论了</p><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>整体评论系统做的简洁，整体来说是个不错的系统。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决粘贴到vim缩进错乱问题</title>
      <link href="/2017/06/01/vim-paste/"/>
      <url>/2017/06/01/vim-paste/</url>
      
        <content type="html"><![CDATA[<h2 id="遇见"><a href="#遇见" class="headerlink" title="遇见"></a>遇见</h2><p>当我使用vim，想要粘贴下面这段脚本到 xx.sh 文件中</p><pre><code class="bash">#!/bin/bashif [ $1 ]then    if [ $1 == &quot;help&quot; ]; then        echo -e &quot;\033[37m pay 参数1 [参数2] \033[0m&quot;    else        if [ $2 ]; then            filename = $2        fi    fielse    echo -e &quot;\033[37m 缺少关键词，通过&#39;pay help&#39;查看帮助信息 \033[0m&quot;fi</code></pre><p>却出现了错乱,如下图所示<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FoIefs-sorNDjfPD69gH05is3tc5.png" alt="缩进乱掉"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>vim 没有相应的程序来处理这个从其他应用复制粘贴的过程，所以Vim通过插入键盘输入的buffer来模拟这个粘贴的过程，这个时候Vim会以为这是用户输入的。</p><p>所以问题是：当上一行结束，光标进入下一行时Vim会自动以上一行的的缩进为初始位置。这样就会破坏原始文件的缩进。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>经过一番google，发现vim提供了 <code>paste</code> 选项，进入 paste 模式后，就可以正常缩进了。</p><pre><code class="bash"># 进入 paste 模式:set paste# 退出 paste 模式:set nopaste</code></pre><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FpHOECFUPpgkJBKhKE_wcRYvPJ81.png" alt="缩进正常"></p><p>如果不想每次都执行这个命令，可以在 <code>～/.vimrc</code> 中添加一行配置 <code>set pastetoggle=&lt;F12&gt;</code> ，这样就可以通过F12快速在paste模式中切换。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进入docker容器命令制作</title>
      <link href="/2017/06/01/entering-docker/"/>
      <url>/2017/06/01/entering-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="通过attach进入容器"><a href="#通过attach进入容器" class="headerlink" title="通过attach进入容器"></a>通过attach进入容器</h2><pre><code class="bash"># 进入容器（Docker自带的命令）$ sudo docker attach [name]</code></pre><p>通过这命令进入容器后，执行ctrl+d退出容器后发现容器也停止了。<br>所以可以通过</p><ul><li>先按，ctrl+p</li><li>再按，ctrl+q</li></ul><p>退出</p><h2 id="制作进入容器的命令"><a href="#制作进入容器的命令" class="headerlink" title="制作进入容器的命令"></a>制作进入容器的命令</h2><p>既然attach退出很麻烦，一不小心容器就down掉了</p><p>通过 <code>docker exec</code> 进入容器是安全的，但是命令过长</p><p>所以我们可以通过下面操作，简化命令</p><p>1.创建文件 <code>/usr/bin/ctn</code>,内容如下</p><pre><code>docker exec -it $1 /bin/bash</code></pre><p>2.检查环境变量有没有配置目录 <code>/usr/bin</code></p><pre><code>$PATHbash: /usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games: No such file or directory</code></pre><p>配置环境变量的方式自行百度</p><p>3.完成上面两步即可通过命令 <code>ctn</code> 进入容器</p><pre><code class="bash">$ ctn [name]</code></pre><blockquote><p>注意：如果是使用非root账号创建的命令，而docker命令是root权限，可能会存在权限问题<br>可以设置 <code>chmod 777 /usr/bin/ctn</code> 设置权限<br>使用 <code>sudo ctn [name]</code> 即可进入容器</p></blockquote><p>4.自动补全docker名<br>使用上面命令时，docker的名字都是手动输入，很麻烦，而且容易出错。</p><p>我们可以借助complete命令，来补全docker信息。</p><p>在~&#x2F;.bashrc(作用于当前用户，如果所有用户，修改&#x2F;etc&#x2F;bashrc)文件中添加一行</p><pre><code class="bash"># ctn auto completecomplete -W &quot;$(docker ps --format &quot;&#123;&#123;.Names&#125;&#125;&quot;)&quot; ctn</code></pre><p>再执行 <code>source .bashrc</code> 使之生效。</p><p>这样我们输入 <code>ctn</code> 后，按 <code>Tab</code> 就会提示或自动补全了。</p><blockquote><p><code>注意：</code> 由于提示的docker名是 <code>.bashrc</code> 生效时的列表，所以如果之后docker列表有变动，需重新执行 <code>source .bashrc</code> 使之更新提示列表</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tale博客搭建及体验</title>
      <link href="/2017/05/24/tale-build-experience/"/>
      <url>/2017/05/24/tale-build-experience/</url>
      
        <content type="html"><![CDATA[<p>不久之前在逛blog时，发现了这款tale，今天抽空搭建了一下，将搭建过程写于此。<br>demo website：<a href="https://tale.biezhi.me/">https://tale.biezhi.me</a></p><h2 id="搭建思路"><a href="#搭建思路" class="headerlink" title="搭建思路"></a>搭建思路</h2><p>看了tale作者的(github)[<a href="https://github.com/otale]">https://github.com/otale]</a> 发现有建好docker，所以果断使用docker搭建tale的环境</p><h3 id="构建docker镜像"><a href="#构建docker镜像" class="headerlink" title="构建docker镜像"></a>构建docker镜像</h3><p>下载<a href="https://github.com/otale/tale-docker">tale-docker</a>到本地。</p><pre><code class="bash"># 下载官方Dockerfile$ git clone https://github.com/otale/tale-docker.git# 构建 tale 镜像$ docker build -t tale:1.0 .</code></pre><h3 id="下载tale博客文件"><a href="#下载tale博客文件" class="headerlink" title="下载tale博客文件"></a>下载tale博客文件</h3><pre><code class="bash"># 下载压缩包$ sudo wget http://7xls9k.dl1.z0.glb.clouddn.com/tale.zip# 讲解压出来的文件夹移入home目录$ unzip tale.zip$ mv tale /home</code></pre><h3 id="构建tale镜像"><a href="#构建tale镜像" class="headerlink" title="构建tale镜像"></a>构建tale镜像</h3><pre><code class="bash">docker run -d --privileged --hostname tale --name tale \-v /etc/localtime:/etc/localtime:ro \-v /home/tale:/var/tale_home -p 80:9000 \-m 1024m --memory-swap -1 tale:1.0</code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>浏览器进入 <code>127.0.0.1</code> 即可访问<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FtwT7OgspZR3YjpJhH5VSuUmnLjP.png" alt="管理后台"><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FnFBhuwvQ4atG2F2ahdj5PSFF3eL.png" alt="首页"><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fg1891hUmEATDbFDBgdBsncb4U1U.png" alt="文章"></p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><h3 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h3><ol><li>文章支持Markdown和富文本。</li><li>文章&#x2F;评论&#x2F;友链&#x2F;标签管理&#x2F;主题，设置简单，一目了然</li><li>支持插件扩展</li></ol><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ol><li>主题简洁（当然支持切换主题）</li><li>使用 <code>instantclick</code> ，页面切换流畅</li><li>评论系统，简洁易用</li><li>搜索只支持文章标题</li></ol><h3 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h3><ol><li>管理简单方便</li><li>使用docker后，迁移数据也方便</li><li>主题还不是很多</li><li>对于常年使用静态blog，手动渲染&#x2F;发布，使用这个之后还有点小清新。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>tale整体不错，值得入手。</p><p>不过目前没有笔者喜欢的主题（当然默认主题也不错），暂时不打算更换blog，笔者也打算过一段时间开发一个tale的主题，然后正式迁入tale。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tale </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker数据管理</title>
      <link href="/2017/05/23/docker-data-manager/"/>
      <url>/2017/05/23/docker-data-manager/</url>
      
        <content type="html"><![CDATA[<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>数据卷默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：数据卷的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的数据卷。</p></blockquote><h3 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h3><p>在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。</p><p>下面创建一个名为 web 的容器，并加载一个数据卷到容器的 &#x2F;webapp 目录。</p><pre><code class="bash">$ sudo docker run -d -P --name web -v /webapp training/webapp python app.py</code></pre><blockquote><p>注意：也可以在 Dockerfile 中使用 VOLUME 来添加一个或者多个新的卷到由该镜像创建的任意容器。</p></blockquote><h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><p>数据卷是被设计用来持久化数据的，它的生命周期独立于容器，Docker不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的数据卷。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 docker rm -v 这个命令。无主的数据卷可能会占据很多空间，要清理会很麻烦。Docker官方正在试图解决这个问题，相关工作的进度可以查看这个<a href="https://github.com/docker/docker/pull/8484">PR</a>。</p><h3 id="挂载一个主机目录作为数据卷"><a href="#挂载一个主机目录作为数据卷" class="headerlink" title="挂载一个主机目录作为数据卷"></a>挂载一个主机目录作为数据卷</h3><p>使用 -v 标记也可以指定挂载一个本地主机的目录到容器中去。</p><pre><code class="bash">$ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py</code></pre><p>上面的命令加载主机的 &#x2F;src&#x2F;webapp 目录到容器的 &#x2F;opt&#x2F;webapp 目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它。</p><blockquote><p>注意：Dockerfile 中不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的。然而，不同操作系统的路径格式不一样，所以目前还不能支持。</p></blockquote><p>Docker 挂载数据卷的默认权限是读写，用户也可以通过 :ro 指定为只读。</p><pre><code class="bash">$ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp:rotraining/webapp python app.py</code></pre><p>加了 :ro 之后，就挂载为只读了。</p><h3 id="查看数据卷的具体信息"><a href="#查看数据卷的具体信息" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>在主机里使用以下命令可以查看指定容器的信息</p><pre><code class="bash">$ docker inspect web</code></pre><p>在输出的内容中找到其中和数据卷相关的部分，可以看到所有的数据卷都是创建在主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;下面的</p><pre><code class="bash">&quot;Volumes&quot;: &#123;    &quot;/webapp&quot;: &quot;/var/lib/docker/volumes/fac362...80535&quot;&#125;,&quot;VolumesRW&quot;: &#123;    &quot;/webapp&quot;: true&#125;...</code></pre><p>注：从Docker 1.8.0起，数据卷配置在”Mounts”Key下面，可以看到所有的数据卷都是创建在主机的&#x2F;mnt&#x2F;sda1&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;….下面了。</p><pre><code class="json">&quot;Mounts&quot;: [            &#123;                &quot;Name&quot;: &quot;b53ebd40054dae599faf7c9666acfe205c3e922fc3e8bc3f2fd178ed788f1c29&quot;,                &quot;Source&quot;: &quot;/mnt/sda1/var/lib/docker/volumes/b53ebd40054dae599faf7c9666acfe205c3e922fc3e8bc3f2fd178ed788f1c29/_data&quot;,                &quot;Destination&quot;: &quot;/webapp&quot;,                &quot;Driver&quot;: &quot;local&quot;,                &quot;Mode&quot;: &quot;&quot;,                &quot;RW&quot;: true,                &quot;Propagation&quot;: &quot;&quot;            &#125;        ]...</code></pre><h3 id="挂载一个本地主机文件作为数据卷"><a href="#挂载一个本地主机文件作为数据卷" class="headerlink" title="挂载一个本地主机文件作为数据卷"></a>挂载一个本地主机文件作为数据卷</h3><p>-v 标记也可以从主机挂载单个文件到容器中</p><pre><code class="bash">$ sudo docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</code></pre><p>这样就可以记录在容器输入过的命令了。</p><blockquote><p>注意：如果直接挂载一个文件，很多文件编辑工具，包括 vi 或者 <code>sed --in-place</code>，可能会造成文件 inode 的改变，从 Docker 1.1 .0起，这会导致报错误信息。所以最简单的办法就直接挂载文件的父目录。</p></blockquote><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>如果你有一些持续更新的数据需要在容器之间共享，最好创建数据卷容器。</p><p>数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。</p><p>首先，创建一个名为 dbdata 的数据卷容器：</p><pre><code class="bash">$ sudo docker run -d -v /dbdata --name dbdata training/postgres echo Data-only container for postgres</code></pre><p>然后，在其他容器中使用 –volumes-from 来挂载 dbdata 容器中的数据卷。</p><pre><code class="bash">$ sudo docker run -d --volumes-from dbdata --name db1 training/postgres$ sudo docker run -d --volumes-from dbdata --name db2 training/postgres</code></pre><p>可以使用超过一个的 <code>--volumes-from</code> 参数来指定从多个容器挂载不同的数据卷。 也可以从其他已经挂载了数据卷的容器来级联挂载数据卷。</p><pre><code class="bash">$ sudo docker run -d --name db3 --volumes-from db1 training/postgres</code></pre><blockquote><p>注意：使用 –volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态。</p></blockquote><p>如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。具体的操作将在下一节中进行讲解。</p><h2 id="利用数据卷容器来备份、恢复、迁移数据卷"><a href="#利用数据卷容器来备份、恢复、迁移数据卷" class="headerlink" title="利用数据卷容器来备份、恢复、迁移数据卷"></a>利用数据卷容器来备份、恢复、迁移数据卷</h2><p>可以利用数据卷对其中的数据进行进行备份、恢复和迁移。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>首先使用 –volumes-from 标记来创建一个加载 dbdata 容器卷的容器，并从主机挂载当前目录到容器的 &#x2F;backup 目录。命令如下：</p><pre><code class="bash">$ sudo docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata</code></pre><p>容器启动后，使用了 tar 命令来将 dbdata 卷备份为容器中 &#x2F;backup&#x2F;backup.tar 文件，也就是主机当前目录下的名为 backup.tar 的文件。</p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>如果要恢复数据到一个容器，首先创建一个带有空数据卷的容器 dbdata2。</p><pre><code class="bash">$ sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</code></pre><p>然后创建另一个容器，挂载 dbdata2 容器卷中的数据卷，并使用 untar 解压备份文件到挂载的容器卷中。</p><pre><code class="bash">$ sudo docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf/backup/backup.tar</code></pre><p>为了查看&#x2F;验证恢复的数据，可以再启动一个容器挂载同样的容器卷来查看</p><pre><code class="bash">$ sudo docker run --volumes-from dbdata2 busybox /bin/ls /dbdata</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器</title>
      <link href="/2017/05/23/docker-container/"/>
      <url>/2017/05/23/docker-container/</url>
      
        <content type="html"><![CDATA[<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre><code class="bash"># 创建一个名为myubuntu的容器# -t:分配一个伪终端  -i:让容器的标准输入保持打开$ docker run --name=myubuntu -t -i ubuntu /bin/bash# 创建一个名为webserver 的nginx容器，使用卷映射本机/home/faker/myspace/nginx目录到docker目录/usr/share/nginx/html$ docker run --name=webserver -d -v /home/faker/myspace/nginx:/usr/share/nginx/html -p 80:80 nginx# 查看容器的输出信息（打印信息，如 echo）# run的时候，使用-d将会不展示在宿主机上，可通过下面命令查看打印信息$ docker run -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;$ docker logs [container ID or NAMES]# 启动容器 myubuntu$ docker start myubuntu# 关闭容器 myubuntu$ docker stop myubuntu# 查看已启动的容器 -a:查看包括未启动的容器在内的所有容器$ docker ps [-a]# 进入容器（Docker自带的命令）$ docker attach [name]# 进入容器（通过exec）$ docker exec -it [name] /bin/bash# 导出容器快照到本地文件$ docker export [container id] &gt; ubuntu.tar# 将容器快照导入为镜像$ cat ubuntu.tar | docker import - test/ubuntu:v1.0# 从制定 URL 或者某个目录导入$ docker import http://example.com/exampleimage.tgz example/imagerepo# 删除容器 -f:删除正在运行的容器$ docker [-f] rm myubuntu# 删除所有已关闭的容器$ docker rm $(docker ps -a -q)# 查询各容器资源使用情况$ docker stats $(docker ps --format=&#123;&#123;.Names&#125;&#125;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker仓库</title>
      <link href="/2017/05/23/docker-registry/"/>
      <url>/2017/05/23/docker-registry/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/">Docker Hub</a>，其中已经包括了超过 15,000 的镜像。大部分需求，都可以通过在 Docker Hub 中直接下载镜像来实现。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>可以通过执行 docker login 命令来输入用户名、密码和邮箱来完成注册和登录。 注册成功后，本地用户目录的 .dockercfg 中将保存用户的认证信息。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>用户无需登录即可通过 docker search 命令来查找官方仓库中的镜像，并利用 docker pull 命令来将它下载到本地。</p><p>例如以 centos 为关键词进行搜索：</p><pre><code class="bash">$ sudo docker search centosNAME                                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDcentos                                          The official build of CentOS.                   465       [OK]tianon/centos                                   CentOS 5 and 6, created using rinse instea...   28blalor/centos                                   Bare-bones base CentOS 6.5 image                6                    [OK]saltstack/centos-6-minimal                                                                      6                    [OK]tutum/centos-6.4                                DEPRECATED. Use tutum/centos:6.4 instead. ...   5                    [OK]...</code></pre><p>可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、星级（表示该镜像的受欢迎程度）、是否官方创建、是否自动创建。 官方的镜像说明是官方项目组创建和维护的，automated 资源允许用户验证镜像的来源和内容。</p><p>根据是否是官方提供，可将镜像资源分为两类。 一种是类似 centos 这样的基础镜像，被称为基础或根镜像。这些基础镜像是由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。 还有一种类型，比如 tianon&#x2F;centos 镜像，它是由 Docker 的用户创建并维护的，往往带有用户名称前缀。可以通过前缀 user_name&#x2F; 来指定使用某个用户提供的镜像，比如 tianon 用户。</p><p>另外，在查找的时候通过 -s N 参数可以指定仅显示评价为 N 星以上的镜像。</p><p>下载官方 centos 镜像到本地。</p><pre><code class="bash">$ sudo docker pull centosPulling repository centos0b443ba03958: Download complete539c0211cd76: Download complete511136ea3c5a: Download complete7064731afe90: Download complete</code></pre><p>用户也可以在登录后通过 docker push 命令来将镜像推送到 Docker Hub。</p><h2 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h2><h3 id="安装-docker-registry"><a href="#安装-docker-registry" class="headerlink" title="安装 docker-registry"></a>安装 docker-registry</h3><h4 id="容器运行"><a href="#容器运行" class="headerlink" title="容器运行"></a>容器运行</h4><p>在安装了 Docker 后，可以通过获取官方 registry 镜像来运行。</p><pre><code class="bash">$ sudo docker run -d -p 5000:5000 registry</code></pre><p>这将使用官方的 registry 镜像来启动本地的私有仓库。 用户可以通过指定参数来配置私有仓库位置，例如配置镜像存储到 Amazon S3 服务。</p><pre><code>$ sudo docker run \         -e SETTINGS_FLAVOR=s3 \         -e AWS_BUCKET=acme-docker \         -e STORAGE_PATH=/registry \         -e AWS_KEY=AKIAHSHB43HS3J92MXZ \         -e AWS_SECRET=xdDowwlK7TJajV1Y7EoOZrmuPEJlHYcNP2k4j49T \         -e SEARCH_BACKEND=sqlalchemy \         -p 5000:5000 \         registry</code></pre><p>此外，还可以指定本地路径（如 &#x2F;home&#x2F;user&#x2F;registry-conf ）下的配置文件。</p><pre><code class="bash">$ sudo docker run -d -p 5000:5000 -v /home/user/registry-conf:/registry-conf -e DOCKER_REGISTRY_CONFIG=/registry-conf/config.yml registry</code></pre><p>默认情况下，仓库会被创建在容器的 &#x2F;tmp&#x2F;registry 下。可以通过 -v 参数来将镜像文件存放在本地的指定路径。 例如下面的例子将上传的镜像放到 &#x2F;opt&#x2F;data&#x2F;registry 目录。</p><pre><code class="bash">$ sudo docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry</code></pre><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>对于 Ubuntu 或 CentOS 等发行版，可以直接通过源安装。<br>1.Ubuntu</p><pre><code class="bash">$ sudo apt-get install -y build-essential python-dev libevent-dev python-pip liblzma-dev$ sudo pip install docker-registry</code></pre><p>2.CentOS</p><pre><code class="bash">$ sudo yum install -y python-devel libevent-devel python-pip gcc xz-devel$ sudo python-pip install docker-registry</code></pre><p>3.源码安装</p><pre><code class="bash">$ sudo apt-get install build-essential python-dev libevent-dev python-pip libssl-dev liblzma-dev libffi-dev$ git clone https://github.com/docker/docker-registry.git$ cd docker-registry$ sudo python setup.py install</code></pre><p>然后修改配置文件，主要修改 dev 模板段的 storage_path 到本地的存储仓库的路径。</p><pre><code class="bash">$ cp config/config_sample.yml config/config.yml</code></pre><p>之后启动 Web 服务。</p><pre><code class="bash">$ sudo gunicorn -c contrib/gunicorn.py docker_registry.wsgi:application</code></pre><p>或者</p><pre><code class="bash">$ sudo gunicorn --access-logfile - --error-logfile - -k gevent -b 0.0.0.0:5000 -w 4 --max-requests 100 docker_registry.wsgi:application</code></pre><p>此时使用 curl 访问本地的 5000 端口，看到输出 docker-registry 的版本信息说明运行成功。</p><blockquote><p><em>注：config&#x2F;config_sample.yml 文件是示例配置文件。</em></p></blockquote><h3 id="在私有仓库上传、下载、搜索镜像"><a href="#在私有仓库上传、下载、搜索镜像" class="headerlink" title="在私有仓库上传、下载、搜索镜像"></a>在私有仓库上传、下载、搜索镜像</h3><p>创建好私有仓库之后，就可以使用 docker tag 来标记一个镜像，然后推送它到仓库，别的机器上就可以下载下来了。例如私有仓库地址为 192.168.7.26:5000。</p><p>先在本机查看已有的镜像。</p><pre><code class="bash">$ sudo docker imagesREPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZEubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MBubuntu                            14.04               ba5877dc9bec        6 weeks ago         192.7 MB</code></pre><p>使用docker tag 将 ba58 这个镜像标记为 192.168.7.26:5000&#x2F;test（格式为 docker tag IMAGE[:TAG] [REGISTRYHOST&#x2F;][USERNAME&#x2F;]NAME[:TAG]）。</p><pre><code class="bash">$ sudo docker tag ba58 192.168.7.26:5000/testroot ~ # docker imagesREPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZEubuntu                            14.04               ba5877dc9bec        6 weeks ago         192.7 MBubuntu                            latest              ba5877dc9bec        6 weeks ago         192.7 MB192.168.7.26:5000/test            latest              ba5877dc9bec        6 weeks ago         192.7 MB</code></pre><p>使用 docker push 上传标记的镜像。</p><pre><code class="bash">$ sudo docker push 192.168.7.26:5000/testThe push refers to a repository [192.168.7.26:5000/test] (len: 1)Sending image listPushing repository 192.168.7.26:5000/test (1 tags)Image 511136ea3c5a already pushed, skippingImage 9bad880da3d2 already pushed, skippingImage 25f11f5fb0cb already pushed, skippingImage ebc34468f71d already pushed, skippingImage 2318d26665ef already pushed, skippingImage ba5877dc9bec already pushed, skippingPushing tag for rev [ba5877dc9bec] on &#123;http://192.168.7.26:5000/v1/repositories/test/tags/latest&#125;</code></pre><p>用 curl 查看仓库中的镜像。</p><pre><code class="bash">$ curl http://192.168.7.26:5000/v1/search&#123;&quot;num_results&quot;: 7, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/miaxis_j2ee&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/tomcat&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/ubuntu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/ubuntu_office&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/desktop_ubu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;dockerfile/ubuntu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/test&quot;&#125;]&#125;</code></pre><p>这里可以看到 {“description”: “”, “name”: “library&#x2F;test”}，表明镜像已经被成功上传了。</p><p>现在可以到另外一台机器去下载这个镜像。</p><pre><code class="bash">$ sudo docker pull 192.168.7.26:5000/testPulling repository 192.168.7.26:5000/testba5877dc9bec: Download complete511136ea3c5a: Download complete9bad880da3d2: Download complete25f11f5fb0cb: Download completeebc34468f71d: Download complete2318d26665ef: Download complete$ sudo docker imagesREPOSITORY                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE192.168.7.26:5000/test             latest              ba5877dc9bec        6 weeks ago         192.7 MB</code></pre><p>可以使用 <a href="https://github.com/yeasy/docker_practice/raw/master/_local/push_images.sh">这个脚本</a> 批量上传本地的镜像到注册服务器中，默认是本地注册服务器 127.0.0.1:5000。例如：</p><pre><code class="bash">$ wget https://github.com/yeasy/docker_practice/raw/master/_local/push_images.sh; sudo chmod a+x push_images.sh$ ./push_images.sh ubuntu:latest centos:centos7The registry server is 127.0.0.1Uploading ubuntu:latest...The push refers to a repository [127.0.0.1:5000/ubuntu] (len: 1)Sending image listPushing repository 127.0.0.1:5000/ubuntu (1 tags)Image 511136ea3c5a already pushed, skippingImage bfb8b5a2ad34 already pushed, skippingImage c1f3bdbd8355 already pushed, skippingImage 897578f527ae already pushed, skippingImage 9387bcc9826e already pushed, skippingImage 809ed259f845 already pushed, skippingImage 96864a7d2df3 already pushed, skippingPushing tag for rev [96864a7d2df3] on &#123;http://127.0.0.1:5000/v1/repositories/ubuntu/tags/latest&#125;Untagged: 127.0.0.1:5000/ubuntu:latestDoneUploading centos:centos7...The push refers to a repository [127.0.0.1:5000/centos] (len: 1)Sending image listPushing repository 127.0.0.1:5000/centos (1 tags)Image 511136ea3c5a already pushed, skipping34e94e67e63a: Image successfully pushed70214e5d0a90: Image successfully pushedPushing tag for rev [70214e5d0a90] on &#123;http://127.0.0.1:5000/v1/repositories/centos/tags/centos7&#125;Untagged: 127.0.0.1:5000/centos:centos7Done</code></pre><h2 id="仓库配置文件"><a href="#仓库配置文件" class="headerlink" title="仓库配置文件"></a>仓库配置文件</h2><p>Docker 的 Registry 利用配置文件提供了一些仓库的模板（flavor），用户可以直接使用它们来进行开发或生产部署。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>在 config_sample.yml 文件中，可以看到一些现成的模板段：</p><ul><li>common：基础配置</li><li>local：存储数据到本地文件系统</li><li>s3：存储数据到 AWS S3 中</li><li>dev：使用 local 模板的基本配置</li><li>test：单元测试使用</li><li>prod：生产环境配置（基本上跟s3配置类似）</li><li>gcs：存储数据到 Google 的云存储</li><li>swift：存储数据到 OpenStack Swift 服务</li><li>glance：存储数据到 OpenStack Glance 服务，本地文件系统为后备</li><li>glance-swift：存储数据到 OpenStack Glance 服务，Swift 为后备</li><li>elliptics：存储数据到 Elliptics key&#x2F;value 存储</li></ul><p>用户也可以添加自定义的模版段。</p><p>默认情况下使用的模板是 dev，要使用某个模板作为默认值，可以添加 SETTINGS_FLAVOR 到环境变量中，例如</p><pre><code>export SETTINGS_FLAVOR=dev</code></pre><p>另外，配置文件中支持从环境变量中加载值，语法格式为 <code>_env:VARIABLENAME[:DEFAULT]</code>。</p><h3 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h3><pre><code>common:    loglevel: info    search_backend: &quot;_env:SEARCH_BACKEND:&quot;    sqlalchemy_index_database:        &quot;_env:SQLALCHEMY_INDEX_DATABASE:sqlite:////tmp/docker-registry.db&quot;prod:    loglevel: warn    storage: s3    s3_access_key: _env:AWS_S3_ACCESS_KEY    s3_secret_key: _env:AWS_S3_SECRET_KEY    s3_bucket: _env:AWS_S3_BUCKET    boto_bucket: _env:AWS_S3_BUCKET    storage_path: /srv/docker    smtp_host: localhost    from_addr: docker@myself.com    to_addr: my@myself.comdev:    loglevel: debug    storage: local    storage_path: /home/myself/dockertest:    storage: local    storage_path: /tmp/tmpdockertmp</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（58）: sort</title>
      <link href="/2017/05/23/linux-command-57-sort/"/>
      <url>/2017/05/23/linux-command-57-sort/</url>
      
        <content type="html"><![CDATA[<p>sort是在Linux里非常常用的一个命令，管排序的。</p><h2 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h2><p>sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><pre><code class="bash">$ cat seq.txtappleallowphotobowlpealcheckcheese$ sort seq.txtallowapplebowlcheckcheesepealphoto</code></pre><h2 id="2-sort的-u选项"><a href="#2-sort的-u选项" class="headerlink" title="2.sort的-u选项"></a>2.sort的-u选项</h2><p>它的作用很简单，就是在输出行中去除重复行。</p><h2 id="3-sort的-r选项"><a href="#3-sort的-r选项" class="headerlink" title="3.sort的-r选项"></a>3.sort的-r选项</h2><p>sort默认的排序方式是升序，如果想改成降序，就加个-r就搞定了。</p><h2 id="4-sort的-o选项"><a href="#4-sort的-o选项" class="headerlink" title="4.sort的-o选项"></a>4.sort的-o选项</h2><p>由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort filename &gt; newfile。</p><p>但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。</p><pre><code class="bash">[rocrocket@rocrocket programming]$ sort -r number.txt &gt; number.txt[rocrocket@rocrocket programming]$ cat number.txt[rocrocket@rocrocket programming]$</code></pre><p>看，竟然将number清空了。</p><p>就在这个时候，-o选项出现了，它成功的解决了这个问题，让你放心的将结果写入原文件。这或许也是-o比重定向的唯一优势所在。</p><h2 id="5-sort的-n选项"><a href="#5-sort的-n选项" class="headerlink" title="5.sort的-n选项"></a>5.sort的-n选项</h2><p>你有没有遇到过10比2小的情况。我反正遇到过。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面喽。这也是sort的一贯作风。</p><p>我们如果想改变这种现状，就要使用-n选项，来告诉sort，“要以数值来排序”！</p><h2 id="6-sort的-t选项和-k选项"><a href="#6-sort的-t选项和-k选项" class="headerlink" title="6.sort的-t选项和-k选项"></a>6.sort的-t选项和-k选项</h2><p>如果有一个文件的内容是这样：</p><pre><code class="bash">[rocrocket@rocrocket programming]$ cat facebook.txtbanana:30:5.5apple:10:2.5pear:90:2.3orange:20:3.4</code></pre><p>这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。</p><p>那么我想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？</p><p>幸好，sort提供了-t选项，后面可以设定间隔符。（是不是想起了cut和paste的-d选项，共鸣～～）</p><p>指定了间隔符之后，就可以用-k来指定列数了。</p><pre><code class="bash">[rocrocket@rocrocket programming]$ sort -n -k 2 -t : facebook.txtapple:10:2.5orange:20:3.4banana:30:5.5pear:90:2.3</code></pre><p>我们使用冒号作为间隔符，并针对第二列来进行数值升序排序，结果很令人满意。</p><h2 id="7-其他的sort常用选项"><a href="#7-其他的sort常用选项" class="headerlink" title="7.其他的sort常用选项"></a>7.其他的sort常用选项</h2><p>-f会将小写字母都转换为大写字母来进行比较，亦即忽略大小写</p><p>-c会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1</p><p>-C会检查文件是否已排好序，如果乱序，不输出内容，仅返回1</p><p>-M会以月份来排序，比如JAN小于FEB等等</p><p>-b会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS修改DNS/GW/IP</title>
      <link href="/2017/05/23/CentOS-DNS-GW-IP/"/>
      <url>/2017/05/23/CentOS-DNS-GW-IP/</url>
      
        <content type="html"><![CDATA[<h1 id="1-修改DNS"><a href="#1-修改DNS" class="headerlink" title="1.修改DNS"></a>1.修改DNS</h1><p><strong>解决方案一：</strong><br>修改网卡的DNS的配置文件</p><pre><code class="bash">$ vim /etc/resolv.conf</code></pre><p>添加以下内容,设置两条dns</p><pre><code>nameserver 8.8.8.8 #google域名服务器nameserver 8.8.4.4 #google域名服务器</code></pre><blockquote><p>若未生效，可执行 <code>chattr +i /etc/resolv.conf</code> 设置文件属性只有root用户才能修改<br>然后执行 <code>service NetworkManager restart </code></p></blockquote><p><strong>解决方案二：</strong><br>对接口添加dns信息；编辑&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-xxx，xxx为你的网卡名，但一般是ifcfg-eth0的，具体的xxx根据你的网卡确定，在最下面添加：</p><pre><code>DNS1=8.8.8.8   #google dns服务器, 根据实际情况更换DNS2=8.8.4.4   #google dns服务器, 根据实际情况更换</code></pre><p>保存后重启网络</p><pre><code class="bash">$ service network restart</code></pre><h1 id="2-修改网关"><a href="#2-修改网关" class="headerlink" title="2.修改网关"></a>2.修改网关</h1><p>修改网关的配置文件(第3部分也可以设置)</p><pre><code class="bash">$ vim /etc/sysconfig/network</code></pre><p>修改为一下内容</p><pre><code>NETWORKING=yes(表示系统是否使用网络，一般设置为yes。如果设为no，则不能使用网络，而且很多系统服务程序将无法启动)HOSTNAME=centos(设置本机的主机名，这里设置的主机名要和/etc/hosts中设置的主机名对应)GATEWAY=192.168.1.1(设置本机连接的网关的IP地址。例如，网关为10.0.0.2)</code></pre><h1 id="3-修改ip"><a href="#3-修改ip" class="headerlink" title="3.修改ip"></a>3.修改ip</h1><p>修改对应的网卡的IP地址的配置文件</p><pre><code class="bash">$ vim /etc/sysconfig/network-scripts/ifcfg-eth0</code></pre><p>修改为一下内容</p><pre><code>DEVICE=eth0 #描述网卡对应的设备别名，例如ifcfg-eth0的文件中它为eth0BOOTPROTO=static #设置网卡获得ip地址的方式，可能的选项为static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址BROADCAST=192.168.0.255 #对应的子网广播地址HWADDR=00:07:E9:05:E8:B4 #对应的网卡物理地址IPADDR=12.168.1.2 #如果设置网卡获得 ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址IPV6INIT=noIPV6_AUTOCONF=noNETMASK=255.255.255.0 #网卡对应的网络掩码NETWORK=192.168.1.0 #网卡对应的网络地址ONBOOT=yes #系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile指令详解</title>
      <link href="/2017/05/22/Dockerfile/"/>
      <url>/2017/05/22/Dockerfile/</url>
      
        <content type="html"><![CDATA[<p><code>Dockerfile</code> 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>命令格式：</p><pre><code class="bash">$ docker build [选项] &lt;上下文路径/URL/-&gt;</code></pre><p>示例：</p><pre><code class="bash"># 构建一个名为 nginx:v3 的镜像$ docker build -t nginx:v3 .</code></pre><h2 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h2><ol><li><code>shell</code>格式：RUN &lt;命令&gt;，就像直接在命令行中输入的命令一样。刚才写的 Dockrfile 中的 RUN 指令就是这种格式。</li></ol><pre><code class="bash">RUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39; &gt; /usr/share/nginx/html/index.html</code></pre><ol start="2"><li><code>exec</code>格式：RUN [“可执行文件”, “参数1”, “参数2”]，这更像是函数调用中的格式。</li></ol><h2 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h2><p>格式：</p><ol><li><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></li><li><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code><br>和 <code>RUN</code> 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。<br>COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。比如：</li></ol><pre><code class="bash">COPY package.json /usr/src/app/</code></pre><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p><pre><code class="bash">COPY hom* /mydir/COPY hom?.txt /mydir/</code></pre><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><h2 id="ADD更高级的复制文件"><a href="#ADD更高级的复制文件" class="headerlink" title="ADD更高级的复制文件"></a>ADD更高级的复制文件</h2><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p><p>比如 <code>&lt;源路径&gt;</code> 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。所以不如直接使用 RUN 指令，然后使用 <code>wget</code> 或者 <code>curl</code> 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</p><p>如果 &lt;源路径&gt; 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。</p><p>在 Docker 官方的最佳实践文档中要求，尽可能的使用 COPY 。</p><p>因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p><h2 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h2><p>CMD 指令的格式和 RUN 相似，也是两种格式：<br>1） shell 格式：<code>CMD &lt;命令&gt;</code><br>2） exec 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code><br>3） 参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。</p><p>Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。</p><p>在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的 CMD 是 &#x2F;bin&#x2F;bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat &#x2F;etc&#x2F;os-release。这就是用 cat &#x2F;etc&#x2F;os-release 命令替换了默认的 &#x2F;bin&#x2F;bash 命令了，输出了系统版本信息。</p><p>在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 “，而不要使用单引号。</p><h2 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h2><p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 –entrypoint 来指定。</p><p>当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：</p><pre><code class="bash">&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></pre><ol><li>场景一：让镜像变成像命令一样使用</li></ol><pre><code class="bash">FROM ubuntu:16.04RUN apt-get update \    &amp;&amp; apt-get install -y curl \    &amp;&amp; rm -rf /var/lib/apt/lists/*ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;, &quot;http://ip.cn&quot; ]</code></pre><pre><code class="bash">$ docker run myip -i</code></pre><p>这是因为当存在 ENTRYPOINT 后，CMD 的内容将会作为参数传给 ENTRYPOINT，而这里 -i 就是新的 CMD，因此会作为参数传给 curl，从而达到了我们预期的效果。</p><ol start="2"><li>场景二：应用运行前的准备工作<br>可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 <CMD>）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：</li></ol><pre><code class="bash">FROM alpine:3.4...RUN addgroup -S redis &amp;&amp; adduser -S -G redis redis...ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]EXPOSE 6379CMD [ &quot;redis-server&quot; ]</code></pre><p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT 为 docker-entrypoint.sh 脚本。</p><pre><code class="bash">#!/bin/sh...# allow the container to be started with `--user`if [ &quot;$1&quot; = &#39;redis-server&#39; -a &quot;$(id -u)&quot; = &#39;0&#39; ]; then    chown -R redis .    exec su-exec redis &quot;$0&quot; &quot;$@&quot;fiexec &quot;$@&quot;</code></pre><p>该脚本的内容就是根据 CMD 的内容来判断，如果是 redis-server 的话，则切换到 redis 用户身份启动服务器，否则依旧使用 root 身份执行。比如：</p><pre><code class="bash">$ docker run -it redis iduid=0(root) gid=0(root) groups=0(root)</code></pre><h2 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h2><p>格式有两种：</p><ol><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ol><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><pre><code>ENV VERSION=1.0 DEBUG=on \    NAME=&quot;Happy Feet&quot;</code></pre><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像 Dockerfile 中，就有类似这样的代码：</p><pre><code>ENV NODE_VERSION 7.2.0RUN curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot; \  &amp;&amp; curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot; \  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \  &amp;&amp; grep &quot; node-v$NODE_VERSION-linux-x64.tar.xz\$&quot; SHASUMS256.txt | sha256sum -c - \  &amp;&amp; tar -xJf &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; -C /usr/local --strip-components=1 \  &amp;&amp; rm &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; SHASUMS256.txt.asc SHASUMS256.txt \  &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs</code></pre><p>在这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。</p><p>下列指令可以支持环境变量展开： ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD。</p><p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。</p><h2 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h2><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。</p><p>Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 docker build 中用 –build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。</p><p>在 1.13 之前的版本，要求 –build-arg 中的参数名，必须在 Dockerfile 中用 ARG 定义过了，换句话说，就是 –build-arg 指定的参数，必须在 Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 Dockerfile 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p><h2 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h2><p>格式为：</p><ol><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ol><p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p><pre><code class="bash">VOLUME /data</code></pre><p>这里的 &#x2F;data 目录就会在运行时自动挂载为匿名卷，任何向 &#x2F;data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p><pre><code class="bash">$ docker run -d -v mydata:/data xxxx</code></pre><p>在这行命令中，就使用了 mydata 这个命名卷挂载到了 &#x2F;data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。</p><h2 id="EXPOSE-声明端口"><a href="#EXPOSE-声明端口" class="headerlink" title="EXPOSE 声明端口"></a>EXPOSE 声明端口</h2><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p><p>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</p><p>此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 –icc&#x3D;false，当指定该参数后，容器间将默认无法互访，除非互相间使用了 –links 参数的容器才可以互通，并且只有镜像中 EXPOSE 所声明的端口才可以被访问。这个 –icc&#x3D;false 的用法，在引入了 docker network 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。</p><p>要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p><h2 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h2><p>格式为 WORKDIR &lt;工作目录路径&gt;。</p><p>使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p><p>之前提到一些初学者常犯的错误是把 Dockerfile 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p><pre><code class="bash">RUN cd /appRUN echo &quot;hello&quot; &gt; world.txt</code></pre><p>如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 &#x2F;app&#x2F;world.txt 文件，或者其内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dokerfile 构建分层存储的概念不了解所导致的错误。</p><p>之前说过每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd &#x2F;app 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p><p>因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。</p><h2 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h2><p>格式：<code>USER &lt;用户名&gt;</code></p><p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。</p><p>当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p><pre><code>RUN groupadd -r redis &amp;&amp; useradd -r -g redis redisUSER redisRUN [ &quot;redis-server&quot; ]</code></pre><p>如果以 root 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 su 或者 sudo，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 gosu，可以从其项目网站看到进一步的信息：<a href="https://github.com/tianon/gosu">https://github.com/tianon/gosu</a></p><pre><code># 建立 redis 用户，并使用 gosu 换另一个用户执行命令RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis# 下载 gosuRUN wget -O /usr/local/bin/gosu &quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&quot; \    &amp;&amp; chmod +x /usr/local/bin/gosu \    &amp;&amp; gosu nobody true# 设置 CMD，并以另外的用户执行CMD [ &quot;exec&quot;, &quot;gosu&quot;, &quot;redis&quot;, &quot;redis-server&quot; ]</code></pre><h2 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a>HEALTHCHECK 健康检查</h2><p>格式：</p><ol><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li></ol><p>HEALTHCHECK 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。</p><p>在没有 HEALTHCHECK 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</p><p>而自 1.12 之后，Docker 提供了 HEALTHCHECK 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。</p><p>当在一个镜像指定了 HEALTHCHECK 指令后，用其启动容器，初始状态会为 starting，在 HEALTHCHECK 指令检查成功后变为 healthy，如果连续一定次数失败，则会变为 unhealthy。</p><p>HEALTHCHECK 支持下列选项：</p><ol><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；<br>3)<code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。</li></ol><p>和 CMD, ENTRYPOINT 一样，HEALTHCHECK 只可以出现一次，如果写了多个，只有最后一个生效。</p><p>在 HEALTHCHECK [选项] CMD 后面的命令，格式和 ENTRYPOINT 一样，分为 shell 格式，和 exec 格式。命令的返回值决定了该次健康检查的成功与否：0：成功；1：失败；2：保留，不要使用这个值。</p><p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 curl 来帮助判断，其 Dockerfile 的 HEALTHCHECK 可以这么写：</p><pre><code>FROM nginxRUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*HEALTHCHECK --interval=5s --timeout=3s \  CMD curl -fs http://localhost/ || exit 1</code></pre><p>这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 curl -fs <a href="http://localhost/">http://localhost/</a> || exit 1 作为健康检查命令。</p><p>使用 docker build 来构建这个镜像：</p><pre><code class="bash">$ docker build -t myweb:v1 .</code></pre><p>构建好了后，我们启动一个容器：</p><pre><code class="bash">$ docker run -d --name web -p 80:80 myweb:v1</code></pre><p>当运行该镜像后，可以通过 docker ps 看到最初的状态为 (health: starting)：</p><pre><code class="bash">$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES03e28eb00bd0        myweb:v1            &quot;nginx -g &#39;daemon off&quot;   3 seconds ago       Up 2 seconds (health: starting)   80/tcp, 443/tcp     web</code></pre><p>在等待几秒钟后，再次 docker ps，就会看到健康状态变化为了 (healthy)：</p><pre><code class="bash">$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES03e28eb00bd0        myweb:v1            &quot;nginx -g &#39;daemon off&quot;   18 seconds ago      Up 16 seconds (healthy)   80/tcp, 443/tcp     web</code></pre><p>如果健康检查连续失败超过了重试次数，状态就会变为 (unhealthy)。</p><p>为了帮助排障，健康检查命令的输出（包括 stdout 以及 stderr）都会被存储于健康状态里，可以用 docker inspect 来查看。</p><pre><code class="bash">$ docker inspect --format &#39;&#123;&#123;json .State.Health&#125;&#125;&#39; web | python -m json.tool&#123;    &quot;FailingStreak&quot;: 0,    &quot;Log&quot;: [        &#123;            &quot;End&quot;: &quot;2016-11-25T14:35:37.940957051Z&quot;,            &quot;ExitCode&quot;: 0,            &quot;Output&quot;: &quot;&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\n&lt;style&gt;\n    body &#123;\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.&lt;/p&gt;\n\n&lt;p&gt;For online documentation and support please refer to\n&lt;a href=\&quot;http://nginx.org/\&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\nCommercial support is available at\n&lt;a href=\&quot;http://nginx.com/\&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n&quot;,            &quot;Start&quot;: &quot;2016-11-25T14:35:37.780192565Z&quot;        &#125;    ],    &quot;Status&quot;: &quot;healthy&quot;&#125;</code></pre><h2 id="ONBUILD-为他人做嫁衣裳"><a href="#ONBUILD-为他人做嫁衣裳" class="headerlink" title="ONBUILD 为他人做嫁衣裳"></a>ONBUILD 为他人做嫁衣裳</h2><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p><p>ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><p>Dockerfile 中的其它指令都是为了定制当前镜像而准备的，唯有 ONBUILD 是为了帮助别人定制自己而准备的。</p><p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 npm 进行包管理，所有依赖、配置、启动信息等会放到 package.json 文件里。在拿到程序代码后，需要先进行 npm install 才可以获得所有需要的依赖。然后就可以通过 npm start 来启动应用。因此，一般来说会这样写 Dockerfile：</p><pre><code>FROM node:slimRUN &quot;mkdir /app&quot;WORKDIR /appCOPY ./package.json /appRUN [ &quot;npm&quot;, &quot;install&quot; ]COPY . /app/CMD [ &quot;npm&quot;, &quot;start&quot; ]</code></pre><p>把这个 Dockerfile 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 Dockerfile 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p><p>如果第一个 Node.js 项目在开发过程中，发现这个 Dockerfile 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 Dockerfile，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 Dockerfile 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 Dockerfile，而第二个项目的 Dockerfile 就会被自动修复。</p><p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 Dockerfile 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 Dockerfile 就会变为：</p><pre><code>FROM node:slimRUN &quot;mkdir /app&quot;WORKDIR /appCMD [ &quot;npm&quot;, &quot;start&quot; ]</code></pre><p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 my-node 的话，各个项目内的自己的 Dockerfile 就变为：</p><pre><code>FROM my-nodeCOPY ./package.json /appRUN [ &quot;npm&quot;, &quot;install&quot; ]COPY . /app/</code></pre><p>基础镜像变化后，各个项目都用这个 Dockerfile 重新构建镜像，会继承基础镜像的更新。</p><p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 Dockerfile 里面有些东西需要调整呢？比如 npm install 都需要加一些参数，那怎么办？这一行 RUN 是不可能放入基础镜像的，因为涉及到了当前项目的 .&#x2F;package.json，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 Dockerfile 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p><p>ONBUILD 可以解决这个问题。让我们用 ONBUILD 重新写一下基础镜像的 Dockerfile:</p><pre><code>FROM node:slimRUN &quot;mkdir /app&quot;WORKDIR /appONBUILD COPY ./package.json /appONBUILD RUN [ &quot;npm&quot;, &quot;install&quot; ]ONBUILD COPY . /app/CMD [ &quot;npm&quot;, &quot;start&quot; ]</code></pre><p>这次我们回到原始的 Dockerfile，但是这次将项目相关的指令加上 ONBUILD，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 Dockerfile 就变成了简单地：</p><pre><code>FROM my-node</code></pre><p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 Dockerfile 构建镜像时，之前基础镜像的那三行 ONBUILD 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 npm install，生成应用镜像。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Docker–从入门到实践: <a href="https://yeasy.gitbooks.io/docker_practice/content/">https://yeasy.gitbooks.io/docker_practice/content/</a><br>Dockerfie 官方文档：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a><br>Dockerfile 最佳实践文档：<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker镜像</title>
      <link href="/2017/05/19/docker-image/"/>
      <url>/2017/05/19/docker-image/</url>
      
        <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code class="bash"># 官方 的安装脚本$ curl -sSL https://get.docker.com/ | sh# 阿里云 的安装脚本$ curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -# DaoCloud 的安装脚本$ curl -sSL https://get.daocloud.io/docker | sh</code></pre><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><pre><code># 获取镜像，registry为空默认从Docker Hub上获取docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt;# 交互式运行，退出删除: -i:交互式 ,-t:终端,--rm 退出删除 ,bash 启动bash窗口$ docker run -it --rm ubuntu:14.04 bash# 列出已下载的镜像（只显示顶层镜像） -a:显示所有镜像 image_name:指定列出某个镜像$ docker images [-a] [image_name]# 只显示虚悬镜像(dangling image) -f:--filter 过滤$ docker images -f dangling=true# 过滤从mongo:3.2建立之后的镜像$ docker images -f since=mongo:3.2# 通过label过滤$ docker images -f label=com.example.version=0.1# 只显示镜像id$ docker images -q# 只包含镜像ID和仓库名$ docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;# 以表格等距显示 有标题行，和默认一样，不过自己定义列$ docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;# 删除镜像ID为image_id的镜像$ docker rmi &lt;image_id&gt;# 删除虚悬镜像$ docker rmi $(docker images -q -f dangling=true)# 将容器保存为镜像$ docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]# 将容器保存为镜像$ docker commit \    --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \    --message &quot;修改了默认网页&quot; \    webserver \    nginx:v2$ docker history nginx:v2</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker初体验</title>
      <link href="/2017/05/19/docker-first/"/>
      <url>/2017/05/19/docker-first/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="笔者环境"><a href="#笔者环境" class="headerlink" title="笔者环境"></a>笔者环境</h3><p>操作系统：deepin 15.4 Desktop 64Bit</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre><code class="bash"># 官方 的安装脚本$ curl -sSL https://get.docker.com/ | sh# 阿里云 的安装脚本$ curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -# DaoCloud 的安装脚本$ curl -sSL https://get.daocloud.io/docker | sh</code></pre><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p><a href="https://hub.docker.com/explore/">Docker Hub</a> 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像并运行。<br>从 Docker Registry 获取镜像的命令是 docker pull。其命令格式为：</p><pre><code class="bash">$ docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt;</code></pre><p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式。</p><ul><li>Docker Registry地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 <code>Docker Hub</code>。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，既 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</li></ul><pre><code class="bash">$ sudo docker pull ubuntu</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>有了镜像后，我们就可以以这个镜像为基础启动一个容器来运行。以上面的 <code>ubuntu</code> 为例，如果我们打算启动里面的 <code>bash</code> 并且进行交互式操作的话，可以执行下面的命令。</p><pre><code class="bash">$ sudo docker run -it --rm ubunturoot@0ae011f7b5be:/# cat /etc/os-release  NAME=&quot;Ubuntu&quot;VERSION=&quot;16.04.2 LTS (Xenial Xerus)&quot;ID=ubuntuID_LIKE=debianPRETTY_NAME=&quot;Ubuntu 16.04.2 LTS&quot;VERSION_ID=&quot;16.04&quot;HOME_URL=&quot;http://www.ubuntu.com/&quot;SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;VERSION_CODENAME=xenialUBUNTU_CODENAME=xenial</code></pre><p><code>docker run</code> 就是运行容器的命令</p><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</li><li><code>ubuntu</code>：这是指用 <code>ubuntu</code> 镜像为基础来启动容器。</li><li><code>bash</code>：放在镜像名后的是命令，这里我们希望有个交互式 <code>Shell</code>，因此用的是 <code>bash</code>。</li></ul><p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 <code>cat /etc/os-release</code>，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 <code>Ubuntu 16.04.2 LTS</code> 系统。</p><p>最后通过 exit 退出了这个容器。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux无损调整分区大小</title>
      <link href="/2017/05/17/linux%E6%97%A0%E6%8D%9F%E8%B0%83%E6%95%B4%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/"/>
      <url>/2017/05/17/linux%E6%97%A0%E6%8D%9F%E8%B0%83%E6%95%B4%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><ul><li>系统环境: Red Hat 4.8.5-11</li><li>情况：<ol><li>home：500G</li><li>root：50G</li><li>root分区不够用</li></ol></li><li>思路：把home分区的空间划一部分到root分区</li></ul><pre><code class="bash"># 设置home分区大小为200G，释放300G空间$ lvreduce -L 200G /dev/centos/home# 将空闲空间扩展到root分区$ lvextend -l +100%FREE /dev/centos/root# 使用XFS文件系统自带的命令集增加分区空间$ xfs_growfs /dev/mapper/centos-root</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="situation"><a href="#situation" class="headerlink" title="situation"></a>situation</h3><p>挂载在根目录的分区 <code>/dev/mapper/centos-root</code> 爆满，占用100%</p><pre><code class="bash">$ df -hFilesystem               Size  Used Avail Use% Mounted on/dev/mapper/centos-root   50G   50G   19M 100% /devtmpfs                  32G     0   32G   0% /devtmpfs                     32G     0   32G   0% /dev/shmtmpfs                     32G  2.5G   29G   8% /runtmpfs                     32G     0   32G   0% /sys/fs/cgroup/dev/mapper/centos-home  476G   33M  476G   1% /home/dev/sda1                497M  238M  259M  48% /boottmpfs                    6.3G     0  6.3G   0% /run/user/0</code></pre><h3 id="analyze"><a href="#analyze" class="headerlink" title="analyze"></a>analyze</h3><p>挂载在根目录的分区空间太小，只有50G，而服务器 <code>home</code> 目录为非常用目录，挂在了近500G的空间。</p><p>思路：从 <code>centos-home</code> 分区划出300G空间到 <code>centos-root</code> 分区。</p><h3 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h3><h4 id="1-查看各分区信息"><a href="#1-查看各分区信息" class="headerlink" title="1.查看各分区信息"></a>1.查看各分区信息</h4><pre><code class="bash">$ lvdisplay--- Logical volume ---LV Path                /dev/centos/homeLV Name                homeVG Name                centosLV UUID                1fAt1E-bQsa-1HXR-MCE2-5VZ1-xzBz-iI1SLvLV Write Access        read/writeLV Creation host, time localhost, 2016-10-26 17:23:47 +0800LV Status              available# open                 0LV Size                475.70 GiBCurrent LE             121778Segments               1Allocation             inheritRead ahead sectors     auto- currently set to     256Block device           253:2--- Logical volume ---LV Path                /dev/centos/rootLV Name                rootVG Name                centosLV UUID                lD64zY-yc3Z-SZaB-dAjK-03YM-2gM8-pfj4ooLV Write Access        read/writeLV Creation host, time localhost, 2016-10-26 17:23:48 +0800LV Status              available# open                 1LV Size                50.00 GiBCurrent LE             12800Segments               1Allocation             inheritRead ahead sectors     auto- currently set to     256Block device           253:0</code></pre><h4 id="2-减少-home分区空间"><a href="#2-减少-home分区空间" class="headerlink" title="2.减少&#x2F;home分区空间"></a>2.减少&#x2F;home分区空间</h4><pre><code class="bash"># 释放 /dev/centos/home 分区 300G 的空间# 命令设置 /dev/centos/home 分区 200G空间$ lvreduce -L 200G /dev/centos/homeWARNING: Reducing active logical volume to 200.00 GiB. THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce centos/home? [y/n]: y Size of logical volume centos/home changed from 475.70 GiB (121778 extents) to 200.00 GiB (51200 extents). Logical volume centos/home successfully resized.</code></pre><h4 id="3-增加-root分区空间"><a href="#3-增加-root分区空间" class="headerlink" title="3.增加&#x2F;root分区空间"></a>3.增加&#x2F;root分区空间</h4><pre><code class="bash">$ lvextend -l +100%FREE /dev/centos/rootSize of logical volume centos/root changed from 50.06 GiB (12816 extents) to 325.76 GiB (83394 extents).Logical volume centos/root successfully resized.</code></pre><h4 id="4-扩展XFS文件空间大小"><a href="#4-扩展XFS文件空间大小" class="headerlink" title="4.扩展XFS文件空间大小"></a>4.扩展XFS文件空间大小</h4><pre><code class="bash">$ xfs_growfs /dev/mapper/centos-rootmeta-data=/dev/mapper/centos-root isize=256    agcount=4, agsize=3276800 blks         =                       sectsz=512   attr=2, projid32bit=1         =                       crc=0        finobt=0 spinodes=0data     =                       bsize=4096   blocks=13107200, imaxpct=25         =                       sunit=0      swidth=0 blksnaming   =version 2              bsize=4096   ascii-ci=0 ftype=0log      =internal               bsize=4096   blocks=6400, version=2         =                       sectsz=512   sunit=0 blks, lazy-count=1realtime =none                   extsz=4096   blocks=0, rtextents=0data blocks changed from 13107200 to 85395456</code></pre><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 磁盘分区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git统计操作</title>
      <link href="/2017/05/16/git-log/"/>
      <url>/2017/05/16/git-log/</url>
      
        <content type="html"><![CDATA[<h2 id="按commit统计"><a href="#按commit统计" class="headerlink" title="按commit统计"></a>按commit统计</h2><pre><code class="bash"># 统计当前作者今天（从凌晨1点开始）提交次数$ git log --author=&quot;$(git config --get user.name)&quot; --no-merges --since=1am --stat# 按提交作者统计，按提交次数排序$ git shortlog -sn$ git shortlog --numbered --summary# 只看某作者提交的commit数$ git log --author=&quot;faker&quot; --oneline --shortstat# 按提交作者统计，提交数量排名前5（看全部，去掉head管道即可）$ git log --pretty=&#39;%aN&#39; | sort | uniq -c | sort -k1 -n -r | head -n 5# 按提交者邮箱统计，提交数量排名前5$ git log --pretty=format:%ae | gawk -- &#39;&#123; ++c[$0]; &#125; END &#123; for(cc in c) printf &quot;%5d %s\n&quot;,c[cc],cc; &#125;&#39; | sort -u -n -r | head -n 5# 统计贡献者数量$ git log --pretty=&#39;%aN&#39; | sort -u | wc -l# 统计提交数量$ git log --oneline | wc -l</code></pre><h2 id="按代码行数统计"><a href="#按代码行数统计" class="headerlink" title="按代码行数统计"></a>按代码行数统计</h2><pre><code class="bash"># 统计指定作者增删行数$ git log --author=&quot;faker&quot; --pretty=tformat: --numstat | awk &#39;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#39; -# 统计当前作者增删行数$ git log --author=&quot;$(git config --get user.name)&quot; --pretty=tformat: --numstat | gawk &#39;&#123; add += $1 ; subs += $2 ; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s removed lines : %s total lines: %s\n&quot;,add,subs,loc &#125;&#39; -# 统计所有邮箱前缀的增删行数 -英文版$ git log --shortstat --pretty=&quot;%cE&quot; | sed &#39;s/\(.*\)@.*/\1/&#39; | grep -v &quot;^$&quot; | awk &#39;BEGIN &#123; line=&quot;&quot;; &#125; !/^ / &#123; if (line==&quot;&quot; || !match(line, $0)) &#123;line = $0 &quot;,&quot; line &#125;&#125; /^ / &#123; print line &quot; # &quot; $0; line=&quot;&quot;&#125;&#39; | sort | sed -E &#39;s/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\1 0 insertions\(+\), \2/;s/\(\+\)$/\(\+\), 0 deletions\(-\)/;s/insertions?\(\+\), //;s/ deletions?\(-\)//&#39; | awk &#39;BEGIN &#123;name=&quot;&quot;; files=0; insertions=0; deletions=0;&#125; &#123;if ($1 != name &amp;&amp; name != &quot;&quot;) &#123; print name &quot;: &quot; files &quot; files changed, &quot; insertions &quot; insertions(+), &quot; deletions &quot; deletions(-), &quot; insertions-deletions &quot; net&quot;; files=0; insertions=0; deletions=0; name=$1; &#125; name=$1; files+=$2; insertions+=$3; deletions+=$4&#125; END &#123;print name &quot;: &quot; files &quot; files changed, &quot; insertions &quot; insertions(+), &quot; deletions &quot; deletions(-), &quot; insertions-deletions &quot; net&quot;;&#125;&#39;# 统计所有邮箱前缀的增删行数 -中文版$ git log --shortstat --pretty=&quot;%cE&quot; | sed &#39;s/\(.*\)@.*/\1/&#39; | grep -v &quot;^$&quot; | awk &#39;BEGIN &#123; line=&quot;&quot;; &#125; !/^ / &#123; if (line==&quot;&quot; || !match(line, $0)) &#123;line = $0 &quot;,&quot; line &#125;&#125; /^ / &#123; print line &quot; # &quot; $0; line=&quot;&quot;&#125;&#39; | sort | sed -E &#39;s/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\1 0 insertions\(+\), \2/;s/\(\+\)$/\(\+\), 0 deletions\(-\)/;s/insertions?\(\+\), //;s/ deletions?\(-\)//&#39; | awk &#39;BEGIN &#123;name=&quot;&quot;; files=0; insertions=0; deletions=0;&#125; &#123;if ($1 != name &amp;&amp; name != &quot;&quot;) &#123; print name &quot;: &quot; files &quot; 个文件被改变, &quot; insertions &quot; 行被插入(+), &quot; deletions &quot; 行被删除(-), &quot; insertions-deletions &quot; 行剩余&quot;; files=0; insertions=0; deletions=0; name=$1; &#125; name=$1; files+=$2; insertions+=$3; deletions+=$4&#125; END &#123;print name &quot;: &quot; files &quot; 个文件被改变, &quot; insertions &quot; 行被插入(+), &quot; deletions &quot; 行被删除(-), &quot; insertions-deletions &quot; 行剩余&quot;;&#125;&#39;# 统计所有作者增删行数 --英文版$ git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --numstat | awk &#39;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#39; -; done# 统计所有作者增删行数 --中文版$ git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --numstat | awk &#39;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;添加行数: %s, 删除行数: %s, 总行数: %s\n&quot;, add, subs, loc &#125;&#39; -; done</code></pre><h2 id="git-log-说明"><a href="#git-log-说明" class="headerlink" title="git log 说明"></a>git log 说明</h2><blockquote><p>git log 参数说明：<br><code>--</code>author   指定作者<br><code>--</code>stat   显示每次更新的文件修改统计信息，会列出具体文件列表<br><code>--</code>shortstat    统计每个commit 的文件修改行数，包括增加，删除，但不列出文件列表：<br><code>--</code>numstat   统计每个commit 的文件修改行数，包括增加，删除，并列出文件列表：</p></blockquote><blockquote><p>-p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新<br>       例如：git log -p  -2<br><code>--</code>name-only 仅在提交信息后显示已修改的文件清单<br><code>--</code>name-status 显示新增、修改、删除的文件清单<br><code>--</code>abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符<br><code>--</code>relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）<br><code>--</code>graph 显示 ASCII 图形表示的分支合并历史<br><code>--</code>pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）<br>       <strong>例如：</strong><br>       <code>git log --pretty=oneline</code> ;<br>       <code>git log --pretty=short</code> ;<br>        <code>git log --pretty=full</code> ;<br>        git log –pretty&#x3D;fuller<br><code>--</code>pretty&#x3D;tformat:   可以定制要显示的记录格式，这样的输出便于后期编程提取分析<br>       <strong>例如：</strong><br>       <code>git log --pretty=format:&quot;&quot;%h - %an, %ar : %s&quot;&quot;</code><br>       下面列出了常用的格式占位符写法及其代表的意义。<br>       选项       说明<br>       %H      提交对象（commit）的完整哈希字串<br>       %h      提交对象的简短哈希字串<br>       %T      树对象（tree）的完整哈希字串<br>       %t      树对象的简短哈希字串<br>       %P      父对象（parent）的完整哈希字串<br>       %p      父对象的简短哈希字串<br>       %an     作者（author）的名字<br>       %ae     作者的电子邮件地址<br>       %ad     作者修订日期（可以用 -date&#x3D; 选项定制格式）<br>       %ar     作者修订日期，按多久以前的方式显示<br>       %cn     提交者(committer)的名字<br>       %ce     提交者的电子邮件地址<br>       %cd     提交日期<br>       %cr     提交日期，按多久以前的方式显示<br>       %s      提交说明<br><code>--</code>since  限制显示输出的范围，<br>       例如： <code>git log --since=2.weeks</code>    显示最近两周的提交<br>       选项 说明<br>       -(n)    仅显示最近的 n 条提交<br>       <code>--</code>since, <code>--</code>after 仅显示指定时间之后的提交。<br>       <code>--</code>until, <code>--</code>before 仅显示指定时间之前的提交。<br>       <code>--</code>author 仅显示指定作者相关的提交。<br>       <code>--</code>committer 仅显示指定提交者相关的提交。</p></blockquote><blockquote><p>   <strong>一些例子：</strong><br><code>git log --until=1.minute.ago</code> &#x2F;&#x2F; 一分钟之前的所有 log<br><code>git log --since=1.day.ago</code> &#x2F;&#x2F;一天之内的log<br><code>git log --since=1.hour.ago</code> &#x2F;&#x2F;一个小时之内的 log<br><code>git log --since=1.month.ago --until=2.weeks.ago</code> &#x2F;&#x2F;一个月之前到半个月之前的log<br><code>git log --since ==2013-08.01 --until=2013-09-07</code> &#x2F;&#x2F;某个时间段的 log<br><code>git blame</code> 看看某一个文件的相关历史记录<br>例如：<code>git blame index.html --date short</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决linux下zip文件解压乱码</title>
      <link href="/2017/04/25/%E8%A7%A3%E5%86%B3linux%E4%B8%8Bzip%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E4%B9%B1%E7%A0%81/"/>
      <url>/2017/04/25/%E8%A7%A3%E5%86%B3linux%E4%B8%8Bzip%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>由于zip格式并没有指定编码格式，Windows下生成的zip文件中的编码是GBK&#x2F;GB2312等，因此，导致这些zip文件在Linux下解压时出现乱码问题，因为Linux下的默认编码是UTF8。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用7z解压。</p><ol><li>安装p7zip和convmv</li></ol><pre><code class="bash"># fedora$ su -c &#39;yum install p7zip convmv&#39;# ubuntu$ sudo apt-get install p7zip convmv</code></pre><ol start="2"><li>执行一下命令解压缩</li></ol><pre><code class="bash"># 使用7z解压缩$ LANG=C 7za x your-zip-file.zip# 递归转码$ convmv -f GBK -t utf8 --notest -r .</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密算法简介</title>
      <link href="/2017/04/22/encryption-algorithm/"/>
      <url>/2017/04/22/encryption-algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="一、对称密钥算法"><a href="#一、对称密钥算法" class="headerlink" title="一、对称密钥算法"></a>一、对称密钥算法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对称加密（Symmetric-key algorithm）是指加解密用同一个密钥的算法，根据具体实现分为流加密和分组加密两种类型：</p><ul><li>流加密（Stream cipher）是对称加密常用的一种实现方法，加密和解密双方使用相同伪随机加密数据流，一般都是逐位异或随机密码本的内容。</li><li>分组加密加密（Block cipher），也叫块加密，将明文分成多个等长的模块（block），使用确定的算法和对称密钥对每组分别加密解密。现代分组加密建立在迭代的思想上产生密文。迭代产生的密文在每一轮加密中使用不同的子密钥，而子密钥生成自原始密钥。</li></ul><p>对称加密普遍比非对称加密速度要快，实现更简单，适合大量内容的加密</p><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><p>DES (Data Encryption Standard) 是一种分组加密算法</p><p>DES算法的入口参数有三个:Key,Data,Mode，Key是密钥密钥占7个字节56位（64位里另外8位是用来校验的），Data是加密内容，占8个字节64位，Mode是加密还是解密。</p><p>DES算法于1976被确定，现在已经被认为不够安全，主要原因是56位的密钥过短。据说这个算法因为包含一些机密设计元素，被怀疑内含美国国家安全局（NSA）的后门。</p><p>DES算法有个拓展算法叫3DES，就是对数据块进行三次DES加密，增加爆破成本，但本质上也不够安全。</p><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><p>RC4 (Rivest Cipher 4) 是一种流加密算法</p><p>RC4起源于1987年，现在已经被认为不够安全。<br>RC4由伪随机数生成器和异或运算组成。RC4的密钥长度可变，范围是[1,255]。RC4一个字节一个字节地加解密。给定一个密钥，伪随机数生成器接受密钥并产生一个S盒。S盒用来加密数据，而且在加密过程中S盒会变化。</p><p>由于异或运算的对合性，RC4加密解密使用同一套算法。这个算法实现起来很简单，只用了最基本的加、异或、循环，话说我大学时某个课程设计的做的加密算法就是简化版的RC4。</p><p>之后还出现了RC5、RC6加密算法，但RC5和RC6都是分组加密，和RC4原理并不一样。</p><h3 id="RC5"><a href="#RC5" class="headerlink" title="RC5"></a>RC5</h3><p>RC5 （Rivest Cipher 5） 是一种分组加密算法，它和RC2，RC4，RC6都是同一个叫Ronald Rivest的人设计的。</p><p>相比RC4，RC5的密钥成了128位，但RC5仍然只需要基础的加、异或、循环运算，可以在很多硬件上实现。RC5有三个参数：字的大小，循环轮数（round），密钥中的8位字节个数，所以可以说RC5是一种可变加密算法。实际上循环轮数12轮以下的RC5都被认为是不安全的，会被差分分析法（Differential cryptanalysis）攻击，18-20轮才足够安全。</p><p>目前来说，RC5还是挺安全的，因为实现简单，消耗资源少，在一些传感器、嵌入式设备上使用很合适。</p><h3 id="RC6"><a href="#RC6" class="headerlink" title="RC6"></a>RC6</h3><p>RC6 （Rivest Cipher 6） 是RC5的加强版，也属于分组加密算法。</p><p>RC6算法在RC5算法基础之上针对RC5算法中的漏洞，主要是循环移位的位移量并不取决于要移动次数的所有比特，通过采用引入乘法运算来决定循环移位次数的方法，对RC5算法进行了改进，从而大大提高了RC6算法的安全性。</p><p>RC6曾作为AES（高级加密标准）备选算法之一，但最终AES选择了Rijndael算法。</p><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><p>最后压轴出场的是最著名的单密钥对称加密算法AES (Rijndael)，AES是Advanced Encryption Standard的缩写，是美国国家标准与技术研究院2001年发布的新加密标准。</p><p>AES现在就是指的限定了区块长度和密钥长度的Rijndael算法，同样属于分组加密算法，该算法是两位比利时学者1998年发布的。起初还有很多算法参与了AES甄选，最终Rijndael凭借高安全性和清晰的数学结构而被选用。</p><p>AES将Rijndael算法的区块长度固定为128位，密钥长度可选128，192或256比特（Rijndael原版支持128-256，n*32的区块长度和密钥长度）。</p><p>AES算法包括4个步骤：</p><ol><li>AddRoundKey—矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。</li><li>SubBytes—通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。</li><li>ShiftRows—将矩阵中的每个横列进行循环式移位。</li><li>MixColumns—为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey替换。</li></ol><p>截止现在（2016），AES在算法层面上是安全的。2005年有人公布过一种缓存时序攻击法，但使用场景非常极端。</p><h2 id="二、非对称秘钥算法"><a href="#二、非对称秘钥算法" class="headerlink" title="二、非对称秘钥算法"></a>二、非对称秘钥算法</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>公钥加密的思想于1974年被提出，相比对称加密无需共享密钥，更加安全。但是没法加密大量数据，一般用来加密对称加密的密钥，而用对称加密加密大量数据。<br>非对称加密的原理如下：</p><ul><li>消息发送方A在本地构建密钥对，公钥和私钥；</li><li>消息发送方A将产生的公钥发送给消息接收方B；</li><li>B向A发送数据时，通过公钥进行加密，A接收到数据后通过私钥进行解密，完成一次通信；</li><li>反之，A向B发送数据时，通过私钥对数据进行加密，B接收到数据后通过公钥进行解密。</li></ul><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>RSA算法是最著名的非对称加密算法。RSA是1977年提出的，名字来源于Rivest、Shmir和Adleman三位作者。<br>我们平时用到的SSL协议，TLS协议都采用了该算法加密，SSH（Secure Shell）也是基于RSA实现的。</p><p>RSA的数学基础是极大整数的因数分解，具体实现过程如下：</p><ul><li>随意选择两个大的质数p和q，p不等于q，计算N&#x3D;pq。</li><li>根据欧拉函数，求得r&#x3D;varphi (N) &#x3D; varphi(p) * varphi(q)&#x3D;(p-1)(q-1)</li><li>选择一个小于r的整数e，使e与r互质。并求得e关于r的模反元素，命名为d。</li><li>(N,e)是公钥，(N,d)是私钥。</li><li>加密时，加密的块 n^e ≡ c(MOD N)，得到的c就是密文。解密时，c^d ≡ n(MOD N)。</li></ul><p>要破解RSA要解决怎么把一个极大数分解为两个质数p和q，然后通过欧拉函数再得到公钥和私钥。但极大数因数分解目前还没什么好办法，所以只要N足够大，RSA在算法层面上就是安全的。</p><p>当N的长度为256时，用普通电脑花几小时即可以分解，当N长度为512时需要花数月时间分解，1024时需要大型分布式系统才能分解，长度到2046则可以确保是完全安全的。目前已有记录里，被分解的极大数最大位数是768位，于2009年被分解。</p><p>RSA也常被用来做数字签名，在消息内附加一个私钥加密过的散列值（Message digest），以此来确保消息发送人是可靠的。<br><strong>公钥私钥对生成</strong></p><pre><code class="bash"># 1.该命令会生成1024位的私钥,此时我们就可以在当前路径下看到rsa_private_key.pem文件了.genrsa -out rsa_private_key.pem 1024# 2.生成的密钥不是pcs8格式，我们需要转成pkcs8格式pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt# 3.生成 rsa 公钥rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</code></pre><h3 id="椭圆曲线算法"><a href="#椭圆曲线算法" class="headerlink" title="椭圆曲线算法"></a>椭圆曲线算法</h3><p>椭圆曲线算法（Elliptic curve cryptography）也是一种非对称加密算法，于1985年被提出，以下简称ECC。<br>相比RSA，同等破解难度时ECC的秘钥更短。另外，ECC可定义椭圆曲线群的双线性映射，该特性可能将来被用来实现身份基加密体制（Identity-Based Encryption，IBE）。</p><p>ECC的数学基础是求椭圆曲线离散对数问题。实现比较复杂我就不写了，因为我也看不懂(⊙﹏⊙)b。 也正因为实现复杂，ECC的加解密速度慢，消耗资源也更多。</p><p>ECC也同样可以实现数字签名，叫做ECDSA。</p><p>ECC的秘钥长度最小要求是160位，建议是163位。目前已有的破解记录是109位，一万台机器破解了一年半。所以ECC在算法层面是可以保证安全的。</p><h3 id="ElGamal"><a href="#ElGamal" class="headerlink" title="ElGamal"></a>ElGamal</h3><p>ElGamal加密算法是一种用于对采用Diff-Hellman方式进行交换的公钥进行加密，常被用于数字签名和密钥加密的算法，ElGamal的数学基础是有限域上的离散对数问题。</p><p>选择一个素数p和两个随机数g 、x （g、 x &lt; p ），计算 y ≡ g^x（ mod p ） ，则其公钥为 y, g 和p ，私钥是x ，g和p可由一组用户共享。</p><p>ElGamal方法中一个明文对应两个加密结果(g^a和g^b)，因此密文空间的大小是明文空间大小的两倍，也就是说纵观整个通信过程，收发密文的大小是实际明文大小的两倍。</p><h2 id="三、哈希算法"><a href="#三、哈希算法" class="headerlink" title="三、哈希算法"></a>三、哈希算法</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>我们经常说MD5加密，但追根究底的话，MD5应该是哈希函数（Hash Function），而哈希函数并不等同于加密（Encrypt），不过我们平常也把哈希叫做加密。哈希函数也叫散列函数，散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用来代表一个短的随机字母和数字组成的字符串。</p><p>说人话就是哈希（Hash）是将目标文本转换成具有相同长度的、不可逆的杂凑字符串，而加密（Encrypt）是将目标文本转换成具有不同长度的、可逆的密文。</p><p>哈希主要用来校验身份，错误检查，完整性检查。</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>MD5（Message-Digest5 Algorithm）即消息摘要算法，是最著名、应用最为广泛的一种哈希算法，于1992年被公开。MD5之前还有MD4、MD3、MD2等哥哥算法，MD5是最终的改进版。</p><p>MD5输入不定长度信息，输出固定长度为128-bits的散列</p><h2 id="未完-待补充"><a href="#未完-待补充" class="headerlink" title="未完 待补充"></a>未完 待补充</h2><h2 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h2><p><a href="http://woostundy.github.io/2016/07/16/%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/">常见加密算法简介</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> encryption </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP操作记录</title>
      <link href="/2017/04/21/jsp-use-record/"/>
      <url>/2017/04/21/jsp-use-record/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="EL表达式失效"><a href="#EL表达式失效" class="headerlink" title="EL表达式失效"></a>EL表达式失效</h3><pre><code class="html">&lt;!-- jsp渲染器不识别el表达式，结果页面展示效果如下 --&gt;&#123;person.id&#125; &#123;person.name&#125;</code></pre><p><strong>解决方法：</strong><br>在页面内加入下面代码即可</p><pre><code class="html">&lt;%@ page isELIgnored=&quot;false&quot; %&gt;</code></pre><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre><code class="html">&lt;c:forEach items=&quot;$&#123;map&#125;&quot; var=&quot;entry&quot;&gt;     &lt;c:out value=&quot;$&#123;entry.key&#125;&quot; /&gt;     &lt;c:out value=&quot;$&#123;entry.value&#125;&quot; /&gt;  &lt;/c:forEach&gt;  </code></pre><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><pre><code class="html">&lt;c:out value=&quot;$&#123;map[key]&#125;&quot; /&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
            <tag> jstl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]SpringMVC执行流程及源码解析</title>
      <link href="/2017/04/15/SpringMVC-implementation-process/"/>
      <url>/2017/04/15/SpringMVC-implementation-process/</url>
      
        <content type="html"><![CDATA[<p>在SpringMVC中主要是围绕着DispatcherServlet来设计，可以把它当做指挥中心。这里先说明一下SpringMVC文档给出的执行流程，然后是我们稍微具体的执行流程，最后是流程大致的源码跟踪。关于很很很详细的源码解析，这里暂先不做。</p><h2 id="官方文档中的流程"><a href="#官方文档中的流程" class="headerlink" title="官方文档中的流程"></a>官方文档中的流程</h2><p>首先看下SpringMVC文档上给的流程图：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/DispatcherServlet.png" alt="官方流程图"><br>这张图片给了我们大概的执行流程：</p><ol><li>用户请求首先发送到前端控制器DispatcherServlet，DispatcherServlet根据请求的信息来决定使用哪个页面控制器Controller（也就是我们通常编写的Controller）来处理该请求。找到控制器之后，DispatcherServlet将请求委托给控制器去处理。</li><li>接下来页面控制器开始处理用户请求，页面控制器会根据请求信息进行处理，调用业务层等等，处理完成之后，会把结果封装成一个ModelAndView返回给DispatcherServlet。</li><li>前端控制器DispatcherServlet接到页面控制器的返回结果后，根据返回的视图名选择相应的试图模板，并根据返回的数据进行渲染。</li><li>最后前端控制器DispatcherServlet将结果返回给用户。</li></ol><h2 id="更具体的流程"><a href="#更具体的流程" class="headerlink" title="更具体的流程"></a>更具体的流程</h2><p>上面只是总体流程，接下来我们稍微深入一点，看下更具体的流程，这里没有图，只有步骤解析：</p><ol><li>用户请求发送到前端控制器DispatcherServlet。</li><li>前端控制器DispatcherServlet接收到请求后，DispatcherServlet会使用HandlerMapping来处理，HandlerMapping会查找到具体进行处理请求的Handler对象。</li><li>HandlerMapping找到对应的Handler之后，并不是返回一个Handler原始对象，而是一个Handler执行链，在这个执行链中包括了拦截器和处理请求的Handler。HandlerMapping返回一个执行链给DispatcherServlet。</li><li>DispatcherServlet接收到执行链之后，会调用Handler适配器去执行Handler。</li><li>Handler适配器执行完成Handler（也就是我们写的Controller）之后会得到一个ModelAndView，并返回给DispatcherServlet。</li><li>DispatcherServlet接收到Handler适配器返回的ModelAndView之后，会根据其中的视图名调用视图解析器。</li><li>视图解析器根据逻辑视图名解析成一个真正的View视图，并返回给DispatcherServlet。</li><li>DispatcherServlet接收到视图之后，会根据上面的ModelAndView中的model来进行视图中数据的填充，也就是所谓的视图渲染。</li><li>渲染完成之后，DispatcherServlet就可以将结果返回给用户了。</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>DispatcherServlet是一个Servlet，我们知道在Servlet在处理一个请求的时候会交给service方法进行处理，这里也不例外，DispatcherServlet继承了FrameworkServlet，首先进入FrameworkServlet的service方法：</p><pre><code class="java">protected void service(HttpServletRequest request, HttpServletResponse response)        throws ServletException, IOException &#123;    //请求方法    String method = request.getMethod();    //PATCH方法单独处理    if (method.equalsIgnoreCase(RequestMethod.PATCH.name())) &#123;        processRequest(request, response);    &#125;    else &#123;//其他的请求类型的方法经由父类，也就是HttpServlet处理        super.service(request, response);    &#125;&#125;</code></pre><p>HttpServlet中会根据请求类型的不同分别调用doGet或者doPost等方法，FrameworkServlet中已经重写了这些方法，在这些方法中会调用processRequest进行处理，在processRequest中会调用doService方法，这个doService方法就是在DispatcherServlet中实现的。下面就看下DispatcherServlet中的doService方法的实现。</p><h3 id="请求到达DispatcherServlet"><a href="#请求到达DispatcherServlet" class="headerlink" title="请求到达DispatcherServlet"></a>请求到达DispatcherServlet</h3><p>doService方法：</p><pre><code class="java">protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;    //给request中的属性做一份快照    Map&lt;String, Object&gt; attributesSnapshot = null;    if (WebUtils.isIncludeRequest(request)) &#123;        logger.debug(&quot;Taking snapshot of request attributes before include&quot;);        attributesSnapshot = new HashMap&lt;String, Object&gt;();        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();        while (attrNames.hasMoreElements()) &#123;            String attrName = (String) attrNames.nextElement();            if (this.cleanupAfterInclude || attrName.startsWith(&quot;org.springframework.web.servlet&quot;)) &#123;                attributesSnapshot.put(attrName, request.getAttribute(attrName));            &#125;        &#125;    &#125;    //如果我们没有配置类似本地化或者主题的处理器之类的    //SpringMVC会使用默认的值    //默认配置文件是DispatcherServlet.properties    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());    FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);    if (inputFlashMap != null) &#123;        request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));    &#125;    request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());    request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);    try &#123;        //开始处理        doDispatch(request, response);    &#125;    finally &#123;        if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;            return;        &#125;        // Restore the original attribute snapshot, in case of an include.        if (attributesSnapshot != null) &#123;            restoreAttributesAfterInclude(request, attributesSnapshot);        &#125;    &#125;&#125;</code></pre><p>DispatcherServlet开始真正的处理，doDispatch方法：</p><pre><code class="java">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;    HttpServletRequest processedRequest = request;    HandlerExecutionChain mappedHandler = null;    boolean multipartRequestParsed = false;    //SpringMVC中异步请求的相关知识，暂先不解释    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);    try &#123;        ModelAndView mv = null;        Exception dispatchException = null;        try &#123;            //先检查是不是Multipart类型的，比如上传等            //如果是Multipart类型的，则转换为MultipartHttpServletRequest类型            processedRequest = checkMultipart(request);            multipartRequestParsed = processedRequest != request;            //获取当前请求的Handler            mappedHandler = getHandler(processedRequest, false);            if (mappedHandler == null || mappedHandler.getHandler() == null) &#123;                noHandlerFound(processedRequest, response);                return;            &#125;            //获取当前请求的Handler适配器            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());            // 对于header中last-modified的处理            String method = request.getMethod();            boolean isGet = &quot;GET&quot;.equals(method);            if (isGet || &quot;HEAD&quot;.equals(method)) &#123;                long lastModified = ha.getLastModified(request, mappedHandler.getHandler());                if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;                    return;                &#125;            &#125;            //拦截器的preHandle方法进行处理            if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;                return;            &#125;            try &#123;                //真正调用Handler的地方                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());            &#125;            finally &#123;                if (asyncManager.isConcurrentHandlingStarted()) &#123;                    return;                &#125;            &#125;            //处理成默认视图名，就是添加前缀和后缀等            applyDefaultViewName(request, mv);            //拦截器postHandle方法进行处理            mappedHandler.applyPostHandle(processedRequest, response, mv);        &#125;        catch (Exception ex) &#123;            dispatchException = ex;        &#125;        //处理最后的结果，渲染之类的都在这里        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);    &#125;    catch (Exception ex) &#123;        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);    &#125;    catch (Error err) &#123;        triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);    &#125;    finally &#123;        if (asyncManager.isConcurrentHandlingStarted()) &#123;            // Instead of postHandle and afterCompletion            mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);            return;        &#125;        // Clean up any resources used by a multipart request.        if (multipartRequestParsed) &#123;            cleanupMultipart(processedRequest);        &#125;    &#125;&#125;</code></pre><p>可以看到大概的步骤还是按照我们上面分析的走的。</p><h3 id="查找请求对应的Handler对象"><a href="#查找请求对应的Handler对象" class="headerlink" title="查找请求对应的Handler对象"></a>查找请求对应的Handler对象</h3><p>对应着这句代码 <code>mappedHandler = getHandler(processedRequest, false);</code>，看下具体的getHandler方法：</p><pre><code class="java">protected HandlerExecutionChain getHandler(HttpServletRequest request, boolean cache) throws Exception &#123;    return getHandler(request);&#125;</code></pre><p>继续往下看getHandler：</p><pre><code class="java">protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123;    //遍历所有的handlerMappings进行处理    //handlerMappings是在启动的时候预先注册好的    for (HandlerMapping hm : this.handlerMappings) &#123;        HandlerExecutionChain handler = hm.getHandler(request);        if (handler != null) &#123;            return handler;        &#125;    &#125;    return null;&#125;</code></pre><p>继续往下看getHandler，在AbstractHandlerMapping类中：</p><pre><code class="java">public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123;    //根据request获取handler    Object handler = getHandlerInternal(request);    if (handler == null) &#123;        //如果没有找到就使用默认的handler        handler = getDefaultHandler();    &#125;    if (handler == null) &#123;        return null;    &#125;    //如果Handler是String，表明是一个bean名称    //需要超照对应bean    if (handler instanceof String) &#123;        String handlerName = (String) handler;        handler = getApplicationContext().getBean(handlerName);    &#125;    //封装Handler执行链    return getHandlerExecutionChain(handler, request);&#125;</code></pre><h3 id="根据requrst获取handler"><a href="#根据requrst获取handler" class="headerlink" title="根据requrst获取handler"></a>根据requrst获取handler</h3><p>首先看下根据requrst获取handler步骤getHandlerInternal方法，在AbstractHandlerMethodMapping中：</p><pre><code class="java">protected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception &#123;    //获取request中的url，用来匹配handler    String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);    //根据路径寻找Handler    HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);    //根据handlerMethod中的bean来实例化Handler并添加进HandlerMethod    return (handlerMethod != null) ? handlerMethod.createWithResolvedBean() : null;&#125;</code></pre><p>看下根据路径寻找handler的方法lookupHandlerMethod：</p><pre><code class="java">protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception &#123;    List&lt;Match&gt; matches = new ArrayList&lt;Match&gt;();    //直接匹配    List&lt;T&gt; directPathMatches = this.urlMap.get(lookupPath);    //如果有匹配的，就添加进匹配列表中    if (directPathMatches != null) &#123;        addMatchingMappings(directPathMatches, matches, request);    &#125;    //还没有匹配的，就遍历所有的处理方法查找    if (matches.isEmpty()) &#123;        // No choice but to go through all mappings        addMatchingMappings(this.handlerMethods.keySet(), matches, request);    &#125;    //找到了匹配的    if (!matches.isEmpty()) &#123;        Comparator&lt;Match&gt; comparator = new MatchComparator(getMappingComparator(request));        Collections.sort(matches, comparator);        //排序之后，获取第一个        Match bestMatch = matches.get(0);        //如果有多个匹配的，会找到第二个最合适的进行比较一下        if (matches.size() &gt; 1) &#123;            Match secondBestMatch = matches.get(1);            if (comparator.compare(bestMatch, secondBestMatch) == 0) &#123;                Method m1 = bestMatch.handlerMethod.getMethod();                Method m2 = secondBestMatch.handlerMethod.getMethod();                throw new IllegalStateException(                        &quot;Ambiguous handler methods mapped for HTTP path &#39;&quot; + request.getRequestURL() + &quot;&#39;: &#123;&quot; +                        m1 + &quot;, &quot; + m2 + &quot;&#125;&quot;);            &#125;        &#125;        //设置request参数        handleMatch(bestMatch.mapping, lookupPath, request);        //返回匹配的url的处理的方法        return bestMatch.handlerMethod;    &#125;    else &#123;//最后还没有找到，返回null        return handleNoMatch(handlerMethods.keySet(), lookupPath, request);    &#125;&#125;</code></pre><h3 id="获取默认Handler"><a href="#获取默认Handler" class="headerlink" title="获取默认Handler"></a>获取默认Handler</h3><p>如果上面没有获取到Handler，就会获取默认的Handler。如果还获取不到就返回null。</p><h3 id="处理String类型的Handler"><a href="#处理String类型的Handler" class="headerlink" title="处理String类型的Handler"></a>处理String类型的Handler</h3><p>如果上面处理完的Handler是String类型的，就会根据这个handlerName获取bean。</p><h3 id="封装Handler执行链"><a href="#封装Handler执行链" class="headerlink" title="封装Handler执行链"></a>封装Handler执行链</h3><p>上面获取完Handler，就开始封装执行链了，就是将我们配置的拦截器加入到执行链中去，getHandlerExecutionChain：</p><pre><code class="java">protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) &#123;    //如果当前Handler不是执行链类型，就使用一个新的执行链实例封装起来    HandlerExecutionChain chain =        (handler instanceof HandlerExecutionChain) ?            (HandlerExecutionChain) handler : new HandlerExecutionChain(handler);    //先获取适配类型的拦截器添加进去拦截器链    chain.addInterceptors(getAdaptedInterceptors());    //当前的url    String lookupPath = urlPathHelper.getLookupPathForRequest(request);    //遍历拦截器，找到跟当前url对应的，添加进执行链中去    for (MappedInterceptor mappedInterceptor : mappedInterceptors) &#123;        if (mappedInterceptor.matches(lookupPath, pathMatcher)) &#123;            chain.addInterceptor(mappedInterceptor.getInterceptor());        &#125;    &#125;    return chain;&#125;</code></pre><h3 id="获取对应请求的Handler适配器"><a href="#获取对应请求的Handler适配器" class="headerlink" title="获取对应请求的Handler适配器"></a>获取对应请求的Handler适配器</h3><p>getHandlerAdapter：</p><pre><code class="java">protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException &#123;    //遍历所有的HandlerAdapter，找到和当前Handler匹配的就返回    //我们这里会匹配到RequestMappingHandlerAdapter    for (HandlerAdapter ha : this.handlerAdapters) &#123;        if (ha.supports(handler)) &#123;            return ha;        &#125;    &#125;&#125;</code></pre><h3 id="缓存的处理"><a href="#缓存的处理" class="headerlink" title="缓存的处理"></a>缓存的处理</h3><p>也就是对last-modified的处理</p><h3 id="执行拦截器的preHandle方法"><a href="#执行拦截器的preHandle方法" class="headerlink" title="执行拦截器的preHandle方法"></a>执行拦截器的preHandle方法</h3><p>就是遍历所有的我们定义的interceptor，执行preHandle方法</p><h3 id="使用Handler适配器执行当前的Handler"><a href="#使用Handler适配器执行当前的Handler" class="headerlink" title="使用Handler适配器执行当前的Handler"></a>使用Handler适配器执行当前的Handler</h3><p>ha.handle执行当前Handler，我们这里使用的是RequestMappingHandlerAdapter，首先会进入AbstractHandlerMethodAdapter的handle方法：</p><pre><code class="java">public final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler)        throws Exception &#123;    return handleInternal(request, response, (HandlerMethod) handler);&#125;</code></pre><p>handleInternal方法，在RequestMappingHandlerAdapter中：</p><pre><code class="java">protected final ModelAndView handleInternal(HttpServletRequest request,        HttpServletResponse response, HandlerMethod handlerMethod) throws Exception &#123;    if (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;        // Always prevent caching in case of session attribute management.        checkAndPrepare(request, response, this.cacheSecondsForSessionAttributeHandlers, true);    &#125;    else &#123;        // Uses configured default cacheSeconds setting.        checkAndPrepare(request, response, true);    &#125;    // Execute invokeHandlerMethod in synchronized block if required.    if (this.synchronizeOnSession) &#123;        HttpSession session = request.getSession(false);        if (session != null) &#123;            Object mutex = WebUtils.getSessionMutex(session);            synchronized (mutex) &#123;                return invokeHandleMethod(request, response, handlerMethod);            &#125;        &#125;    &#125;    //执行方法，封装ModelAndView    return invokeHandleMethod(request, response, handlerMethod);&#125;</code></pre><h3 id="组装默认视图名称"><a href="#组装默认视图名称" class="headerlink" title="组装默认视图名称"></a>组装默认视图名称</h3><p>前缀和后缀名都加上</p><h3 id="执行拦截器的postHandle方法"><a href="#执行拦截器的postHandle方法" class="headerlink" title="执行拦截器的postHandle方法"></a>执行拦截器的postHandle方法</h3><p>遍历intercepter的postHandle方法。</p><h3 id="处理最后的结果，渲染之类的"><a href="#处理最后的结果，渲染之类的" class="headerlink" title="处理最后的结果，渲染之类的"></a>处理最后的结果，渲染之类的</h3><p>processDispatchResult方法：</p><pre><code class="java">private void processDispatchResult(HttpServletRequest request, HttpServletResponse response,        HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception &#123;    boolean errorView = false;    if (exception != null) &#123;        if (exception instanceof ModelAndViewDefiningException) &#123;            mv = ((ModelAndViewDefiningException) exception).getModelAndView();        &#125;        else &#123;            Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);            mv = processHandlerException(request, response, handler, exception);            errorView = (mv != null);        &#125;    &#125;    // Did the handler return a view to render?    if (mv != null &amp;&amp; !mv.wasCleared()) &#123;        //渲染        render(mv, request, response);        if (errorView) &#123;            WebUtils.clearErrorRequestAttributes(request);        &#125;    &#125;    else &#123;    &#125;    if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;        // Concurrent handling started during a forward        return;    &#125;    if (mappedHandler != null) &#123;        mappedHandler.triggerAfterCompletion(request, response, null);    &#125;&#125;</code></pre><p>重点看下render方法，进行渲染：</p><pre><code class="java">protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;    //设置本地化    Locale locale = this.localeResolver.resolveLocale(request);    response.setLocale(locale);    View view;    if (mv.isReference()) &#123;        //解析视图名，得到视图        view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);    &#125;    else &#123;        // No need to lookup: the ModelAndView object contains the actual View object.        view = mv.getView();        if (view == null) &#123;            throw new ServletException(&quot;ModelAndView [&quot; + mv + &quot;] neither contains a view name nor a &quot; +                    &quot;View object in servlet with name &#39;&quot; + getServletName() + &quot;&#39;&quot;);        &#125;    &#125;    //委托给视图进行渲染    view.render(mv.getModelInternal(), request, response);&#125;</code></pre><p>view.render就是进行视图的渲染，然后跳转页面等处理。</p><p>到这里大概的流程就走完了。其中涉及到的东西还有很多，暂先不做详细处理。</p><p>原文：<a href="http://cxis.me/2017/04/06/SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">SpringMVC执行流程及源码解析</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL常用SQL操作</title>
      <link href="/2017/04/14/postgres-sql-use/"/>
      <url>/2017/04/14/postgres-sql-use/</url>
      
        <content type="html"><![CDATA[<blockquote><p>说明：文章中实例均在 <code>PostgreSQL</code> 环境操作。</p></blockquote><h2 id="DDL数据定义语言"><a href="#DDL数据定义语言" class="headerlink" title="DDL数据定义语言"></a>DDL数据定义语言</h2><h3 id="数据库-角色-schema"><a href="#数据库-角色-schema" class="headerlink" title="数据库&#x2F;角色&#x2F;schema"></a>数据库&#x2F;角色&#x2F;schema</h3><pre><code class="sql">-- 创建一个数据库用户create role &quot;sp-boss&quot; createdb createrole login password &#39;sp-boss&#39;;-- 使用上面角色登录 postgres 数据库psql -U sp-boss -d postgres-- 创建自己的数据库create database &quot;sp-boss&quot;-- 登录自己的数据库psql -U sp-boss-- 创建一个其他用户create role &quot;sp-manager&quot; login password &#39;sp-manager&#39;;-- 赋予 create 权限grant create on database &quot;sp-boss&quot; to &quot;sp-manager&quot;;-- 使用 新用户 登录数据库psql -U sp-manager -d sp-boss-- 创建自己的 schemacreate schema &quot;sp-manager&quot;;</code></pre><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><pre><code class="sql">--创建表create table user_info (  id serial primary key,  name varchar(20),  age integer,  create_time timestamp,  type integer,  display boolean default true,  unique (name, type));--删除表drop table exists user_info;--重命名表alter table user_info rename to user_infos;</code></pre><h3 id="字段（列）"><a href="#字段（列）" class="headerlink" title="字段（列）"></a>字段（列）</h3><pre><code class="sql">--添加一列alter table user_info add [column] username varchar(50);--删除一列alter table user_info drop [column] username;--重命名列alter table user_info rename [column] username to name;--修改结构alter table user_info alter [column] username set not null;--</code></pre><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><pre><code class="SQL">-- 添加名为 uk_name 的联合唯一约束，组合列为column1和column2alter table sys_theme add constraint uk_name unique(column1,column2);-- 删除名为 uk_name 的约束alter table sys_theme drop constraint uk_name;</code></pre><h2 id="DML数据库操作语言"><a href="#DML数据库操作语言" class="headerlink" title="DML数据库操作语言"></a>DML数据库操作语言</h2><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><h4 id="查询包含json格式的text类型的数据"><a href="#查询包含json格式的text类型的数据" class="headerlink" title="查询包含json格式的text类型的数据"></a>查询包含json格式的text类型的数据</h4><pre><code class="sql">postgres=# select * from person; id |  name  |                          other                           ----+--------+----------------------------------------------------------  1 | faker  | &#123;&quot;gender&quot;:&quot;male&quot;,&quot;address&quot;:&quot;xiamen&quot;,&quot;college&quot;:&quot;xmut&quot;&#125;  2 | watson | &#123;&quot;gender&quot;:&quot;male&quot;,&quot;address&quot;:&quot;shenzhen&quot;,&quot;college&quot;:&quot;szu&quot;&#125;  3 | lance  | &#123;&quot;gender&quot;:&quot;male&quot;,&quot;address&quot;:&quot;shenzhen&quot;,&quot;college&quot;:&quot;xmut&quot;&#125;  4 | jine   | &#123;&quot;gender&quot;:&quot;female&quot;,&quot;address&quot;:&quot;xiamen&quot;,&quot;college&quot;:&quot;xmut&quot;&#125;  5 | jobs   | &#123;&quot;gender&quot;:&quot;male&quot;,&quot;address&quot;:&quot;beijing&quot;,&quot;college&quot;:&quot;xmu&quot;&#125;  6 | yak    | &#123;&quot;gender&quot;:&quot;female&quot;,&quot;address&quot;:&quot;xiamen&quot;,&quot;college&quot;:&quot;xmut&quot;&#125;  7 | alice  | &#123;&quot;gender&quot;:&quot;female&quot;,&quot;address&quot;:&quot;shanghai&quot;,&quot;college&quot;:&quot;thu&quot;&#125;  8 | anita  | &#123;&quot;gender&quot;:&quot;female&quot;,&quot;address&quot;:&quot;xiongan&quot;,&quot;college&quot;:&quot;hku&quot;&#125;(8 行记录)</code></pre><pre><code class="sql">-- 查询深圳学生的高校分部情况select  other::json-&gt;&gt;&#39;college&#39; college,  count(1)from  personwhere  other::json-&gt;&gt;&#39;address&#39;=&#39;shenzhen&#39;group by  other::json-&gt;&gt;&#39;college&#39;;___________________________  college | count ---------+-------  szu     |     1  xmut    |     1 (1 行记录)--- 结果可得深圳一共有两个学生，--- 在深圳大学和厦门理工学院各一个。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgres </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepin系统使用记录</title>
      <link href="/2017/03/30/deepin-linux/"/>
      <url>/2017/03/30/deepin-linux/</url>
      
        <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><ul><li><a href="https://www.deepin.org/">官网</a></li><li><a href="https://bbs.deepin.org/">论坛</a></li><li><a href="https://wiki.deepin.org/">deepin’wiki</a></li><li><a href="https://wiki.deepin.org/index.php?title=Deepin%E5%BA%94%E7%94%A8%E7%AE%A1%E7%90%86">Deepin应用列表</a></li></ul><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p>安装输入法，除了商店下载（好多输入法没有被收录进deepin商店），可以使用fcitx安装。<br>如安装google拼音输入法：</p><pre><code class="bash">$ sudo aptitude install fcitx fcitx-googlepinyin</code></pre><p>如果当前在使用ibus，而不是fcitx的话，看下面<br>1）安装fcitx，并安装google拼音</p><pre><code class="bash">$ sudo apt-get install fcitx fcitx-googlepinyin im-config</code></pre><p>2）打开输入法配置</p><pre><code class="bash">$ im-config</code></pre><p>依次：<code>ok</code>-&gt;<code>yes</code>,选择fcitx为默认输入法框架,<code>ok</code>-&gt;<code>ok</code></p><h2 id="制作启动器图标"><a href="#制作启动器图标" class="headerlink" title="制作启动器图标"></a>制作启动器图标</h2><p>以创建 <code>atom</code> 这款编辑器的启动器图标为例。<br>1）进入 <code>/usr/share/applications/</code> 目录，创建 <code>atom.desktop</code> 文件<br>2）编辑 <code>atom.desktop</code> 文件</p><pre><code class="xml">[Desktop Entry]Name=AtomComment=A hackable text editor for the 21st centuryExec=/opt/atom/atom %FIcon=/opt/atom/atom.pngType=ApplicationStartupNotify=trueCategories=TextEditor;Development;Utility;MimeType=text/plain;</code></pre><blockquote><p>解释：<br><code>Name</code>：创建的图标名称<br><code>Comment</code>：备注，随便填<br><code>Exec</code>：启动文件的位置<br><code>Icon</code>：图标位置<br><code>Type</code>：类型，启动程序就填Application<br><code>StartupNotify</code>: 启动通知，填true就行了。详细可查 <a href="https://developer.gnome.org/integration-guide/stable/startup-notification.html.en">Startup notification</a><br><code>Categories</code>： 分类，随便填，比如：Application;<br><code>MimeType</code>： 打开文件类型</p></blockquote><h2 id="修改apt源"><a href="#修改apt源" class="headerlink" title="修改apt源"></a>修改apt源</h2><p>修改 <code>/etc/apt/sources.list</code><br>默认的源</p><pre><code class="bash">deb [by-hash=force] http://packages.deepin.com/deepin/ unstable main contrib non-free</code></pre><p>阿里云的源</p><pre><code class="bash">deb [by-hash=force] http://mirrors.aliyun.com/deepin unstable main contrib non-free</code></pre><h2 id="更换文件管理器"><a href="#更换文件管理器" class="headerlink" title="更换文件管理器"></a>更换文件管理器</h2><h3 id="Nautilus"><a href="#Nautilus" class="headerlink" title="Nautilus"></a>Nautilus</h3><ol><li>深度商店下载安装 Nautilus<br>2）卸载深度任务管理器</li></ol><pre><code class="bash">$ sudo apt remove dde-file-manager</code></pre><p>Nautilus 常用的快捷键</p><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">F2</td><td align="left">重命名</td></tr><tr><td align="left">Ctrl + 1</td><td align="left">图标视图</td></tr><tr><td align="left">Ctrl + 2</td><td align="left">列表视图</td></tr><tr><td align="left">Ctrl + T</td><td align="left">新建标签页</td></tr><tr><td align="left">Ctrl + W</td><td align="left">关闭标签页</td></tr><tr><td align="left">Alt + 数字</td><td align="left">切换到指定标签页</td></tr><tr><td align="left">Ctrl + D</td><td align="left">收藏到当前文件夹到书签</td></tr><tr><td align="left">Shift + F10</td><td align="left">打开鼠标右键菜单</td></tr><tr><td align="left">Alt + 左方向键</td><td align="left">后退</td></tr><tr><td align="left">Alt + 右方向键</td><td align="left">前进</td></tr><tr><td align="left">Ctrl + Q</td><td align="left">退出</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo报错合集</title>
      <link href="/2017/03/27/hexo-error-collection/"/>
      <url>/2017/03/27/hexo-error-collection/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-server时报错"><a href="#hexo-server时报错" class="headerlink" title="hexo server时报错"></a>hexo server时报错</h2><h3 id="FATAL-watch-…-ENOSPC"><a href="#FATAL-watch-…-ENOSPC" class="headerlink" title="FATAL watch … ENOSPC"></a>FATAL watch … ENOSPC</h3><p>日志：2017-03-27 执行 <code>hexo server</code> 后报错。<br><strong>如图：</strong><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FqCfDl6mN_Pb1_iH8fRuC5sz4A6o.png" alt="watch ENOSPC"><br><strong>分析问题：</strong><br>node.js 中 watch 的文件数是有限制的。<br><strong>解决问题：</strong></p><pre><code class="bash">$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo快捷键说明</title>
      <link href="/2017/03/24/3-hexo-shortcuts/"/>
      <url>/2017/03/24/3-hexo-shortcuts/</url>
      
        <content type="html"><![CDATA[<p>今日公司断网了半个小时，就利用这段时间给主题添加了快捷键操作，方便使用。</p><p>快捷键为vim风格的。按键可能与vimium（chrome插件）的快捷键有冲突，插件设置屏蔽掉此站的快捷键即可</p><p>如果有比较好的建议，欢迎骚扰。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><table><thead><tr><th align="left">Key</th><th align="left">Descption</th></tr></thead><tbody><tr><td align="left">s&#x2F;S</td><td align="left">全屏&#x2F;取消全屏</td></tr><tr><td align="left">w&#x2F;W</td><td align="left">打开&#x2F;关闭文章目录</td></tr><tr><td align="left">i&#x2F;I</td><td align="left">获取搜索框焦点</td></tr><tr><td align="left">j&#x2F;J</td><td align="left">向下滑动</td></tr><tr><td align="left">k&#x2F;K</td><td align="left">向上滑动</td></tr><tr><td align="left">gg&#x2F;GG</td><td align="left">到最顶端</td></tr><tr><td align="left">shift+G&#x2F;g</td><td align="left">到最下端</td></tr></tbody></table><h3 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h3><table><thead><tr><th align="left">Key</th><th align="left">Descption</th></tr></thead><tbody><tr><td align="left">ESC</td><td align="left">1.如果输入框有内容，清除内容<br>2.如果输入框无内容，失去焦点</td></tr><tr><td align="left">下</td><td align="left">向下选择文章</td></tr><tr><td align="left">上</td><td align="left">向上选择文章</td></tr><tr><td align="left">回车</td><td align="left">打开当前选中的文章，若没有，则默认打开第一个</td></tr></tbody></table><h3 id="关闭快捷键"><a href="#关闭快捷键" class="headerlink" title="关闭快捷键"></a>关闭快捷键</h3><p>在主题下 <code>_config.yml</code> 中 找到 <code>shortcutKey</code> 设为 <code>false</code></p><pre><code class="yaml">shortcutKey: false</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo使用说明</title>
      <link href="/2017/03/23/3-hexo-instruction/"/>
      <url>/2017/03/23/3-hexo-instruction/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下面如果没有特殊说明， <code>_config.yml</code> 都指主题配置文件，即 <code>3-hexo</code> 目录下</p></blockquote><h2 id="一、初始化博客下-config-yml"><a href="#一、初始化博客下-config-yml" class="headerlink" title="一、初始化博客下 _config.yml"></a>一、初始化博客下 _config.yml</h2><h3 id="1-1-国际化"><a href="#1-1-国际化" class="headerlink" title="1.1 国际化"></a>1.1 国际化</h3><pre><code class="yaml">language: zh-CN #支持 zh-CN、en</code></pre><h3 id="1-2-关掉-hexo-自带的代码高亮"><a href="#1-2-关掉-hexo-自带的代码高亮" class="headerlink" title="1.2 关掉 hexo 自带的代码高亮"></a>1.2 关掉 hexo 自带的代码高亮</h3><p>主题内置了主题高亮，所以需要禁用 hexo 自带的高亮</p><p>根据 <code>hexo</code> 版本, 禁用的方式发生了变化 <a href="https://hexo.io/docs/syntax-highlight#Disabled">禁用高亮</a></p><p>below v7.0.0</p><pre><code class="yaml"># _config.yamlhighlight:    enable: false</code></pre><p>7.0.0+</p><pre><code class="yaml"># _config.ymlsyntax_highlighter:  # empty</code></pre><h2 id="二、功能相关"><a href="#二、功能相关" class="headerlink" title="二、功能相关"></a>二、功能相关</h2><h3 id="2-1-自定义首页"><a href="#2-1-自定义首页" class="headerlink" title="2.1 自定义首页"></a>2.1 自定义首页</h3><p>可查看这篇文章： <a href="/2017/03/13/3-hexo-homepage/" title="3-hexo配置首页">3-hexo配置首页</a></p><h3 id="2-3-blog快捷键"><a href="#2-3-blog快捷键" class="headerlink" title="2.3 blog快捷键"></a>2.3 blog快捷键</h3><p>可查看这篇文章： <a href="/2017/03/24/3-hexo-shortcuts/" title="3-hexo快捷键说明">3-hexo快捷键说明</a></p><h3 id="2-4-多作者模式"><a href="#2-4-多作者模式" class="headerlink" title="2.4 多作者模式"></a>2.4 多作者模式</h3><p>可查看这篇文章： <a href="/2017/02/28/3-hexo-multiple-author/" title="3-hexo多作者模式">3-hexo多作者模式</a></p><h3 id="2-5-开启关于页面"><a href="#2-5-开启关于页面" class="headerlink" title="2.5 开启关于页面"></a>2.5 开启<code>关于</code>页面</h3><ol><li>在 <code>hexo</code> 根目录执行以下，创建 <code>关于</code> 页面</li></ol><pre><code class="bash">hexo new page &quot;about&quot;</code></pre><ol start="2"><li>位置： <code>source/aoubt/index.md</code> ，根据需要进行编辑。</li><li>在主题中开启显示：修改主题根目录 <code>_config.yml</code> 中的 <code>about</code> 的 <code>on</code> 为 <code>true</code>，如下所示</li></ol><pre><code class="yml">menu:  about:  # &#39;关于&#39; 按钮    on: true # 是否显示    url: /about  # 跳转链接    type: 1 # 跳转类型 1：站内异步跳转 2：当前页面跳转 3：打开新的tab页</code></pre><h3 id="2-6-添加音乐插件"><a href="#2-6-添加音乐插件" class="headerlink" title="2.6 添加音乐插件"></a>2.6 添加音乐插件</h3><a href="/2019/10/08/3-hexo-add-music/" title="3-hexo 添加音乐插件">3-hexo 添加音乐插件</a><h3 id="2-7-配置评论系统"><a href="#2-7-配置评论系统" class="headerlink" title="2.7 配置评论系统"></a>2.7 配置评论系统</h3><a href="/2020/05/23/3-hexo-comment/" title="3-hexo评论设置">3-hexo评论设置</a><h2 id="三、样式设置"><a href="#三、样式设置" class="headerlink" title="三、样式设置"></a>三、样式设置</h2><h3 id="3-1-代码高亮"><a href="#3-1-代码高亮" class="headerlink" title="3.1 代码高亮"></a>3.1 代码高亮</h3><p>首先要关闭hexo根目录下<code>_config.yml</code>中的高亮设置：</p><pre><code class="yaml">highlight:  enable: false</code></pre><p>配置主题下<code>_config.yml</code>中的高亮设置：<br>可以根据提示，配置喜欢的高亮主题</p><pre><code class="yaml">highlight:  on: true # true开启代码高亮  lineNum: true # true显示行号  theme: darcula# 代码高亮主题,效果可以查看 https://highlightjs.org/static/demo/# 支持主题：# sublime : 参考sublime的高亮主题# darcula : 参考idea中的darcula的主题# atom-dark : 参考Atom的dark主题# atom-light : 参考Atom的light主题# github : 参考GitHub版的高亮主题# github-gist : GitHub-Gist主题# brown-paper : 牛皮纸效果# gruvbox-light : gruvbox的light主题# gruvbox-dark ： gruvbox的dark主题# rainbow :# railscasts :# sunburst :# kimbie-dark :# kimbie-light :# school-book : 纸张效果</code></pre><h3 id="3-2-MathJax数学公式"><a href="#3-2-MathJax数学公式" class="headerlink" title="3.2 MathJax数学公式"></a>3.2 MathJax数学公式</h3><p>修改 <code>_config.yml</code></p><pre><code class="yaml"># MathJax 数学公式支持mathjax:  on: true #是否启用  per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax: true</code></pre><p>考虑到页面的加载速度，支持渲染单个页面。<br>设置 <code>per_page: false</code> ,在需要渲染的页面内 加入 <code>mathjax: true</code></p><blockquote><p><strong><code>注意: </code></strong><br>由于hexo的MarkDown渲染器与MathJax有冲突，可能会造成矩阵等使用不正常。所以在使用之前需要修改两个地方<br>编辑 <code>node_modules\marked\lib\marked.js</code> 脚本</p></blockquote><ol><li>将451行 ，这一步取消了对 <code>\\,\&#123;,\&#125;</code> 的转义(escape)</li></ol><pre><code class="js">escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/,改为escape: /^\\([`*\[\]()# +\-.!_&gt;])/,</code></pre><ol start="2"><li>将459行，这一步取消了对斜体标记 <code>_</code> 的转义</li></ol><pre><code class="js">em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,改为em:/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></pre><h3 id="3-3-表格样式"><a href="#3-3-表格样式" class="headerlink" title="3.3 表格样式"></a>3.3 表格样式</h3><p>目前提供了3中样式，修改 <code>_config.yml</code></p><pre><code class="yaml">table: green_title# table 的样式# 为空时类似github的table样式# green 绿色样式# green_title 头部为青色的table样式</code></pre><h3 id="3-4-文章列表的hover样式"><a href="#3-4-文章列表的hover样式" class="headerlink" title="3.4 文章列表的hover样式"></a>3.4 文章列表的hover样式</h3><p>鼠标移入的背景色和文字颜色变动，设置 <code>_config.yml</code></p><pre><code class="yaml">#文章列表 鼠标移上去的样式, 为空时使用默认效果article_list:  hover:    background: &#39;#e2e0e0&#39;  # 背景色:提供几种：&#39;#c1bfc1&#39;  &#39;#fbf4a8&#39;    color:     # 文字颜色 提供几种：&#39;#ffffff&#39;# 注意：由于颜色如果包含#，使用单引号 &#39; 引起来</code></pre><h3 id="3-5-开启字数统计"><a href="#3-5-开启字数统计" class="headerlink" title="3.5 开启字数统计"></a>3.5 开启字数统计</h3><ol><li>开启此功能需先安装插件，在 hexo根目录 执行 <code>npm i hexo-wordcount --save</code></li><li>修改 <code>_config.yml</code></li></ol><pre><code class="yaml">word_count: true</code></pre><h3 id="3-6-更换头像"><a href="#3-6-更换头像" class="headerlink" title="3.6 更换头像"></a>3.6 更换头像</h3><p>两种方式：</p><ol><li>替换 <code>source/img/avatar.jpg</code> 图片。</li><li>修改 <code>_config.yml</code> 中头像的配置记录</li></ol><pre><code class="yaml"># 你的头像urlavatar: /img/avatar.jpgfavicon: /img/avatar.jpg</code></pre><h3 id="3-7-设置链接图标"><a href="#3-7-设置链接图标" class="headerlink" title="3.7 设置链接图标"></a>3.7 设置链接图标</h3><blockquote><p>如果需要自定义图标可以看这篇文章 <a href="/2020/12/28/3-hexo-add-icon/" title="3-hexo添加自定义图标">3-hexo添加自定义图标</a></p></blockquote><p>如下，如果没有连接，则不展示图标。</p><pre><code class="yaml">#链接图标，链接为空则不显示link:  rss: /atom.xml  github: https://github.com/yelog  facebook: https://www.facebook.com/faker.tops  twitter:  linkedin:  instagram:  reddit: https://www.reddit.com/user/yelog/  weibo: http://weibo.com/u/2307534817  email: jaytp@qq.com</code></pre><h2 id="四、排序及置顶"><a href="#四、排序及置顶" class="headerlink" title="四、排序及置顶"></a>四、排序及置顶</h2><h3 id="4-1-分类排序"><a href="#4-1-分类排序" class="headerlink" title="4.1 分类排序"></a>4.1 分类排序</h3><p>默认按照首字母正序排序，由于中文在 <code>nodejs</code> 环境下不能按照拼音首字母排序，所以添加了自定义排序方式，在主题下 <code>_config.yml</code> 中找到如下配置，<code>category.sort</code>则是定义分类顺序的。</p><p><strong>规则：</strong>在 <code>sort</code>中定义的 <code>category</code> 比 没有在 <code>sort</code> 中定义的更靠前</p><pre><code class="yaml"># 文章分类设置category:  num: true # 分类显示文章数  sub: true # 开启多级分类  sort:    - 读书    - 大前端    - 后端    - 数据库    - 工具    - 运维</code></pre><h3 id="4-2-文章排序"><a href="#4-2-文章排序" class="headerlink" title="4.2 文章排序"></a>4.2 文章排序</h3><blockquote><p>2020-05-20 更新：无需安装插件或修改源码，主题已经内置排序算法</p></blockquote><p>文章列表默认按照创建时间（如下文章内定义的<code>date</code>）倒序。</p><p>使用 <code>top</code> 将会置顶文章，多个置顶文章时，<code>top</code> 定义的值越大，越靠前。</p><pre><code class="yml">---title: 每天一个linux命令date: 2017-01-23 11:41:48top: 1categories:- 运维tags:- linux命令---</code></pre><h2 id="五、关于写文章"><a href="#五、关于写文章" class="headerlink" title="五、关于写文章"></a>五、关于写文章</h2><h3 id="5-1-如何写"><a href="#5-1-如何写" class="headerlink" title="5.1 如何写"></a>5.1 如何写</h3><p>每篇文章最好写上文集和标签，方便筛选和查看。<br>一般推荐一篇文章设置一个文集，一个或多个标签<br><code>categories</code>:文集，为左侧列表<br><code>tags</code>:标签，通过#来筛选<br>例如 本篇文章的设置</p><pre><code class="yaml">---title: 3-hexo使用说明date: 2017-03-23 15:13:47categories:- 工具tags:- hexo- 3-hexo---</code></pre><h3 id="5-2-写作"><a href="#5-2-写作" class="headerlink" title="5.2 写作"></a>5.2 写作</h3><p>1.设置模板，blog根目录 <code>scaffolds/post.md</code><br>加入categories,tags等，这样以后通过 <code>hexo new</code> 生成的模板就不用写这两个单词了。<br>当然，你也可以写入任何你每个文章中都会有的部分。</p><pre><code class="yaml">---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:---</code></pre><h2 id="六、技巧"><a href="#六、技巧" class="headerlink" title="六、技巧"></a>六、技巧</h2><h3 id="6-1-快捷命令"><a href="#6-1-快捷命令" class="headerlink" title="6.1 快捷命令"></a>6.1 快捷命令</h3><p>其实就通过alias，触发一些命令的集合<br>在 <code>~/.bashrc</code> 文件中添加</p><pre><code class="bash">alias hs=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#39;  #启动本地服务alias hd=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#39;  #部署博客</code></pre><p>甚至你也可以加入备份文章的命令，可以自由发挥。</p><h3 id="6-3-博客备份（快捷命令升级版）"><a href="#6-3-博客备份（快捷命令升级版）" class="headerlink" title="6.3 博客备份（快捷命令升级版）"></a>6.3 博客备份（快捷命令升级版）</h3><p>为了保证我们写的文章不丢失、快速迁移博客，都需要备份我们的blog。</p><ol><li>博客根目录，执行 <code>git init</code> 创建 git 仓库。</li><li>在 github（或其他托管平台、自建远程仓库等） 创建仓库并和本地仓库建立联系。</li><li>在 <code>~/.bashrc</code> 文件中添加</li></ol><pre><code class="bash">alias hs=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#39;alias hd=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push -f&#39;</code></pre><p>这样，我们在执行 <code>hd</code> 进行部署时，就一同将博客进行备份了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于第三方评论系统</title>
      <link href="/2017/03/23/the-third-comment/"/>
      <url>/2017/03/23/the-third-comment/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天登陆blog看到了多说的通知：将于2017年6月1日正式关停服务，其实并没有太大的意外。</p><p>自从去年9月份disqus被GFW认证后，被迫转移到多说，一看就是很久没有维护了，感觉关闭就是迟早的事，没想到刚用5个月。。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FiTeQPGuPt1W5BuUj2NcruE_eHkv.jpg" alt="好想使用disqus啊！！！"></p><p>不能用disqus不开心，然后就又开始调查第三方评论系统。</p><h2 id="友言"><a href="#友言" class="headerlink" title="友言"></a>友言</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>界面挺像disqus的</li><li>查询最近的评论，需要打开新的页面</li><li>支持表情，不支持图片</li><li>支持自定义界面</li><li>注册即用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fu3w7t5F_blvaZ2xyRmNaZ70wDJD.png" alt="友言"></p><h2 id="网易云跟帖"><a href="#网易云跟帖" class="headerlink" title="网易云跟帖"></a>网易云跟帖</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>界面简洁</li><li>网易作为后台，不容易倒</li><li>不支持表情，不支持图片</li><li>支持自定义界面</li><li>我在国外加载巨慢，不过查了国内的延迟，平均20ms左右。</li><li>注册即用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fhb1TtKq7JWIj91gU90Mh4o5Ay12.png" alt="网易云跟帖"></p><h2 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ol><li>界面简介</li><li>打印记的功能</li><li>支持表情和图片</li><li>支持获取评论数</li><li>需要ICP备案</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FufklpIz5UFXJsiKGGjTP9DnMymz.png" alt="畅言"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>想要尝试一下畅言，功能符合我的预期，不过要ICP备案，最近由于想要开启国内CDN加速，也需要备案。</p><p><code>蛋四！！</code> 我在国外，等回国的时候再备案吧，暂时现使用 <code>disqus</code>,如果想评论，国内只能翻墙了。╮（╯＿╰）╭</p><p>最后，多说一路走好。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows环境下使用hexo搭建blog平台</title>
      <link href="/2017/03/17/windows-hexo/"/>
      <url>/2017/03/17/windows-hexo/</url>
      
        <content type="html"><![CDATA[<p>之前已经出过几期搭建 <code>hexo</code> 的文章，但是有不少朋友私信说系统是windows的，希望出一期windows环境下的hexo搭建文章。</p><p>为此，确保可用性，笔者在linux（笔者的系统环境）环境下安装了windows虚拟机重新演练了一边，确保没有什么漏洞，才写下了此文。</p><p>本文会非常详细，以确保没有计算机背景的小白也可以轻松上手</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>1).下载：从官网下载windows版本的git,地址在下方。<br><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>2).安装：双击安装，一直点击下一步即可</p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>1).下载：从官网下载windows版本的node.js安装包（.msi后缀），地址下方<br><a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br>2).安装：双击安装，一直点击下一步即可</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在任意目录如桌面，点击鼠标右键，选择Git Bash Here这一项，打开git bash命令框（前提是git安装成功），如下图<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FraxkCebAzx-dlPGsUmgcLZRR_Lj.png" alt="鼠标右键"><br>在打开的命令窗内输入下面的命令进行安装</p><pre><code class="bash">npm install hexo-cli -g</code></pre><p>安装过后，输入 <code>hexo -v</code>，出现下面信息，则表示安装成功</p><pre><code class="bash">$ hexo -vhexo-cli: 1.0.2os: Windows_NT 6.1.7601 win32 x64http_parser: 2.7.0node: 6.10.0v8: 5.1.281.93uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 58.2modules: 48openssl: 1.0.2k</code></pre><h2 id="初始化blog"><a href="#初始化blog" class="headerlink" title="初始化blog"></a>初始化blog</h2><p>进入准备创建blog的目录，同样点击鼠标右键，打开git bash命令框，<br>执行一下命令进行初始化</p><pre><code class="bash">$ hexo init myblog</code></pre><p>就会自动创建一个名字为myblog目录，这时本地blog就已经创建好了。<br>进入blog目录，启动 blog</p><pre><code class="bash">$ cd myblog$ hexo server</code></pre><p>在浏览器输入 <code>127.0.0.1:4000</code>就可以访问到刚刚创建好的blog了。</p><h2 id="换皮肤"><a href="#换皮肤" class="headerlink" title="换皮肤"></a>换皮肤</h2><p>如果觉的自带的皮肤太难看。可以根据以下步奏更换皮肤<br>在<a href="https://hexo.io/themes/">官网</a> 可以查看各种各样的皮肤，挑选自己喜欢的皮肤</p><p>这里以 <code>3-hexo</code> 这款皮肤为例（这款皮肤是笔者写的，效果可查看 <a href="http://yelog.org/">yelog.org</a>）<br>1）进入皮肤的 <code>github</code> 官网，如<a href="https://github.com/yelog/hexo-theme-3-hexo">3-hexo</a>的网址<br>找到 <code>clone or download</code> ,复制它的url：<a href="https://github.com/yelog/hexo-theme-3-hexo.git">https://github.com/yelog/hexo-theme-3-hexo.git</a></p><p>2）进入 <code>myblog</code> 目录，打开 <code>git bash</code> 命令框，执行以下命令将皮肤下载到themes目录下</p><pre><code class="bash">$ git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</code></pre><ol start="3"><li>修改 <code>myblog/_config.yml</code> 中的 <code>theme: landscape</code> 为 <code>theme: 3-hexo</code></li></ol><blockquote><p>如果使用 <code>3-hexo</code> 主题的话，还需要注意两点<br>①因为主题使用了自己的高亮效果，还需要修改 <code>highlight enable: true</code> 的 <code>true</code> 改为 <code>false</code>。<br>②由于主题启用了文章字数统计功能，需要安装一个插件，在 <code>myblog</code> 目录下，打开 <code>git bash</code> 命令框，执行 <code>npm i --save hexo-wordcount</code> 即可</p></blockquote><ol start="4"><li>重新渲染，启动服务器</li></ol><pre><code class="bash">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></pre><ol start="5"><li>打开浏览器查看效果，换肤成功</li></ol><h2 id="如何写文章"><a href="#如何写文章" class="headerlink" title="如何写文章"></a>如何写文章</h2><p>文章在 <code>myblog/source/_posts/</code> 下，以markdown格式写成，笔者推荐使用<code>atom</code>作为写作工具。<br>可以通过 <code>hexo new 文章名</code> 来创建一篇文章，当然也可以直接在 <code>_posts</code> 目录下直接新建.md文件。<br>执行命令 仍是在 <code>myblog</code> 目录下，打开 <code>git bash</code> 命令框。以下是常用命令，其他可以查阅官网。</p><pre><code class="bash"># 创建一个标题为“git教程”的文章$ hexo new &quot;git教程&quot;# 清除所有渲染的页面$ hexo clean# 将markdown渲染成页面$ hexo g# 启动hexo$ hexo s</code></pre><h2 id="发布到网上"><a href="#发布到网上" class="headerlink" title="发布到网上"></a>发布到网上</h2><p>如果想要在github上搭建blog，或者在自己的购买的服务器上搭建blog<br>可以查看笔者的往期文章</p><p>今天的教程就到这里，有什么问题可以在评论区交流。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm使用介绍</title>
      <link href="/2017/03/16/npm/"/>
      <url>/2017/03/16/npm/</url>
      
        <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>npm（全称Node Package Manager，即node包管理器）是Node.js默认的、以JavaScript编写的软件包管理系统。<br>作者：艾萨克·施吕特（Isaac Z. Schlueter）</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm 是随同node.js一起安装的，所以安装node.js即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre><code class="bash"># 查看版本$ npm -v# 升级$ sudo npm install npm -g# 安装模块$ npm install &lt;Module Name&gt;    #本地安装# 本地安装：安装到./node_modules(命令运行目录)$ npm install &lt;Module Name&gt; -g #全局安装# 全局安装：放在 /usr/local 下或者你 node 的安装目录。# 卸载模块$ npm uninstall &lt;Module Name&gt;# 更新模块$ npm update &lt;Module Name&gt;# 查看所有安装的模块$ npm ls     #所有本地模块$ npm ls -g  #所有全局模块# 搜索模块$ npm search &lt;Module Name&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为Hexo添加RSS和Sitemap</title>
      <link href="/2017/03/14/Hexo-RSS-Sitemap/"/>
      <url>/2017/03/14/Hexo-RSS-Sitemap/</url>
      
        <content type="html"><![CDATA[<h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><p>使用<code>RSS</code>是为自己的blog提供订阅功能。</p><h3 id="1-用npm安装插件"><a href="#1-用npm安装插件" class="headerlink" title="1.用npm安装插件"></a>1.用<code>npm</code>安装插件</h3><pre><code class="bash">$ npm install hexo-generator-feed --save</code></pre><h3 id="2-配置根目录-config-yml"><a href="#2-配置根目录-config-yml" class="headerlink" title="2.配置根目录_config.yml"></a>2.配置根目录_config.yml</h3><pre><code class="yml"># Extensions## Plugins: http://hexo.io/plugins/#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:type: atompath: atom.xmllimit: 20</code></pre><h3 id="3-验证配置是否成功"><a href="#3-验证配置是否成功" class="headerlink" title="3.验证配置是否成功"></a>3.验证配置是否成功</h3><p>执行 <code>hexo g</code>，查看一下public目录下，如果有 <code>atom.xml</code> 文件，则表明配置成功。</p><h3 id="4-显示RSS图标"><a href="#4-显示RSS图标" class="headerlink" title="4.显示RSS图标"></a>4.显示RSS图标</h3><p>这里以3-hexo主题为例，给rss添加链接<code>/atom.xml</code>修改<code>/themes/3-hexo/_config.yml</code></p><pre><code class="xml">link:  rss: /atom.xml</code></pre><h3 id="5-效果"><a href="#5-效果" class="headerlink" title="5.效果"></a>5.效果</h3><p><strong>链接图标：</strong><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FlmC3WWi9jzgVRdSKJ2_li5UHVsr.png" alt="图标"><br><strong>链接地址效果</strong><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FuTy1C-xSgdTTOZch_UH1355NAs9.png" alt="效果"></p><h2 id="添加Sitemap"><a href="#添加Sitemap" class="headerlink" title="添加Sitemap"></a>添加Sitemap</h2><p>Sitemap，网站地图，是网站优化中重要的一环，无论是对于访问者还是对于搜索引擎。</p><h3 id="1-用npm安装插件-1"><a href="#1-用npm安装插件-1" class="headerlink" title="1.用npm安装插件"></a>1.用<code>npm</code>安装插件</h3><pre><code class="bash">$ npm install hexo-generator-sitemap --save</code></pre><h3 id="2-配置根目录-config-yml-1"><a href="#2-配置根目录-config-yml-1" class="headerlink" title="2.配置根目录_config.yml"></a>2.配置根目录_config.yml</h3><pre><code class="xml">plugin:- hexo-generator-feed- hexo-generator-sitemap</code></pre><h3 id="3-验证配置是否成功-1"><a href="#3-验证配置是否成功-1" class="headerlink" title="3.验证配置是否成功"></a>3.验证配置是否成功</h3><p>执行 <code>hexo g</code>，查看一下public目录下，如果有 <code>sitemap.xml</code> 文件，则表明配置成功。</p><h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h3><p>访问 &#x2F;sitemap.xml 就能看到生成的站点地图了<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FtFLZ2CSfYa_IKLS-a9ymvKvaztp.png" alt="站点地图效果"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo开发日志-持续更新</title>
      <link href="/2017/03/13/3-hexo-logs/"/>
      <url>/2017/03/13/3-hexo-logs/</url>
      
        <content type="html"><![CDATA[<h2 id="2024年1月"><a href="#2024年1月" class="headerlink" title="2024年1月"></a>2024年1月</h2><h3 id="12-22"><a href="#12-22" class="headerlink" title="12-22"></a>12-22</h3><ol><li><code>feat</code> 使用新的头像</li><li>添加 <a href="https://jsfiddle.net/yelog/g9mx504z/18/">文字遮挡轮廓效果</a></li></ol><h3 id="01-05"><a href="#01-05" class="headerlink" title="01-05"></a>01-05</h3><ol><li><code>fix</code> 修复代码块的行号错位问题</li></ol><h2 id="2023年11月"><a href="#2023年11月" class="headerlink" title="2023年11月"></a>2023年11月</h2><h3 id="11-22"><a href="#11-22" class="headerlink" title="11-22"></a>11-22</h3><ol><li><code>fix</code> <a href="https://github.com/yelog/hexo-theme-3-hexo/commit/becb7b7bcf17255faf0893c8818a2fd1bfc8730f">修复代码块, 复制时丢失缩进和空格问题</a></li><li>环境 - 改为实例</li></ol><h2 id="2023年6月"><a href="#2023年6月" class="headerlink" title="2023年6月"></a>2023年6月</h2><h3 id="06-16"><a href="#06-16" class="headerlink" title="06-16"></a>06-16</h3><ol><li><code>fix</code> 修复文章分类层级不能无限递归的问题</li></ol><h3 id="06-02"><a href="#06-02" class="headerlink" title="06-02"></a>06-02</h3><ol><li><code>fix</code> 修复由于层级不连续，导致的 toc 获取不完整的问题</li></ol><h2 id="2023年5月"><a href="#2023年5月" class="headerlink" title="2023年5月"></a>2023年5月</h2><h3 id="05-23"><a href="#05-23" class="headerlink" title="05-23"></a>05-23</h3><ol><li><code>fix</code> 修复设置宽度后，背景不全 fixes <a href="https://github.com/yelog/hexo-theme-3-hexo/issues/123">#123</a></li></ol><h3 id="05-19"><a href="#05-19" class="headerlink" title="05-19"></a>05-19</h3><ol><li><code>fix</code> 修复隐藏文章后, 左侧分类上的文章数量不对的问题</li></ol><h2 id="2022年6月"><a href="#2022年6月" class="headerlink" title="2022年6月"></a>2022年6月</h2><h3 id="06-27"><a href="#06-27" class="headerlink" title="06-27"></a>06-27</h3><ol><li><code>add</code> 添加隐藏文章参数 <code>hidden</code>, 设置为 true 将文章从列表中隐藏</li></ol><h2 id="2022年2月"><a href="#2022年2月" class="headerlink" title="2022年2月"></a>2022年2月</h2><h3 id="02-22"><a href="#02-22" class="headerlink" title="02-22"></a>02-22</h3><ol><li><code>fix</code> jquery dom selector contains special symbols cause errors</li><li><code>fix</code> Script could run successfully in the case of errors synchronizing TOC</li></ol><h3 id="02-16"><a href="#02-16" class="headerlink" title="02-16"></a>02-16</h3><ol><li><code>fix</code> 修复首页使用自定义 html 标题时，大纲和文章关联关系丢失报错的问题</li></ol><h2 id="2021年9月"><a href="#2021年9月" class="headerlink" title="2021年9月"></a>2021年9月</h2><h3 id="09-26"><a href="#09-26" class="headerlink" title="09-26"></a>09-26</h3><ol><li><code>fix</code> 修复 gitalk 代理节点的问题，并升级为官方最新的代码</li></ol><h2 id="2021年2月"><a href="#2021年2月" class="headerlink" title="2021年2月"></a>2021年2月</h2><h3 id="02-22-1"><a href="#02-22-1" class="headerlink" title="02-22"></a>02-22</h3><ol><li><code>enhance</code> 按标题搜索支持字符级别模糊查询，并高亮显示</li></ol><h2 id="2020年12月"><a href="#2020年12月" class="headerlink" title="2020年12月"></a>2020年12月</h2><h3 id="12-28"><a href="#12-28" class="headerlink" title="12-28"></a>12-28</h3><ol><li><code>fix</code> 修复了右下角按钮错位问题</li><li><code>enhance</code> 优化图标样式，支持自定义图标引入</li><li><code>change</code> 分类超出隐藏</li></ol><h2 id="2020年8月"><a href="#2020年8月" class="headerlink" title="2020年8月"></a>2020年8月</h2><h3 id="08-09"><a href="#08-09" class="headerlink" title="08-09"></a>08-09</h3><ol><li><code>fix</code> 修复了切换大纲时，未关闭全局搜索框(in:) 的问题<br><a href="2">2</a>. <code>add</code> 代码块新增显示代码类型和复制代码功能</li><li><code>fix</code>分类支持 <code>\/#.[]()</code> 特殊字符</li><li><code>fix</code> 大纲支持<code>URI</code> 编码，兼容 <code>hexo5+</code></li></ol><h2 id="2020年5月"><a href="#2020年5月" class="headerlink" title="2020年5月"></a>2020年5月</h2><h3 id="05-29"><a href="#05-29" class="headerlink" title="05-29"></a>05-29</h3><ol><li><code>fix</code> 修复了旧版 hexo 报错的问题</li></ol><h3 id="05-23-1"><a href="#05-23-1" class="headerlink" title="05-23"></a>05-23</h3><ol><li><code>change</code> 由于 <code>cloudflare</code> 国内访问不稳定，故 <code>cdn</code> 切换到 <code>jsdelivr</code></li><li><code>fix</code> 修复文章大纲为空时，同步大纲报错的问题</li><li><code>change</code> 文章内 toc 生成从 <code>@【toc】</code> 改为 <code>【toc】</code> </li><li><code>enhance</code> 快捷键支持关闭 <code>shortcutKey: false</code></li><li><code>add</code> 添加第三方评论 来必力 和 utteranc</li><li><code>remove</code> 移除网易云评论</li></ol><h3 id="05-21"><a href="#05-21" class="headerlink" title="05-21"></a>05-21</h3><ol><li><code>add</code> 添加备案号配置</li></ol><h3 id="05-20"><a href="#05-20" class="headerlink" title="05-20"></a>05-20</h3><ol><li><code>enhance</code> 内置文章排序，无需再引入排序插件或修改源代码</li><li><code>enhance</code> 支持自定义分类的顺序， 具体可以查看 <a href="/2017/03/23/3-hexo-instruction/" title="3-hexo使用说明">3-hexo使用说明</a> 中的排序相关内容</li></ol><h3 id="05-19-1"><a href="#05-19-1" class="headerlink" title="05-19"></a>05-19</h3><ol><li><code>change</code> 重做了文章大纲</li><li><code>change</code> 重做了搜索&#x2F;标签页</li><li><code>style</code> 优化了整体界面风格</li><li><code>fix</code>修复了诸如 <strong>分类选中动画闪烁</strong> 等细节问题</li></ol><h2 id="2020年2月"><a href="#2020年2月" class="headerlink" title="2020年2月"></a>2020年2月</h2><h3 id="02-04"><a href="#02-04" class="headerlink" title="02-04"></a>02-04</h3><p>1.<code>fix</code>: 修复 gitalk 使用  app API query parameter 弃用的问题</p><h2 id="2019年11月"><a href="#2019年11月" class="headerlink" title="2019年11月"></a>2019年11月</h2><h3 id="11-12"><a href="#11-12" class="headerlink" title="11-12"></a>11-12</h3><p>1.<code>fix</code>: 修复 hexo4.0 版本链接外跳的问题<br>2.<code>add</code>: 支持 mermaid <a href="/2019/11/12/3-hexo-support-mermaid/" title="3-hexo支持mermaid图表">3-hexo支持mermaid图表</a></p><h3 id="09-24"><a href="#09-24" class="headerlink" title="09-24"></a>09-24</h3><p>1.<code>add</code>: 支持文章内 toc 生成 <a href="/2019/09/24/3-hexo-toc/" title="3-hexo文章内toc生成">3-hexo文章内toc生成</a></p><h3 id="09-05"><a href="#09-05" class="headerlink" title="09-05"></a>09-05</h3><p>1.<code>fix</code>: <code>pjax</code> 兼容 <code>jsfiddle</code> 的渲染 <a href="/2019/09/24/3-hexo-jsfiddle/" title="3-hexo支持jsfiddle渲染">3-hexo支持jsfiddle渲染</a></p><h2 id="2019年8月"><a href="#2019年8月" class="headerlink" title="2019年8月"></a>2019年8月</h2><h3 id="08-20"><a href="#08-20" class="headerlink" title="08-20"></a>08-20</h3><p>1.<code>fix</code>: 左下角菜单个数为一个时，在移动端出现的位置错乱的问题</p><h3 id="08-13"><a href="#08-13" class="headerlink" title="08-13"></a>08-13</h3><ol><li><code>add</code> 添加自定义左侧分类栏宽度 <code>category.width</code>，详情见 <code>_config.yml</code></li></ol><h3 id="08-01"><a href="#08-01" class="headerlink" title="08-01"></a>08-01</h3><ol><li><code>fix</code> 修复 友链 区域超出不滚动的问题</li></ol><h2 id="2019年7月"><a href="#2019年7月" class="headerlink" title="2019年7月"></a>2019年7月</h2><h3 id="07-22"><a href="#07-22" class="headerlink" title="07-22"></a>07-22</h3><ol><li><code>add</code> 新增修改文章列表颜色的参数</li></ol><h3 id="07-15"><a href="#07-15" class="headerlink" title="07-15"></a>07-15</h3><ol><li><code>fix</code> 修复 <strong>gitalk</strong> 由于作者停止了跨域的服务，借用其他人的跨域服务解决问题</li></ol><h3 id="07-12"><a href="#07-12" class="headerlink" title="07-12"></a>07-12</h3><ol><li><code>add</code> 新增图标：<strong>qq、酷狗、网易云音乐</strong></li><li><code>fix</code> 修复文末声明跨行的问题</li></ol><h2 id="2019年6月"><a href="#2019年6月" class="headerlink" title="2019年6月"></a>2019年6月</h2><h3 id="06-09"><a href="#06-09" class="headerlink" title="06-09"></a>06-09</h3><ol><li><code>fix</code> 修复了标签按钮在某些分辨率下错位问题。</li><li><code>fix</code> 修复了代码行数超百行时，行号溢出的问题</li></ol><h2 id="2019年5月"><a href="#2019年5月" class="headerlink" title="2019年5月"></a>2019年5月</h2><h3 id="05-21-1"><a href="#05-21-1" class="headerlink" title="05-21"></a>05-21</h3><ol><li><p><code>add</code> 文章分类可以显示文章数 <code>category&gt;num</code></p></li><li><p><code>add</code> 文章分类支持多级显示 <code>category&gt;sub</code></p></li><li><p><code>fix</code> 修复<code>gitalk</code>显示评论数错误的问题</p></li><li><p>添加背景图设置：</p><blockquote><p>① <code>_config.xml</code> 配置默认背景图片</p><p>首页背景图： <code>index_bg_img: xxx.jpg</code></p><p>文章页面背景图：<code>other_bg_img: xxx.jpg</code></p><p>② 我们还可以单独给某篇文章设置背景图（优先级最高）</p><pre><code class="yml">title: 3-hexo开发日志-持续更新bgImg: xxx.jpg  #设置这篇文章的背景图</code></pre></blockquote></li></ol><h3 id="05-05"><a href="#05-05" class="headerlink" title="05-05"></a>05-05</h3><ol><li><code>add</code> 添加代码段高亮样式配置，对应 markdown 语法 `` ，位置：<code>_config.yml</code> 关键字 <code>code</code></li></ol><h2 id="2019年1月"><a href="#2019年1月" class="headerlink" title="2019年1月"></a>2019年1月</h2><h3 id="01-05-1"><a href="#01-05-1" class="headerlink" title="01-05"></a>01-05</h3><ol><li><code>fix</code> 修复Firefox下，Tags 图标失效问题</li></ol><h2 id="2018年11月"><a href="#2018年11月" class="headerlink" title="2018年11月"></a>2018年11月</h2><h3 id="11-30"><a href="#11-30" class="headerlink" title="11-30"></a>11-30</h3><ol><li><code>add</code> 应用彩色图标，新增简书、知乎、csdn、oschina等图标<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fgw9J7Ab6BGl09e-qHo5ZmY5D4lW.png" alt="应用彩色图标"></li><li><code>fix</code> 修复 gitment 登录报错的问题</li><li><code>enhance</code> 升级gitalk插件，并跟随官方版本</li></ol><h2 id="2018年8月"><a href="#2018年8月" class="headerlink" title="2018年8月"></a>2018年8月</h2><h3 id="08-08-修复"><a href="#08-08-修复" class="headerlink" title="08-08 修复"></a>08-08 修复</h3><ol><li><code>fix</code> : 修复左侧栏出现滚动条的问题</li></ol><h2 id="2018年4月"><a href="#2018年4月" class="headerlink" title="2018年4月"></a>2018年4月</h2><h3 id="04-18-修复"><a href="#04-18-修复" class="headerlink" title="04-18 修复"></a>04-18 修复</h3><ol><li><code>fix</code> : 调整原文地址key，解决和 encrypt 的冲突</li></ol><h2 id="2017年12月"><a href="#2017年12月" class="headerlink" title="2017年12月"></a>2017年12月</h2><h3 id="12-31-优化"><a href="#12-31-优化" class="headerlink" title="12-31 优化"></a>12-31 优化</h3><ol><li><code>enhance</code> : 关闭打赏，则屏蔽相关代码。</li></ol><h3 id="12-28-添加自定义菜单功能"><a href="#12-28-添加自定义菜单功能" class="headerlink" title="12-28 添加自定义菜单功能"></a>12-28 添加自定义菜单功能</h3><ol><li><code>add</code> : 添加自定义菜单功能，见配置文件 <code>menu:</code> 相关</li><li><code>fix</code> : 修复 <code>photoSwipe</code> 一些问题：手机端右上角图标遮挡、首页图片渲染失败、CDN引入配置文件</li></ol><h3 id="12-27-插件添加"><a href="#12-27-插件添加" class="headerlink" title="12-27 插件添加"></a>12-27 插件添加</h3><ol><li><code>add</code> : 引入 <code>photoSwipe</code> 图片相册，可在 <code>_config</code> 中 配置 <code>img_resize: photoSwipe</code></li><li><code>fix</code> : 左侧分类列表过多，则显示滚动条</li><li><code>change</code> : 由于cdnjs最近在国内网络波动较大，将默认CDN改到bootcdn</li></ol><h3 id="12-26-功能优化"><a href="#12-26-功能优化" class="headerlink" title="12-26 功能优化"></a>12-26 功能优化</h3><ol><li><code>enhance</code> : 全文检索支持通过方向键选择文章，回车跳转</li></ol><h3 id="12-24-功能添加"><a href="#12-24-功能添加" class="headerlink" title="12-24 功能添加"></a>12-24 功能添加</h3><ol><li><code>add</code> : 添加全文检索功能， 输入<code>in:</code>开头即可开始检索</li></ol><h2 id="2017年10月"><a href="#2017年10月" class="headerlink" title="2017年10月"></a>2017年10月</h2><h3 id="10-21-样式调整"><a href="#10-21-样式调整" class="headerlink" title="10-21 样式调整"></a>10-21 样式调整</h3><ol><li><code>enhance</code> : 优化了高亮样式 <code>atom-light</code></li></ol><h3 id="10-20-样式调整与添加"><a href="#10-20-样式调整与添加" class="headerlink" title="10-20 样式调整与添加"></a>10-20 样式调整与添加</h3><ol><li><code>add</code> : 添加列表样式 <code>thread</code></li><li><code>add</code> : 添加引用块样式 <code>bracket</code></li><li><code>add</code> : 文章列表可加入背景图</li></ol><h3 id="10-07"><a href="#10-07" class="headerlink" title="10-07"></a>10-07</h3><ol><li><code>add</code> : 加入关于&#x2F;友链页面</li></ol><h2 id="2017年9月"><a href="#2017年9月" class="headerlink" title="2017年9月"></a>2017年9月</h2><h3 id="09-21"><a href="#09-21" class="headerlink" title="09-21"></a>09-21</h3><ol><li><code>polish</code> : 引入<code>fragment_cache</code>局部缓存，大幅缩减渲染(hexo g)的时间 <a href="/2017/09/21/hexo-fragment_cache/" title="Hexo加速渲染速度之fragment_cache">Hexo加速渲染速度之fragment_cache</a></li><li><code>enhance</code> : 加入 SEO ，tag转keywords , title转description</li><li><code>add</code> : 添加文末说明参数</li><li><code>lit</code> : 头像跳转首页的请求也处理为 pjax</li></ol><h2 id="2017年7月"><a href="#2017年7月" class="headerlink" title="2017年7月"></a>2017年7月</h2><h3 id="07-05-添加MathJax数学公式支持"><a href="#07-05-添加MathJax数学公式支持" class="headerlink" title="07-05 添加MathJax数学公式支持"></a>07-05 添加MathJax数学公式支持</h3><ol><li><code>add</code> : 添加MathJax数学公式支持 <a href="/2017/07/05/3-hexo-mathjax/" title="3-hexo配置MathJax数学公式渲染">3-hexo配置MathJax数学公式渲染</a></li></ol><h2 id="2017年6月"><a href="#2017年6月" class="headerlink" title="2017年6月"></a>2017年6月</h2><h3 id="06-26-添加gitment评论系统"><a href="#06-26-添加gitment评论系统" class="headerlink" title="06-26 添加gitment评论系统"></a>06-26 添加gitment评论系统</h3><ol><li><code>add</code> : 添加gitment评论系统，具体可参考 <a href="/2017/06/26/gitment/" title="完美替代多说-gitment">完美替代多说-gitment</a></li></ol><h2 id="2017年4月"><a href="#2017年4月" class="headerlink" title="2017年4月"></a>2017年4月</h2><h3 id="04-27-调整样式"><a href="#04-27-调整样式" class="headerlink" title="04-27 调整样式"></a>04-27 调整样式</h3><ol><li><code>change</code>：调整引用块内p的样式。</li></ol><h3 id="04-19-调整样式和修复bug"><a href="#04-19-调整样式和修复bug" class="headerlink" title="04-19 调整样式和修复bug"></a>04-19 调整样式和修复bug</h3><ol><li><code>change:</code>调整文章目录间距</li><li><code>fix:</code>修复可能出现的访问量不显示的问题</li></ol><h3 id="04-17-调整样式及修复bug"><a href="#04-17-调整样式及修复bug" class="headerlink" title="04-17 调整样式及修复bug"></a>04-17 调整样式及修复bug</h3><ol><li><code>change:</code>调整大屏下文章最大宽度（从780调到900），代码字号调整为比文字小3px</li><li><code>fix:</code>修复在过滤条件下，鼠标上下键不能正常在第一个，最后一个进行跳转的问题</li><li><code>fix:</code>修复首页可能出现的错误渲染，导致没有样式的情况。</li></ol><h2 id="2017年3月"><a href="#2017年3月" class="headerlink" title="2017年3月"></a>2017年3月</h2><h3 id="03-29-增强文章列表上下键功能"><a href="#03-29-增强文章列表上下键功能" class="headerlink" title="03-29 增强文章列表上下键功能"></a>03-29 增强文章列表上下键功能</h3><ol><li><code>enhance:</code>增强列表跟随选择的文章上下滚动</li><li><code>enhance:</code>文章列表上下循环</li></ol><h3 id="03-24-修复搜索及添加快捷键"><a href="#03-24-修复搜索及添加快捷键" class="headerlink" title="03-24 修复搜索及添加快捷键"></a>03-24 修复搜索及添加快捷键</h3><ol><li><code>fix:</code>修复title关键字和标签关键字冲突的情况</li><li><code>fix:</code>修复前进后退时对图片的错误处理</li><li><code>enhance:</code>在搜索时，可以键盘上下键来选择文章</li><li><code>enhance:</code>添加了一些快捷键，详情查看 <a href="/2017/03/24/3-hexo-shortcuts/" title="3-hexo快捷键说明">3-hexo快捷键说明</a></li></ol><h3 id="03-22-添加评论系统"><a href="#03-22-添加评论系统" class="headerlink" title="03-22 添加评论系统"></a>03-22 添加评论系统</h3><ol><li><code>enhance:</code> 添加网易云跟帖评论系统</li></ol><h3 id="03-21-图片放大动画"><a href="#03-21-图片放大动画" class="headerlink" title="03-21 图片放大动画"></a>03-21 图片放大动画</h3><ol><li><code>enhance:</code>增加图片放大动画，增加过度感，最大放大至原图大小（若尺寸超过屏幕，按屏幕大小限制）</li></ol><h3 id="03-20-评论添加锚点"><a href="#03-20-评论添加锚点" class="headerlink" title="03-20 评论添加锚点"></a>03-20 评论添加锚点</h3><ol><li><code>enhance:</code>添加文章meta(标题下)中的评论数点击事件，滑动到评论区，评论区若隐藏，则自动打开</li></ol><h3 id="03-19-修复firfox错位问题"><a href="#03-19-修复firfox错位问题" class="headerlink" title="03-19 修复firfox错位问题"></a>03-19 修复firfox错位问题</h3><ol><li><code>fix:</code>修复firefox错位问题</li><li><code>enhance:</code>文章标题下的分类、标签、作者在文章列表隐藏的情况下（包括移动端）点击，自动呼出文章列表</li></ol><h3 id="03-18-动画优化及修复bug"><a href="#03-18-动画优化及修复bug" class="headerlink" title="03-18 动画优化及修复bug"></a>03-18 动画优化及修复bug</h3><ol><li><code>enhance:</code>给所有锚点添加动画</li><li><code>fix:</code>修复文章列表页自适应宽度,解决由于firefox不支持自定义滚动条导致的错位</li><li><code>change:</code>改动页面内站点访问量统计的标签，改动查看 — <a href="/2017/03/13/3-hexo-homepage/" title="3-hexo配置首页">3-hexo配置首页</a></li></ol><h3 id="03-17-评论调整优化"><a href="#03-17-评论调整优化" class="headerlink" title="03-17 评论调整优化"></a>03-17 评论调整优化</h3><ol><li>修复预加载时的评论数</li><li>首页添加评论框</li></ol><h3 id="03-16-文章meta样式修改"><a href="#03-16-文章meta样式修改" class="headerlink" title="03-16 文章meta样式修改"></a>03-16 文章meta样式修改</h3><ol><li>将文章meta（包括文集、标签、时间、字数等）改到文章title下方</li><li>站点版权信息（@2017 Yelog）,自定义，在主题 <code>_config.yml</code> 中配置</li><li>文章meta中添加评论数</li></ol><h3 id="03-15-增加样式"><a href="#03-15-增加样式" class="headerlink" title="03-15 增加样式"></a>03-15 增加样式</h3><ol><li>扩展了文章列表的移入样式，位置 <code>_config.yml</code> 中 <code>article_list</code></li></ol><h3 id="03-14-打赏优化"><a href="#03-14-打赏优化" class="headerlink" title="03-14 打赏优化"></a>03-14 打赏优化</h3><ol><li>加入切换二维码动画</li><li>移动端样式调整</li></ol><h3 id="03-13-首页重构"><a href="#03-13-首页重构" class="headerlink" title="03-13 首页重构"></a>03-13 首页重构</h3><ol><li>将首页改写为md格式，方便博主更改，位置：&#x2F;layout&#x2F;index.md</li></ol><h3 id="03-09-修复多说、添加流量统计"><a href="#03-09-修复多说、添加流量统计" class="headerlink" title="03-09 修复多说、添加流量统计"></a>03-09 修复多说、添加流量统计</h3><ol><li>修复多说在pjax中的使用</li><li>添加字数统计功能</li><li>添加文章版权信息</li></ol><h3 id="03-06-添加打赏功能"><a href="#03-06-添加打赏功能" class="headerlink" title="03-06 添加打赏功能"></a>03-06 添加打赏功能</h3><ol><li>添加打赏功能</li><li>添加table样式</li></ol><h3 id="03-04-添加作者和标签的提示"><a href="#03-04-添加作者和标签的提示" class="headerlink" title="03-04 添加作者和标签的提示"></a>03-04 添加作者和标签的提示</h3><ol><li>输入#或@显示下拉提示</li></ol><h3 id="03-03-修复多作者模式"><a href="#03-03-修复多作者模式" class="headerlink" title="03-03 修复多作者模式"></a>03-03 修复多作者模式</h3><ol><li>修复开启多作者模式时，文章没有作者引起的异常</li></ol><h3 id="03-02-图片样式改动"><a href="#03-02-图片样式改动" class="headerlink" title="03-02 图片样式改动"></a>03-02 图片样式改动</h3><ol><li>alt显示在图片下方</li><li>图片放大功能</li><li>移动端图片宽度100%</li></ol><h2 id="2017年2月"><a href="#2017年2月" class="headerlink" title="2017年2月"></a>2017年2月</h2><h3 id="02-28-多作者模式"><a href="#02-28-多作者模式" class="headerlink" title="02-28 多作者模式"></a>02-28 多作者模式</h3><ol><li>添加多作者模式</li></ol><h3 id="02-27-调整样式"><a href="#02-27-调整样式" class="headerlink" title="02-27 调整样式"></a>02-27 调整样式</h3><ol><li>修改a的样式</li><li>调整移动端宽度</li></ol><h3 id="02-25-修改github仓库名"><a href="#02-25-修改github仓库名" class="headerlink" title="02-25 修改github仓库名"></a>02-25 修改github仓库名</h3><ol><li>修改github仓库名：从 <code>3-hexo</code> 到 <code>hexo-theme-3-hexo</code></li><li>添加回到顶端功能：小火箭</li><li>修复safari滑动bug</li></ol><h3 id="02-24-站点版权、ICON和置顶"><a href="#02-24-站点版权、ICON和置顶" class="headerlink" title="02-24 站点版权、ICON和置顶"></a>02-24 站点版权、ICON和置顶</h3><ol><li>添加站点版权信息</li><li>更换icon到icoMoon</li><li>添加置顶功能</li></ol><h3 id="02-20-代码块高亮主题"><a href="#02-20-代码块高亮主题" class="headerlink" title="02-20 代码块高亮主题"></a>02-20 代码块高亮主题</h3><ol><li>添加十几种代码高亮主题</li><li>移动端适配（ipad、手机）</li></ol><h3 id="02-19-移动端适配"><a href="#02-19-移动端适配" class="headerlink" title="02-19 移动端适配"></a>02-19 移动端适配</h3><ol><li>添加文章加载动画进度条</li><li>开始进行移动端适配</li></ol><h3 id="02-08-评论系统"><a href="#02-08-评论系统" class="headerlink" title="02-08 评论系统"></a>02-08 评论系统</h3><ol><li>添加多说评论</li><li>添加disqus评论</li></ol><h3 id="02-07-样式及动画新增修改"><a href="#02-07-样式及动画新增修改" class="headerlink" title="02-07 样式及动画新增修改"></a>02-07 样式及动画新增修改</h3><ol><li>添加标题和时间的title</li><li>添加头像下外链图标（facebook等）</li><li>添加目录显示动画</li></ol><h3 id="02-06-功能和样式开发"><a href="#02-06-功能和样式开发" class="headerlink" title="02-06 功能和样式开发"></a>02-06 功能和样式开发</h3><ol><li>添加全屏和目录功能</li><li>搜索框下添加tags的显示，并支持使用#搜索</li><li>CDN改为在_config.yml中配置</li></ol><h3 id="02-05-开源3-hexo主题"><a href="#02-05-开源3-hexo主题" class="headerlink" title="02-05 开源3-hexo主题"></a>02-05 开源3-hexo主题</h3><ol><li>设计主题页面结构</li><li>分类过滤和标题关键字搜索</li><li>使用pjax方式加载页面</li><li>添加引用、表格等样式</li><li>使用highlight.js来处理代码块高亮</li><li>命名为3-hexo并在github上开源e</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo配置首页</title>
      <link href="/2017/03/13/3-hexo-homepage/"/>
      <url>/2017/03/13/3-hexo-homepage/</url>
      
        <content type="html"><![CDATA[<p>今日将首页提到md文件中了，方便大家的更改。</p><p>首页文件位置 &#x2F;layout&#x2F;indexs.md ，既然是md格式，要怎么写大家应该都熟门熟路了，阿杰就不赘述了。</p><p>如果需要使用以下信息，可以按照下面的方式使用（<strong>以下内容不限首页使用</strong>）</p><h2 id="文章数统计-字数统计"><a href="#文章数统计-字数统计" class="headerlink" title="文章数统计&#x2F;字数统计"></a>文章数统计&#x2F;字数统计</h2><p>加入含有 <code>class=&quot;article_number&quot;</code>的html标签可显示文章数量。<br>加入含有 <code>class=&quot;site_word_count&quot;</code>的html标签可显示站点总字数。</p><pre><code class="html">&lt;!-- 我这里是借用了code的样式，所以直接使用code标签。    自定义样式，可加入style属性设置--&gt;&lt;code class=&quot;article_number&quot;&gt;&lt;/code&gt;&lt;code class=&quot;site_word_count&quot;&gt;&lt;/code&gt;</code></pre><p><strong>上面代码的效果：</strong><br>文章：<code class="article_number"></code>篇；总字数：<code class="site_word_count"></code>字；</p><h2 id="流量统计"><a href="#流量统计" class="headerlink" title="流量统计"></a>流量统计</h2><blockquote><p>日志： 2017-03-18改动，由原来的 id 改为现在的 class，可在页面添加多个同类标签</p></blockquote><p>加入含有 <code>class=&quot;site_uv&quot;</code>的html标签可显示站点访问人次。<br>加入含有 <code>class=&quot;site_pv&quot;</code>的html标签可显示站点访问量。</p><pre><code class="html">&lt;!-- 我这里是借用了code的样式，所以直接使用code标签。    自定义样式，可加入style属性设置--&gt;&lt;code class=&quot;site_uv&quot;&gt;&lt;/code&gt;&lt;code class=&quot;site_pv&quot;&gt;&lt;/code&gt;</code></pre><p><strong>上面代码的效果：</strong><br>访问人数：<code class="site_uv"></code>人，访问量：<code class="site_pv"></code>次。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不蒜子适配pjax</title>
      <link href="/2017/03/09/busuanzi-pjax/"/>
      <url>/2017/03/09/busuanzi-pjax/</url>
      
        <content type="html"><![CDATA[<h2 id="不蒜子一般配置"><a href="#不蒜子一般配置" class="headerlink" title="不蒜子一般配置"></a>不蒜子一般配置</h2><p>加入脚本</p><pre><code class="html">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&lt;!--pv方式 --&gt;&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;&lt;!--uv方式 --&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;  本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次&lt;/span&gt;&lt;!--pv方式 --&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;  本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;</code></pre><p>只安装脚本，不安装标签代码，即可实现只记数，不显示。</p><h2 id="适配pjax"><a href="#适配pjax" class="headerlink" title="适配pjax"></a>适配pjax</h2><p>最近开发3-hexo主题，由于主题使用的pjax，异步加载页面时不蒜子会出现加载不到多说js的问题。<br>在pjax：end加载下面js代替标签即可</p><pre><code class="JavaScript">$.getScript(&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;);</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多说适配pjax</title>
      <link href="/2017/03/09/duoshuo-pjax/"/>
      <url>/2017/03/09/duoshuo-pjax/</url>
      
        <content type="html"><![CDATA[<p>最近开发3-hexo主题，由于主题使用的pjax，异步加载页面时多说会出现加载不到多说js的问题。</p><p>多说加载代码如下：</p><pre><code class="JavaScript">//加载多说function loadComment() &#123;  duoshuoQuery = &#123;short_name: $(&quot;.theme_duoshuo_domain&quot;).val()&#125;;  var d = document, s = d.createElement(&#39;script&#39;);  s.src = &#39;https://static.duoshuo.com/embed.js?t=&#39;+new Date().getTime();  s.async = true; s.charset = &#39;UTF-8&#39;;  (d.head || d.body).appendChild(s);&#125;</code></pre><p>当局部加载页面时，就会无法加载多说。<br>需要编写一个js方法，参考文档：(<a href="http://dev.duoshuo.com/docs/50b344447f32d30066000147">http://dev.duoshuo.com/docs/50b344447f32d30066000147</a>)</p><pre><code class="JavaScript">/** * pjax后需要回调函数.加载多说 */function pajx_loadDuodsuo()&#123;  if(typeof duoshuoQuery ==&quot;undefined&quot;)&#123;    loadComment();  &#125; else &#123;    var dus=$(&quot;.ds-thread&quot;);    if($(dus).length==1)&#123;      var el = document.createElement(&#39;div&#39;);      el.setAttribute(&#39;data-thread-key&#39;,$(dus).attr(&quot;data-thread-key&quot;));//必选参数      el.setAttribute(&#39;data-url&#39;,$(dus).attr(&quot;data-url&quot;));      DUOSHUO.EmbedThread(el);      $(dus).html(el);    &#125;  &#125;&#125;</code></pre><p>在pjax:end中调用此方法即可。</p>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo加入字数统计WordCount</title>
      <link href="/2017/03/09/hexo-wordcount/"/>
      <url>/2017/03/09/hexo-wordcount/</url>
      
        <content type="html"><![CDATA[<p>只需要安装一个插件 WordCount</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code class="bash">$ npm i hexo-wordcount --save</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>单篇文章字数</p><pre><code class="html">&lt;%=wordcount(post.content) %&gt;</code></pre><p>所有文章的总字数</p><pre><code class="html">&lt;%=totalcount(site) %&gt;</code></pre><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>2017年3月9日，给3-hexo添加字数统计功能</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面开发规范</title>
      <link href="/2017/03/08/font-develop-rule/"/>
      <url>/2017/03/08/font-develop-rule/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>随着开发人员的不断增加，在没有规范的情况下，就会导致开发的页面不统一，不像是一个系统。为了解决这个问题，就有了此规范的出现，当然为了不影响各个功能的灵活性，此规范要求不高， 请耐心阅读，并应用到日常开发中。</p><p>当然，如果你有更好的建议，可以通过邮件联系 <a href="mailto:&#x79;&#97;&#110;&#103;&#x79;&#106;&#49;&#51;&#64;&#x6c;&#101;&#110;&#x6f;&#x76;&#111;&#x2e;&#x63;&#111;&#109;">&#x79;&#97;&#110;&#103;&#x79;&#106;&#49;&#51;&#64;&#x6c;&#101;&#110;&#x6f;&#x76;&#111;&#x2e;&#x63;&#111;&#109;</a>，进行沟通来完善此篇规范。</p><h2 id="二、编程规范"><a href="#二、编程规范" class="headerlink" title="二、编程规范"></a>二、编程规范</h2><h3 id="2-1-命名规范"><a href="#2-1-命名规范" class="headerlink" title="2.1 命名规范"></a>2.1 命名规范</h3><h4 id="2-1-1-文件命名"><a href="#2-1-1-文件命名" class="headerlink" title="2.1.1 文件命名"></a>2.1.1 文件命名</h4><p>全部采用小写方式，以横杠分割。</p><p>正例: <code>resource.vue</code>、<code>user-info.vue</code></p><p>反例: <code>basic_data.vue</code>、<code>EventLog.vue</code></p><h4 id="2-1-2-目录命名"><a href="#2-1-2-目录命名" class="headerlink" title="2.1.2 目录命名"></a>2.1.2 目录命名</h4><p>全部采用小写方式，以横杠分割。</p><p>正例: <code>system</code>、<code>ship-support</code></p><p>反例: <code>errorPage</code>、<code>Components</code></p><h4 id="2-1-3-JS、CSS、SCSS、HTML、PNG文件命名"><a href="#2-1-3-JS、CSS、SCSS、HTML、PNG文件命名" class="headerlink" title="2.1.3 JS、CSS、SCSS、HTML、PNG文件命名"></a>2.1.3 JS、CSS、SCSS、HTML、PNG文件命名</h4><p>全部采用小写方式，以横杠分割。</p><p>正例: <code>btn.scss</code>、<code>element-ui.scss</code>、<code>lenovo-logo.png</code></p><p>反例: <code>leftSearch.scss</code>、<code>LeGrid.js</code></p><h4 id="2-1-4-命名规范性"><a href="#2-1-4-命名规范性" class="headerlink" title="2.1.4 命名规范性"></a>2.1.4 命名规范性</h4><p>代码中命名严禁使用拼音和英文混合的方式，更不允许直接使用中文的方式。说明: 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音的命名方式也要避免采用。</p><p>正例: <code>loading</code>、<code>searchForm</code>、<code>tableHeight</code>、<code>dmsLoading</code>、<code>rmb</code> 专有名词缩写，视同英文<br>反例: <code>getLiaoPanName</code>、<code>DMSLoading</code></p><h3 id="2-2-插件使用"><a href="#2-2-插件使用" class="headerlink" title="2.2 插件使用"></a>2.2 插件使用</h3><h4 id="2-2-1-eslint-代码规范"><a href="#2-2-1-eslint-代码规范" class="headerlink" title="2.2.1 eslint 代码规范"></a>2.2.1 eslint 代码规范</h4><p>注意：前端的代码格式化已经在 <code>eslint</code> 中声明了，所以确保自己已经启用了 <code>eslint</code>，并使 <code>eslint</code> 进行代码格式化。</p><h4 id="2-2-2-i18n-国际化"><a href="#2-2-2-i18n-国际化" class="headerlink" title="2.2.2 i18n 国际化"></a>2.2.2 i18n 国际化</h4><p>所有展示的内容都要支持国际化。国际化内容写到 <code>/src/lang/</code> 下的对应模块，通过 <code>this.$t(&#39;xx.xx.xx&#39;)</code> 来使用。</p><p>英文国际化的列或标签，请使用开头字母大写的方式，如: <code>UserId</code>、<code>Status</code>、<code>UserName</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniuimage-20211227175812563.png" alt="image-20211227175812563"></p><h3 id="2-3-组件使用"><a href="#2-3-组件使用" class="headerlink" title="2.3 组件使用"></a>2.3 组件使用</h3><h4 id="2-3-1-table-表格"><a href="#2-3-1-table-表格" class="headerlink" title="2.3.1 table 表格"></a>2.3.1 table 表格</h4><p>表格组件推荐使用 <a href="https://xuliangzhan_admin.gitee.io/vxe-table/#/table/start/install">vxe-table</a>，功能更加全面，之后也会主力优化此表格。比如可编辑表格的样式经过优化：<a href="http://10.176.66.58/#/example/table/edit">可编辑表格</a></p><h4 id="2-3-2-dialog-弹窗"><a href="#2-3-2-dialog-弹窗" class="headerlink" title="2.3.2 dialog 弹窗"></a>2.3.2 dialog 弹窗</h4><p>弹窗组件推荐使用 <a href="https://xuliangzhan_admin.gitee.io/vxe-table/#/table/module/modal">vxe-modal</a>，代码设计更加合理，功能也更加全面。</p><h4 id="2-3-2-element-ui"><a href="#2-3-2-element-ui" class="headerlink" title="2.3.2 element-ui"></a>2.3.2 element-ui</h4><p>除 <code>table</code> 和 <code>modal</code> 外，其他组件比如 <code>form</code>、<code>button</code>、<code>DateTimePicker</code> 优先使用 <a href="https://element.eleme.cn/#/zh-CN/component/radio">element-ui</a> 。</p><h5 id="2-3-2-1-icon-图标"><a href="#2-3-2-1-icon-图标" class="headerlink" title="2.3.2.1 icon 图标"></a>2.3.2.1 icon 图标</h5><p>图标优先使用  <a href="https://element.eleme.cn/#/zh-CN/component/icon">element-ui</a> 的图标。如果没有合适的，可以在 <a href="https://www.iconfont.cn/">iconfont</a> 上寻找到合适的图标后，找 <a href="mailto:&#121;&#x61;&#110;&#x67;&#x79;&#x6a;&#x31;&#x33;&#x40;&#108;&#101;&#110;&#111;&#118;&#111;&#46;&#99;&#x6f;&#x6d;">&#121;&#x61;&#110;&#x67;&#x79;&#x6a;&#x31;&#x33;&#x40;&#108;&#101;&#110;&#111;&#118;&#111;&#46;&#99;&#x6f;&#x6d;</a> 进行添加。</p><h5 id="2-3-2-2-button-按钮"><a href="#2-3-2-2-button-按钮" class="headerlink" title="2.3.2.2 button 按钮"></a>2.3.2.2 button 按钮</h5><p>按钮大小：除了在表格中的按钮要使用 <code>size=&quot;mini&quot;</code> 外，其他情况使用默认大小即可。</p><p>按钮颜色：普通的 查询&#x2F;修改&#x2F;操作 等按钮使用蓝色 <code>type=&quot;primary&quot;</code>，新增使用绿色 <code>type=&quot;success&quot;</code>，删除等“危险”操作使用红色 <code>type=&quot;danger&quot;</code>。推荐给按钮添加图标，可在 <a href="https://element.eleme.cn/#/zh-CN/component/icon">element-ui-icon</a> 寻找合适的图标。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniuimage-20211227172602560.png" alt="image-20211227172602560"></p><h4 id="2-3-3-其他组件"><a href="#2-3-3-其他组件" class="headerlink" title="2.3.3 其他组件"></a>2.3.3 其他组件</h4><p>如果上述组件并不能满足业务需求，可以优先在网上找到合适的组件后，与 <a href="mailto:&#x79;&#97;&#x6e;&#103;&#121;&#x6a;&#49;&#x33;&#64;&#108;&#x65;&#x6e;&#x6f;&#x6f;&#118;&#46;&#x63;&#111;&#109;">&#x79;&#97;&#x6e;&#103;&#121;&#x6a;&#49;&#x33;&#64;&#108;&#x65;&#x6e;&#x6f;&#x6f;&#118;&#46;&#x63;&#111;&#109;</a> 联系后添加。</p><h3 id="2-4-页面布局"><a href="#2-4-页面布局" class="headerlink" title="2.4 页面布局"></a>2.4 页面布局</h3><h4 id="2-4-1-新增-修改表单"><a href="#2-4-1-新增-修改表单" class="headerlink" title="2.4.1 新增&#x2F;修改表单"></a>2.4.1 新增&#x2F;修改表单</h4><p>普通的表单，采用中间对其的方案，也就是整个表单的 <code>label-width</code> 设置为一样的。</p><p>注意：一般的，新增修改使用弹窗的方式，展示表单。新增&#x2F;修改可以共用代码，具体可以参考 <code>common/system/va-config.vue</code></p><pre><code class="html">&lt;el-form        ref=&quot;dialogForm&quot;        v-loading=&quot;edit.loading&quot;        :model=&quot;edit.form&quot;        :rules=&quot;edit.formRules&quot;        label-width=&quot;150px&quot;        style=&quot;padding-right: 30px;&quot;      &gt;  ...&lt;/el-form&gt;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniuimage-20211227170528261.png" alt="image-20211227170528261"></p><h4 id="2-4-2-查询表单-表格"><a href="#2-4-2-查询表单-表格" class="headerlink" title="2.4.2 查询表单+表格"></a>2.4.2 查询表单+表格</h4><p>这种应该是最长间的需求方案了，可以参考 <code>/common/system/user.vue</code>，在写的时候注意以下几点：</p><ol><li><code>label-width</code> 不要设置，保证标签文字开头和表格对齐。</li><li><code>el-form</code> 使用 <code>:inline=&quot;true&quot;</code> 设置表单内容行内显示。</li><li>设置 <code>vxe-table</code> 的 <code>height</code> 属性，保证表格底部贴住网页底部，又不会有滚动条（表格内允许有滚动条）</li><li>按钮也放到表单中，不要单独一行。</li></ol><p>最终效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/picgo_qiniuimage-20211227174221673.png" alt="image-20211227174221673"></p>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[译]理解浏览器关键渲染路径</title>
      <link href="/2017/03/08/understanding-the-critical-rendering-path/"/>
      <url>/2017/03/08/understanding-the-critical-rendering-path/</url>
      
        <content type="html"><![CDATA[<p>当一个浏览器接收到从服务器发来的html页面，在渲染并呈现到屏幕上之前，有很多步骤要做。浏览器渲染页面需要做的一系列行为被称作“关键渲染路径（Critical Rendering Path 简称CRP）”。</p><p><code>CRP</code> 的知识对于如何提升网站性能是相当有用的。<code>CRP</code>有6个步骤：</p><ol><li>构建DOM树</li><li>构建CSSOM树</li><li>运行JavaScript</li><li>创建渲染树</li><li>生成布局</li><li>绘制页面<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FlJb4QEGB2Km-q9PYHMVe4ic37sz.png" alt="CRP的6个步骤"></li></ol><h2 id="构建DOM树"><a href="#构建DOM树" class="headerlink" title="构建DOM树"></a>构建DOM树</h2><p>DOM（Document Object Model）树是一个表示整个解析过的HTML页面的对象，从根节点<code>&lt;html&gt;</code>开始，会创建页面中的每个 元素&#x2F;文本 节点。嵌套在其他元素中的元素作为字节点，每个节点都包含了其所有的元素属性，例如： 一个<code>&lt;a&gt;</code>节点将有 <code>href</code> 属性与其关联。</p><p>举个例子</p><pre><code class="html">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Understanding the Critical Rendering Path&lt;/title&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&lt;/head&gt;  &lt;body&gt;    &lt;header&gt;      &lt;h1&gt;Understanding the Critical Rendering Path&lt;/h1&gt;  &lt;/header&gt;  &lt;main&gt;      &lt;h2&gt;Introduction&lt;/h2&gt;      &lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;  &lt;/main&gt;  &lt;footer&gt;      &lt;small&gt;Copyright 2017&lt;/small&gt;  &lt;/footer&gt;&lt;/body&gt;  &lt;/html&gt;  </code></pre><p>上面的 HTML 将会被解析成下面的DOM树<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fq6vahHSu_NZGyeWGuhZ8dFmBS0O.png" alt="DOM树"><br>HTML的优点在于它不必等待整个页面加载完成才呈现页面，可以解析一部分，显示一部分。但是像CSS、JavaScript等其他资源会阻止页面渲染。</p><h2 id="构建CSSOM树"><a href="#构建CSSOM树" class="headerlink" title="构建CSSOM树"></a>构建CSSOM树</h2><p>CSSOM（CSS Object Model） 是一个跟DOM相关的样式对象。它跟DOM的表示方法是相似的，但是不论显式声明还是隐式继承，每个节点都存在关联样式。</p><p>In the style.css file from the document mentioned above, we have the folowing styles<br>在上面提到的html页面的<code>style.css</code>中的样式如下</p><pre><code class="css">body &#123; font-size: 18px; &#125;header &#123; color: plum; &#125;  h1 &#123; font-size: 28px; &#125;main &#123; color: firebrick; &#125;  h2 &#123; font-size: 20px; &#125;footer &#123; display: none; &#125;  </code></pre><p>它会被构建成下面的CSSOM树<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FqMiZIUxvPBV4X-PnDFh6iGrdxy0.png" alt="CSSOM树"><br>CSS 被认为是 “渲染阻塞资源”，它意味着如果不首先完全解析资源，渲染树是无法构建的。CSS由于它的层叠继承的性质，不能像HTML一样解析一部分，显示一部分。定义在文档后面的样式会覆盖或改写之前定义的样式，因为在整个样式表都被解析之前，如果我们使用了在样式表中较早定义的样式，那错误的样式将被应用。这意味着CSS必须被全部解析之后，才能开始下一步。</p><p>如果CSS文件适用于当前设备的话，仅仅只是会阻塞渲染。<code>&lt;link rel=&quot;stylesheet&quot;&gt;</code>标签可以使用<code>media</code>属性，用来指定特定样式宽度的特定媒体查询。</p><p>举个例子，如果我们有一个包含媒体属性<code>orientation:landscape</code>的样式，我们使用纵向模式（portrait mode）查看页面，这个资源将不会阻塞渲染。</p><p>CSS 也会导致脚本阻塞。这是因为JavaScript文件必须等待CSSOM被构建后才能运行。</p><h2 id="运行JavaScript"><a href="#运行JavaScript" class="headerlink" title="运行JavaScript"></a>运行JavaScript</h2><p>JavaScript被认为是<code>解析阻塞资源</code>，这意味着HTML的解析会被JavaScript阻塞。</p><p>当解析器解析到 <code>&lt;script&gt;</code> 标签时，无论该资源是内部还是外链的都会停止解析，先去下载资源。这也是为什么，当页面内有引用JavaScript文件时，引用标签要放到可视元素之后了。</p><p>为避免JavaScript解析阻塞，它可以通过设定 async 属性来要求其异步加载。</p><pre><code class="JavaScript">&lt;script async src=&quot;script.js&quot;&gt;</code></pre><h2 id="创建渲染树"><a href="#创建渲染树" class="headerlink" title="创建渲染树"></a>创建渲染树</h2><p>渲染树是DOM和CSSOM的结合体，它代表最终会渲染在页面上的元素的结构对象。这意味着它只关注可见内容，对于被隐藏或者CSS属性 display:none 的属性，不会被包含在结构内。</p><p>使用上面例子的DOM和CSSOM，渲染树被创建如下：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FvhQ0k653cDvORFIiEbYxufNjZa4.png" alt="渲染树"></p><h2 id="生成布局"><a href="#生成布局" class="headerlink" title="生成布局"></a>生成布局</h2><p>布局决定了浏览器视窗的大小,它提供了上下文依赖的CSS样式，如百分比或窗口的单位。视窗尺寸通常通过 <code>&lt;head&gt;</code> 标签中的 <code>&lt;meta&gt;</code> 中的 viewport 设定来决定。如果不存在该标签，则通常默认为 980px</p><p>例如，最常用的 <code>meta veiwport</code> 的值将会被设置为和设备宽度相符：</p><pre><code class="HTML">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;  </code></pre><p>如果用户访问网页的设备宽度为1000px。然后整体视窗尺寸就会基于这个宽度值了，比如 50% 就是500px, 10vw 就是100px 等等。</p><h2 id="绘制页面"><a href="#绘制页面" class="headerlink" title="绘制页面"></a>绘制页面</h2><p>最后，在绘制页面步骤。页面上的所有可见内容都会被转换为像素并呈现在屏幕上。</p><p>具体的绘制时间跟DOM数以及应用的样式有关。有些样式会花费更多的执行时间，比如复杂的渐变背景图片所需要的计算时间远超过简单固定背景色。</p><h2 id="整合所有"><a href="#整合所有" class="headerlink" title="整合所有"></a>整合所有</h2><p>想要看到关键渲染路径的执行流程，可以使用DevTools，在Chrome中，它是根据时间轴展示的。</p><p>举个例子, 上面的页面加入<code>&lt;script&gt;</code>标签</p><pre><code class="html">&lt;html&gt;  &lt;head&gt;    &lt;title&gt;Understanding the Critical Rendering Path&lt;/title&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&lt;/head&gt;  &lt;body&gt;    &lt;header&gt;      &lt;h1&gt;Understanding the Critical Rendering Path&lt;/h1&gt;  &lt;/header&gt;  &lt;main&gt;      &lt;h2&gt;Introduction&lt;/h2&gt;      &lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;  &lt;/main&gt;  &lt;footer&gt;      &lt;small&gt;Copyright 2017&lt;/small&gt;  &lt;/footer&gt;  &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;  &lt;/html&gt;  </code></pre><p>可以看关于页面加载时的事件日志，以下是我们获得的：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fro6Rduywm-txP3EEtak-E5T826l.png" alt="时间轴"></p><ol><li><strong>Send Request</strong> - 发送到index.html的GET请求</li><li><strong>Parse HTML</strong> and <strong>Send Request</strong> - 开始解析HTML并构建DOM，然后发送 GET 请求style.css和main.js</li><li><strong>Parse Stylesheet</strong> - 根据 style.css 创建的CSSOM</li><li><strong>Evaluate Script</strong> - 执行 main.js</li><li><strong>Layout</strong> - 基于HTML的元视窗标签，生成布局</li><li><strong>Paint</strong> - 绘制网页<br>基于这些信息，我们可以知道如何优化关键渲染路径。</li></ol><p>原文： <a href="https://bitsofco.de/understanding-the-critical-rendering-path/">Understanding the Critical Rendering Path</a></p>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题3-hexo</title>
      <link href="/2017/03/07/3-hexo/"/>
      <url>/2017/03/07/3-hexo/</url>
      
        <content type="html"><![CDATA[<p>阮一峰曾言：喜欢写blog的人，会经历三个阶段</p><blockquote><p>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。<br>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。<br>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p></blockquote><p>有对搭建个人blog有兴趣的朋友，可以翻看我往期文章。</p><p>笔者从去年开始通过hexo写blog，使用了yilia主题，但是随着文章数量的上升，检索等操作就显得特别笨重。</p><p>在遍寻无果的情况下，就写下了<a href="https://github.com/yelog/hexo-theme-3-hexo">3-hexo</a>主题。Demo:<a href="http://yelog.org/">http://yelog.org</a></p><p>多图预警 ↓↓↓</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h3><p><strong>三段式设计:</strong><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fl2tl1Is5zx-D0DAt03bg0WkWXhO.png" alt="三段式设计"></p><h3 id="通过分类过滤"><a href="#通过分类过滤" class="headerlink" title="通过分类过滤"></a>通过分类过滤</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FmooXnOPeRPGBts5V5W7CV0AHuIo.gif" alt="分类过滤文章"></p><h3 id="通过标题关键字搜索"><a href="#通过标题关键字搜索" class="headerlink" title="通过标题关键字搜索"></a>通过标题关键字搜索</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FkF9lgTJoLdmNlYbTVokSNB3zdS4.gif" alt="文章标题关键字搜索"></p><h3 id="通过作者搜索"><a href="#通过作者搜索" class="headerlink" title="通过作者搜索"></a>通过作者搜索</h3><p><strong>若开启了多作者模式，则可以通过输入@，进行作者搜索，如下所示</strong><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FhbFRRPIDuz1pEKH-dr-RWDHVvXn.gif" alt="通过作者搜索"></p><h3 id="通过标签搜索"><a href="#通过标签搜索" class="headerlink" title="通过标签搜索"></a>通过标签搜索</h3><p><strong>输入#，就会出现标签提示</strong><br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FoJsDnsoLWKo7ECSzcLmzUX_uWgw.gif" alt="通过标签搜索"></p><h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FtDD77YX_xenS-AZQW56qrwrQc4D.gif" alt="测试一下评论"></p><h3 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FhlNgOF7ipEIVrrztFdRam3WRikw.gif" alt="打赏功能"></p><h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FhQLLqrRCr4yFGl9nDb_9oc4yME-.png" alt="文章置顶"></p><h3 id="返回头部"><a href="#返回头部" class="headerlink" title="返回头部"></a>返回头部</h3><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FjpVByJViwYEWHHMTeayiQ-FD_qG.gif" alt="返回头部"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><pre><code class="bash">$ git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</code></pre><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>1） 修改hexo根目录的<code>_config.yml</code>的两处，如下</p><pre><code class="xml">theme: 3-hexohighlight:  enable: false #关闭hexo渲染高亮，使用主题代码块高亮</code></pre><p>2） 在hexo 根目录source下添加<code>avatar.jpg</code>文件，作为头像</p><ol start="3"><li>安装字数统计(由于主题使用这个插件，必须安装，否则会报错)</li></ol><pre><code class="bash">$ $ npm i --save hexo-wordcount</code></pre><p><strong>注意：</strong> 如果没有安装会在 <code>hexo g</code> 的时候报错</p><h3 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h3><pre><code class="bash">$ cd themes/3-hexo$ git pull</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim命令速查表</title>
      <link href="/2017/03/06/Vim-command/"/>
      <url>/2017/03/06/Vim-command/</url>
      
        <content type="html"><![CDATA[<p>-<br>去年上半年开始全面使用linux进行开发和娱乐了，现在已经回不去windows了。</p><p>话归正传，在linux上一直使用vim，慢慢熟悉了它的命令，才终于领悟了什么是编辑器之神。</p><p>最近抽空整理了这份速查表，收获颇丰，并分享给大家。</p><h2 id="进入vim"><a href="#进入vim" class="headerlink" title="进入vim"></a>进入vim</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">vim filename</td><td align="left">打开或新建文件,并将光标置于第一行首</td></tr><tr><td align="left">vim +n filename</td><td align="left">打开文件，并将光标置于第n行首</td></tr><tr><td align="left">vim + filename</td><td align="left">打开文件，并将光标置于最后一行首</td></tr><tr><td align="left">vim +&#x2F;pattern filename</td><td align="left">打开文件，并将光标置于第一个与pattern匹配的串处</td></tr><tr><td align="left">vim -r filename</td><td align="left">在上次正用vim编辑时发生系统崩溃，恢复filename</td></tr><tr><td align="left">vim filename….filename</td><td align="left">打开多个文件，依次编辑</td></tr></tbody></table><h2 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">all</td><td align="left">列出所有选项设置情况</td></tr><tr><td align="left">term</td><td align="left">设置终端类型</td></tr><tr><td align="left">ignorance</td><td align="left">在搜索中忽略大小写</td></tr><tr><td align="left">list</td><td align="left">显示制表位(Ctrl+I)和行尾标志（$)</td></tr><tr><td align="left">number</td><td align="left">显示行号</td></tr><tr><td align="left">report</td><td align="left">显示由面向行的命令修改过的数目</td></tr><tr><td align="left">terse</td><td align="left">显示简短的警告信息</td></tr><tr><td align="left">warn</td><td align="left">在转到别的文件时若没保存当前文件则显示NO write信息</td></tr><tr><td align="left">nomagic</td><td align="left">允许在搜索模式中，使用前面不带“\”的特殊字符</td></tr><tr><td align="left">nowrapscan</td><td align="left">禁止vi在搜索到达文件两端时，又从另一端开始</td></tr><tr><td align="left">mesg</td><td align="left">允许vi显示其他用户用write写到自己终端上的信息</td></tr><tr><td align="left">:set number &#x2F; set nonumber</td><td align="left">显示&#x2F;不显示行号</td></tr><tr><td align="left">:set ruler &#x2F;set noruler</td><td align="left">显示&#x2F;不显示标尺</td></tr><tr><td align="left">:set hlsearch</td><td align="left">高亮显示查找到的单词</td></tr><tr><td align="left">:set nohlsearch</td><td align="left">关闭高亮显示</td></tr><tr><td align="left">:syntax on</td><td align="left">语法高亮</td></tr><tr><td align="left">:set nu</td><td align="left">显示行号</td></tr><tr><td align="left">:set ignorecase</td><td align="left">搜索时忽略大小写</td></tr><tr><td align="left">:set smartcase</td><td align="left">搜索时匹配大小写</td></tr><tr><td align="left">:set ruler</td><td align="left">显示光标位置坐标</td></tr><tr><td align="left">:set hlsearch</td><td align="left">搜索匹配全高亮</td></tr><tr><td align="left">:set tabstop&#x3D;8</td><td align="left">设置tab大小,8为最常用最普遍的设置</td></tr><tr><td align="left">:set softtabstop&#x3D;8</td><td align="left">4:4个空格,8:正常的制表符,12:一个制表符4个空格,16:两个制表符</td></tr><tr><td align="left">:set autoindent</td><td align="left">自动缩进</td></tr><tr><td align="left">:set cindent</td><td align="left">C语言格式里面的自动缩进</td></tr></tbody></table><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">k nk</td><td align="left">上 向上移动n行</td></tr><tr><td align="left">j nj</td><td align="left">下 向下移动n行</td></tr><tr><td align="left">h nh</td><td align="left">左 向左移动n行</td></tr><tr><td align="left">l nl</td><td align="left">右 向右移动n行</td></tr><tr><td align="left">Space</td><td align="left">光标右移一个字符</td></tr><tr><td align="left">Backspace</td><td align="left">光标左移一个字符</td></tr><tr><td align="left">Enter</td><td align="left">光标下移一行</td></tr><tr><td align="left">w&#x2F;W</td><td align="left">光标右移一个字至字首</td></tr><tr><td align="left">b&#x2F;B</td><td align="left">光标左移一个字至字首</td></tr><tr><td align="left">e或E</td><td align="left">光标右移一个字至字尾</td></tr><tr><td align="left">)</td><td align="left">光标移至句尾</td></tr><tr><td align="left">(</td><td align="left">光标移至句首</td></tr><tr><td align="left">}</td><td align="left">光标移至段落开头</td></tr><tr><td align="left">{</td><td align="left">光标移至段落结尾</td></tr><tr><td align="left">n$</td><td align="left">光标移至第n行尾</td></tr><tr><td align="left">H</td><td align="left">光标移至屏幕顶行</td></tr><tr><td align="left">M</td><td align="left">光标移至屏幕中间行</td></tr><tr><td align="left">L</td><td align="left">光标移至屏幕最后行</td></tr><tr><td align="left">0</td><td align="left">（注意是数字零）光标移至当前行首</td></tr><tr><td align="left">^</td><td align="left">移动光标到行首第一个非空字符上去</td></tr><tr><td align="left">$</td><td align="left">光标移至当前行尾</td></tr><tr><td align="left">gg</td><td align="left">移到第一行</td></tr><tr><td align="left">G</td><td align="left">移到最后一行</td></tr><tr><td align="left">f<a></td><td align="left">移动光标到当前行的字符a上</td></tr><tr><td align="left">F</td><td align="left">相反</td></tr><tr><td align="left">%</td><td align="left">移动到与制匹配的括号上去（），{}，[]，&lt;&gt;等</td></tr><tr><td align="left">nG</td><td align="left">移动到第n行上</td></tr><tr><td align="left">G</td><td align="left">到最后一行</td></tr></tbody></table><h2 id="屏幕滚动"><a href="#屏幕滚动" class="headerlink" title="屏幕滚动"></a>屏幕滚动</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Ctrl+e</td><td align="left">向文件首翻一行</td></tr><tr><td align="left">Ctrl+y</td><td align="left">向文件尾翻一行</td></tr><tr><td align="left">Ctrl+u</td><td align="left">向文件首翻半屏</td></tr><tr><td align="left">Ctrl+d</td><td align="left">向文件尾翻半屏</td></tr><tr><td align="left">Ctrl+f</td><td align="left">向文件尾翻一屏</td></tr><tr><td align="left">Ctrl+b</td><td align="left">向文件首翻一屏</td></tr><tr><td align="left">nz</td><td align="left">将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部</td></tr></tbody></table><h2 id="插入文本类"><a href="#插入文本类" class="headerlink" title="插入文本类"></a>插入文本类</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">在光标前</td></tr><tr><td align="left">I</td><td align="left">在当前行首</td></tr><tr><td align="left">a</td><td align="left">光标后</td></tr><tr><td align="left">A</td><td align="left">在当前行尾</td></tr><tr><td align="left">o</td><td align="left">在当前行之下新开一行</td></tr><tr><td align="left">O</td><td align="left">在当前行之上新开一行</td></tr><tr><td align="left">r</td><td align="left">替换当前字符</td></tr><tr><td align="left">R</td><td align="left">替换当前字符及其后的字符，直至按ESC键</td></tr><tr><td align="left">s</td><td align="left">从当前光标位置处开始，以输入的文本替代指定数目的字符</td></tr><tr><td align="left">S</td><td align="left">删除指定数目的行，并以所输入文本代替之</td></tr><tr><td align="left">ncw&#x2F;nCW</td><td align="left">修改指定数目的字</td></tr><tr><td align="left">nCC</td><td align="left">修改指定数目的行</td></tr></tbody></table><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">x&#x2F;X</td><td align="left">删除一个字符，x删除光标后的，而X删除光标前的</td></tr><tr><td align="left">dw</td><td align="left">删除一个单词(删除光标位置到下一个单词开始的位置)</td></tr><tr><td align="left">dnw</td><td align="left">删除n个单词</td></tr><tr><td align="left">dne</td><td align="left">也可，只是删除到单词尾</td></tr><tr><td align="left">do</td><td align="left">删至行首</td></tr><tr><td align="left">d$</td><td align="left">删至行尾</td></tr><tr><td align="left">dd</td><td align="left">删除一行</td></tr><tr><td align="left">ndd</td><td align="left">删除当前行及其后n-1行</td></tr><tr><td align="left">dnl</td><td align="left">向右删除n个字母</td></tr><tr><td align="left">dnh</td><td align="left">向左删除n个字母</td></tr><tr><td align="left">dnj</td><td align="left">向下删除n行,当前行+其上n行</td></tr><tr><td align="left">dnk</td><td align="left">向上删除n行,当期行+其下n行</td></tr><tr><td align="left">cnw[word]</td><td align="left">将n个word改变为word</td></tr><tr><td align="left">C$</td><td align="left">改变到行尾</td></tr><tr><td align="left">cc</td><td align="left">改变整行</td></tr><tr><td align="left">shift+j</td><td align="left">删除行尾的换行符，下一行接上来了</td></tr></tbody></table><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">p</td><td align="left">粘贴用x或d删除的文本</td></tr><tr><td align="left">ynw</td><td align="left">复制n个单词</td></tr><tr><td align="left">yy</td><td align="left">复制一行</td></tr><tr><td align="left">ynl</td><td align="left">复制n个字符</td></tr><tr><td align="left">y$</td><td align="left">复制当前光标至行尾处</td></tr><tr><td align="left">nyy</td><td align="left">拷贝n行</td></tr></tbody></table><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">u</td><td align="left">撤销前一次的操作</td></tr><tr><td align="left">shif+u(U)</td><td align="left">撤销对该行的所有操作</td></tr></tbody></table><h2 id="搜索及替换"><a href="#搜索及替换" class="headerlink" title="搜索及替换"></a>搜索及替换</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x2F;pattern</td><td align="left">从光标开始处向文件尾搜索pattern</td></tr><tr><td align="left">?pattern</td><td align="left">从光标开始处向文件首搜索pattern</td></tr><tr><td align="left">n</td><td align="left">在同一方向重复上一次搜索命令</td></tr><tr><td align="left">N</td><td align="left">在反方向上重复上一次搜索命令</td></tr><tr><td align="left">cw newword</td><td align="left">替换为newword</td></tr><tr><td align="left">n</td><td align="left">继续查找</td></tr><tr><td align="left">.</td><td align="left">执行替换</td></tr><tr><td align="left">:s&#x2F;p1&#x2F;p2&#x2F;g</td><td align="left">将当前行中所有p1均用p2替代,g表示执行 用c表示需要确认</td></tr><tr><td align="left">:n1,n2 s&#x2F;p1&#x2F;p2&#x2F;g</td><td align="left">将第n1至n2行中所有p1均用p2替代</td></tr><tr><td align="left">:g&#x2F;p1&#x2F;s&#x2F;&#x2F;p2&#x2F;g</td><td align="left">将文件中所有p1均用p2替换</td></tr><tr><td align="left">:1,$ s&#x2F;string1&#x2F;string2&#x2F;g</td><td align="left">在全文中将string1替换为string2</td></tr></tbody></table><h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">m[a-z]</td><td align="left">在文中做标记，标记号可为a-z的26个字母</td></tr><tr><td align="left">&#96;a</td><td align="left">移动到标记a处</td></tr></tbody></table><h2 id="visual模式"><a href="#visual模式" class="headerlink" title="visual模式"></a>visual模式</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">v</td><td align="left">进入visual 模式</td></tr><tr><td align="left">V</td><td align="left">进入行的visual 模式</td></tr><tr><td align="left">ctrl+v</td><td align="left">进如块操作模式用o和O改变选择的边的大小</td></tr><tr><td align="left">在所有行插入相同的内容如include&lt;</td><td align="left">将光标移到开始插入的位置，按CTRL+V进入VISUAL模式，选择好模块后按I（shift+i)，后插入要插入的文本，按[ESC]完成</td></tr></tbody></table><h2 id="行方式命令"><a href="#行方式命令" class="headerlink" title="行方式命令"></a>行方式命令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:n1,n2 co n3</td><td align="left">将n1行到n2行之间的内容拷贝到第n3行下</td></tr><tr><td align="left">:n1,n2 m n3</td><td align="left">将n1行到n2行之间的内容移至到第n3行下</td></tr><tr><td align="left">:n1,n2 d</td><td align="left">将n1行到n2行之间的内容删除</td></tr><tr><td align="left">:n1,n2 w!command</td><td align="left">将文件中n1行至n2行的内容作为command的输入并执行之<br>若不指定n1，n2，则表示将整个文件内容作为command的输入</td></tr></tbody></table><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">q[a-z]</td><td align="left">开始记录但前开始的操作为宏，名称可为【a-z】，然后用q终止录制宏</td></tr><tr><td align="left">reg</td><td align="left">显示当前定义的所有的宏，用@[a-z]来在当前光标处执行宏[a-z]</td></tr></tbody></table><h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:split</td><td align="left">分割一个窗口</td></tr><tr><td align="left">:split file.c</td><td align="left">为另一个文件file.c分隔窗口</td></tr><tr><td align="left">:nsplit file.c</td><td align="left">为另一个文件file.c分隔窗口，并指定其行数</td></tr><tr><td align="left">ctrl＋w</td><td align="left">在窗口中切换</td></tr><tr><td align="left">:close</td><td align="left">关闭当前窗口</td></tr></tbody></table><h2 id="文件及其他"><a href="#文件及其他" class="headerlink" title="文件及其他"></a>文件及其他</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:q</td><td align="left">退出vi</td></tr><tr><td align="left">:q!</td><td align="left">不保存文件并退出vi</td></tr><tr><td align="left">:e filename</td><td align="left">打开文件filename进行编辑</td></tr><tr><td align="left">:e!</td><td align="left">放弃修改文件内容，重新载入该文件编辑</td></tr><tr><td align="left">:w</td><td align="left">保存当前文件</td></tr><tr><td align="left">:wq</td><td align="left">存盘退出</td></tr><tr><td align="left">:ZZ</td><td align="left">保存当前文档并退出VIM</td></tr><tr><td align="left">:!command</td><td align="left">执行shell命令command</td></tr><tr><td align="left">:r!command</td><td align="left">将命令command的输出结果放到当前行</td></tr><tr><td align="left">:n1,n2 write temp.c</td><td align="left"></td></tr><tr><td align="left">:read file.c</td><td align="left">将文件file.c的内容插入到当前光标所在的下面</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在linux中搭建ftp服务</title>
      <link href="/2017/03/06/linux-ftp/"/>
      <url>/2017/03/06/linux-ftp/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-FTP"><a href="#什么是-FTP" class="headerlink" title="什么是 FTP"></a>什么是 FTP</h2><p><code>FTP</code> 是文件传输协议File Transfer Protocol的缩写。顾名思义，FTP用于计算机之间通过网络进行文件传输。你可以通过FTP在计算机账户间进行文件传输，也可以在账户和桌面计算机之间传输文件，或者访问在线软件归档。但是，需要注意的是多数的FTP站点的使用率非常高，可能需要多次重连才能连接上。</p><p>FTP地址和HTTP地址（即网页地址）非常相似，只是FTP地址使用 <code>ftp://前缀而不是http://</code></p><h2 id="FTP-服务器是什么"><a href="#FTP-服务器是什么" class="headerlink" title="FTP 服务器是什么"></a>FTP 服务器是什么</h2><p>通常，拥有FTP地址的计算机是专用于接收FTP连接请求的。一台专用于接收FTP连接请求的计算机即为FTP服务器或者FTP站点。</p><p>现在，我们来开始一个特别的冒险，我们将会搭建一个FTP服务用于和家人、朋友进行文件共享。在本教程，我们将以vsftpd作为ftp服务。</p><p>VSFTPD是一个自称为最安全的FTP服务端软件。事实上VSFTPD的前两个字母表示“非常安全的very secure”。该软件的构建绕开了FTP协议的漏洞。</p><p>尽管如此，你应该知道还有更安全的方法进行文件管理和传输，如：SFTP（使用OpenSSH）。FTP协议对于共享非敏感数据是非常有用和可靠的。</p><h2 id="安装-VSFTP"><a href="#安装-VSFTP" class="headerlink" title="安装 VSFTP"></a>安装 VSFTP</h2><pre><code class="bash">#使用 rpm 安装$ dnf -y install vsftpd#使用 deb 安装$ sudo apt-get install vsftpd#在 Arch 中安装$ sudo pacman -S vsftpd</code></pre><h2 id="配置-FTP-服务"><a href="#配置-FTP-服务" class="headerlink" title="配置 FTP 服务"></a>配置 FTP 服务</h2><p>多数的VSFTPD配置项都在&#x2F;etc&#x2F;vsftpd.conf配置文件中。这个文件本身已经有非常良好的文档说明了，因此，在本节中，我只强调一些你可能进行修改的重要选项。使用man页面查看所有可用的选项和基本的 文档说明：</p><pre><code class="bash">$ man vsftpd.conf</code></pre><p>根据文件系统层级标准，FTP共享文件默认位于&#x2F;srv&#x2F;ftp目录中。<br><strong>允许上传：</strong><br>为了允许ftp用户可以修改文件系统的内容，如上传文件等，“write_enable”标志必须设置为 YES</p><pre><code class="xml">write_enable=YES</code></pre><p><strong>允许本地（系统）用户登录：</strong><br>为了允许文件&#x2F;etc&#x2F;passwd中记录的用户可以登录ftp服务，“local_enable”标记必须设置为YES。</p><pre><code class="xml">local_enable=YES</code></pre><p><strong>匿名用户登录</strong><br>下面配置内容控制匿名用户是否允许登录：</p><pre><code class="xml"># 允许匿名用户登录anonymous_enable=YES# 匿名登录不需要密码（可选）no_anon_password=YES# 匿名登录的最大传输速率，Bytes/second（可选）anon_max_rate=30000# 匿名登录的目录（可选）anon_root=/example/directory/</code></pre><p><strong>根目录限制（Chroot Jail）</strong><br>（ LCTT 译注：chroot jail是类unix系统中的一种安全机制，用于修改进程运行的根目录环境，限制该线程不能感知到其根目录树以外的其他目录结构和文件的存在。详情参看<a href="https://zh.wikipedia.org/wiki/Chroot">chroot jail</a>）</p><p>有时我们需要设置根目录（chroot）环境来禁止用户离开他们的家（home）目录。在配置文件中增加&#x2F;修改下面配置开启根目录限制（Chroot Jail）:</p><pre><code class="xml">chroot_list_enable=YESchroot_list_file=/etc/vsftpd.chroot_list</code></pre><p>“chroot_list_file”变量指定根目录限制所包含的文件&#x2F;目录（ LCTT 译注：即用户只能访问这些文件&#x2F;目录）</p><p>最后你必须重启ftp服务，在命令行中输入以下命令：</p><pre><code class="bash">$ sudo systemctl restart vsftpd</code></pre><p>到此为止，你的ftp服务已经搭建完成并且启动了。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（57）: sftp</title>
      <link href="/2017/03/05/linux-command-57-sftp/"/>
      <url>/2017/03/05/linux-command-57-sftp/</url>
      
        <content type="html"><![CDATA[<p>sFTP（安全文件传输程序）是一种安全的交互式文件传输程序，其工作方式与 FTP（文件传输协议）类似。 然而，sFTP 比 FTP 更安全；它通过加密 SSH 传输处理所有操作。</p><p>它可以配置使用几个有用的 SSH 功能，如公钥认证和压缩。 它连接并登录到指定的远程机器，然后切换到交互式命令模式，在该模式下用户可以执行各种命令。</p><p>在本文中，我们将向你展示如何使用 sFTP 上传&#x2F;下载整个目录（包括其子目录和子文件）。</p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><p>默认情况下，SFTP 协议采用和 SSH 传输协议一样的方式建立到远程服务器的安全连接。虽然，用户验证使用类似于 SSH 默认设置的密码方式，但是，建议创建和使用 SSH 无密码登录，以简化和更安全地连接到远程主机。</p><p>要连接到远程 sftp 服务器，如下建立一个安全 SSH 连接并创建 SFTP 会话：</p><pre><code class="bash">$ sftp root@server</code></pre><p>登录到远程主机后，你可以如下运行交互式的 sFTP 命令：</p><pre><code class="bash">sftp&gt; ls            #列出服务器文件列表sftp&gt; lls           #列出本地文件列表sftp&gt; pwd           #当前服务器上路径sftp&gt; lpwd          #当前本地路径sftp&gt; cd img        #切换服务器路径sftp&gt; lcd img       #切换本地路径sftp&gt; mkdir img     #在服务器上创建一个目录sftp&gt; lmkdir img    #在本地创建一个目录</code></pre><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><pre><code class="bash">sftp&gt; put readme.md #上传单个文件sftp&gt; mput *.xls    #上传多个文件</code></pre><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><pre><code class="bash">sftp&gt; get readme.md #下载单个文件sftp&gt; mget *.xls    #下载多个文件</code></pre><h2 id="上传文件夹"><a href="#上传文件夹" class="headerlink" title="上传文件夹"></a>上传文件夹</h2><p>使用<code>put -r</code> .但是远程服务器要提前创建一个相同名称的目录; <code>-r</code> 递归复制子目录和子文件</p><pre><code class="bash">sftp&gt; mkdir imgsftp&gt; put -r img</code></pre><p>要保留修改时间、访问时间以及被传输的文件的模式，可使用 <code>-p</code> 。</p><pre><code class="bash">sftp&gt; put -pr img</code></pre><h2 id="下载文件夹"><a href="#下载文件夹" class="headerlink" title="下载文件夹"></a>下载文件夹</h2><pre><code class="bash">sftp&gt; get -r img</code></pre><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><pre><code class="bash">sftp&gt; bye或sftp&gt; exit或ctrl + d</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AngularJs快速入门</title>
      <link href="/2017/03/04/AngularJs/"/>
      <url>/2017/03/04/AngularJs/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> AngularJS是一个JavaScript框架，为了克服HTML在构建应用上的不足而设计的。<br> AngularJS通过使用我们称为标识符(directives)的结构，让浏览器能够识别新的语法。<br> AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>AngularJS 使用 表达式 把数据绑定到 HTML。</p><h3 id="表达式-1"><a href="#表达式-1" class="headerlink" title="表达式"></a>表达式</h3><p>AngularJS 表达式写在双大括号内：{{ expression }} 。<br>AngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。<br>AngularJS 将在表达式书写的位置”输出”数据。<br>AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。<br><strong>实例：</strong>  {{ 5 + 5 }}  或 {{ firstName + " " + lastName }}</p><pre><code class="HTML">&lt;div ng-app=&quot;&quot;&gt;     &lt;p&gt;我的第一个表达式: &#123;&#123; 5 + 5 &#125;&#125;&lt;/p&gt;&lt;/div&gt;</code></pre><p><strong>效果</strong></p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><pre><code class="HTML">&lt;div ng-app=&quot;&quot; ng-init=&quot;quantity=1;cost=5&quot;&gt;  &lt;p&gt;总价： &#123;&#123; quantity * cost &#125;&#125;&lt;/p&gt;&lt;/div&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AngularJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo多作者模式</title>
      <link href="/2017/02/28/3-hexo-multiple-author/"/>
      <url>/2017/02/28/3-hexo-multiple-author/</url>
      
        <content type="html"><![CDATA[<p>尽管hexo是为个人blog而生的工具，但是有时也可能会有多作者需求，比如他人投稿等等，为此笔者在写3-hexo主题时,顺便添加了此功能 。</p><h2 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h2><p>修改 <code>3-hexo/_config.yml</code>，开启多作者模式，并添加blog中出现的作者，为搜索提供数据</p><pre><code class="xml">author:  on: true #true：开启多作者模式  authors:    author1: yelog #添加两个作者yelog、小马哥    author2: 小马哥</code></pre><h2 id="2-修改文章头部信息"><a href="#2-修改文章头部信息" class="headerlink" title="2.修改文章头部信息"></a>2.修改文章头部信息</h2><h2 id="添加-author-yelog-，表示这篇文章的作者为yelog-xml"><a href="#添加-author-yelog-，表示这篇文章的作者为yelog-xml" class="headerlink" title="添加 author: yelog ，表示这篇文章的作者为yelog&#96;&#96;&#96;xml"></a>添加 <code>author: yelog</code> ，表示这篇文章的作者为yelog<br>&#96;&#96;&#96;xml</h2><h2 id="title-reading-listdate-2017-01-31-15-29-32author-yelogtop-2categories-读书tags-reading"><a href="#title-reading-listdate-2017-01-31-15-29-32author-yelogtop-2categories-读书tags-reading" class="headerlink" title="title: reading-listdate: 2017-01-31 15:29:32author: yelogtop: 2categories:- 读书tags:- reading"></a>title: reading-list<br>date: 2017-01-31 15:29:32<br>author: yelog<br>top: 2<br>categories:<br>- 读书<br>tags:<br>- reading</h2><pre><code>**效果：**![](https://cdn.jsdelivr.net/gh/yelog/assets/images/Fjq0M7pBzl6fsnC3ivpqMsdLdXc0.png)## 搜索某个作者的所有文章在搜索栏中输入`@小马哥`就可以显示出所有小马哥的文章。如果你在_config.xml中配置了作者名，就可以出现`提示`,具体看第一部分**效果如下：**![](https://cdn.jsdelivr.net/gh/yelog/assets/images/Fm2PK5W9Rd6ojYq055zZoWcbioAn.gif)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-hexo </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo创建404页面</title>
      <link href="/2017/02/25/hexo-create-404-page/"/>
      <url>/2017/02/25/hexo-create-404-page/</url>
      
        <content type="html"><![CDATA[<p>对于github page来说，只要在根目录又404.html，当页面找不到时，就会被转发到&#x2F;404.html页面，所以我们只要更改这个页面，就可以实现自定义404页面了。</p><p>但是我们通常会需要与本主题相符的404页面。那我们就需要以下操作</p><h3 id="新建404页面"><a href="#新建404页面" class="headerlink" title="新建404页面"></a>新建404页面</h3><ol><li>进入 Hexo 所在文件夹，输入 <code>hexo new page 404</code> ;</li><li>打开刚新建的页面文件，默认在 Hexo 文件夹根目录下 &#x2F;source&#x2F;404&#x2F;index.md；</li><li>在顶部插入一行，写上 <code>enlink: /404</code>，这表示指定该页固定链接为 <code>http://&quot;主页&quot;/404.html</code></li></ol><pre><code class="xml">---title: 404enlink: /404date: 2016-09-27 11:31:01------## 页面未找到！</code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><blockquote><p><a href="http://yelog.org/%E4%B8%BE%E4%B8%AA404%E4%BE%8B%E5%AD%90">http://yelog.org/举个404例子</a></p></blockquote><p> <img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FjSPGVPAu_7d0aMPqErpI1HN_985.png" alt="404"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo置顶及排序问题</title>
      <link href="/2017/02/24/hexo-top-sort/"/>
      <url>/2017/02/24/hexo-top-sort/</url>
      
        <content type="html"><![CDATA[<p>近期在写3-hexo主题时，发现文章（<code>site.posts</code>）排序按照.md文件的创建时间排序，而没有按照文章中的date排序。</p><p>这就导致了一个问题，我重装了一次电脑，.md文件通过git备份了，还原回来的时候，md的创建时间都是一样的，所以文章列表就按照文章标题排序了</p><p>随后就想起了以前使用yilia主题时，设置过置顶文章。所以做了排序，顺便做了置顶的功能。</p><blockquote><p><strong><a href="http://s.amlove.cn/">@牵猪的松鼠</a>根据这篇文章写了一个npm插件 <a href="https://www.npmjs.com/package/hexo-generator-topindex">hexo-generator-topindex</a><br>安装插件命令： <code>npm install hexo-generator-topindex --save</code><br>如果安装插件，可跳过第一部分 <a href="#%E4%BF%AE%E6%94%B9hexo%E7%9A%84js%E4%BB%A3%E7%A0%81">#修改hexo的js代码</a>，直接看第二部分 <a href="#%E8%AE%BE%E7%BD%AE%E7%BD%AE%E9%A1%B6">#设置置顶</a></strong></p></blockquote><h2 id="修改hexo的js代码"><a href="#修改hexo的js代码" class="headerlink" title="修改hexo的js代码"></a>修改hexo的js代码</h2><p>直接上操作，修改<code>node_modules/hexo-generator-index/lib/generator.js</code></p><pre><code class="javascript">&#39;use strict&#39;;var pagination = require(&#39;hexo-pagination&#39;);module.exports = function(locals)&#123;  var config = this.config;  var posts = locals.posts;    posts.data = posts.data.sort(function(a, b) &#123;        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排            else return b.top - a.top; // 否则按照top值降序排        &#125;        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）            return -1;        &#125;        else if(!a.top &amp;&amp; b.top) &#123;            return 1;        &#125;        else return b.date - a.date; // 都没定义按照文章日期降序排    &#125;);  var paginationDir = config.pagination_dir || &#39;page&#39;;  return pagination(&#39;&#39;, posts, &#123;    perPage: config.index_generator.per_page,    layout: [&#39;index&#39;, &#39;archive&#39;],    format: paginationDir + &#39;/%d/&#39;,    data: &#123;      __index: true    &#125;  &#125;);&#125;;</code></pre><h2 id="设置置顶"><a href="#设置置顶" class="headerlink" title="设置置顶"></a>设置置顶</h2><h2 id="给需要置顶的文章加入top参数，如下-xml"><a href="#给需要置顶的文章加入top参数，如下-xml" class="headerlink" title="给需要置顶的文章加入top参数，如下&#96;&#96;&#96;xml"></a>给需要置顶的文章加入top参数，如下<br>&#96;&#96;&#96;xml</h2><h2 id="title-每天一个linux命令date-2017-01-23-11-41-48top-1categories-运维tags-linux命令"><a href="#title-每天一个linux命令date-2017-01-23-11-41-48top-1categories-运维tags-linux命令" class="headerlink" title="title: 每天一个linux命令date: 2017-01-23 11:41:48top: 1categories:- 运维tags:- linux命令"></a>title: 每天一个linux命令<br>date: 2017-01-23 11:41:48<br>top: 1<br>categories:<br>- 运维<br>tags:<br>- linux命令</h2><pre><code>如果存在多个置顶文章，top后的参数越大，越靠前。## 2020-05-20 更新3-hexo 主题已经内置排序算法，无需上面下载插件或修改源码，可以直接使用，具体可看 &#123;% post_link 3-hexo-instruction %&#125; 中的排序相关内容## References　　Netcan 的 [解决Hexo置顶问题](http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[译]Java内存泄露介绍</title>
      <link href="/2017/02/21/the-introduction-of-memory-leak-what-why-and-how/"/>
      <url>/2017/02/21/the-introduction-of-memory-leak-what-why-and-how/</url>
      
        <content type="html"><![CDATA[<p>内存管理是Java最大的优势之一；你可以很简单的创建一个对象，内存的分配和释放则交给Java垃圾收集器处理；然而实际情况并非如此简单，因为在Java应用程序中会频繁的发生内存泄露。</p><p>这个教程将会说明内存泄露是什么？它为什么会发生？我们如何防止它？</p><h2 id="内存泄露是什么"><a href="#内存泄露是什么" class="headerlink" title="内存泄露是什么"></a>内存泄露是什么</h2><p>内存泄露的定义：对象不再被应用程序使用，但是由于它们还在被引用，垃圾收集器不能清除掉它们。</p><p>为了理解这个定义，我们需要理解对象在内存中的状态；下面的图表说明什么是未被使用和未被引用。</p><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FgwzTgT7v_YeTJ0Y_pWnoJXyfeHg.jpeg"></p><p>图表中，有被引用的对象和未被引用的对象；未被引用的对象将会被当做垃圾回收，而被引用的对象将不会被当做垃圾回收；未被引用的对象由于没有被其他对象引用，它当然也是不被使用的对象，然而，不被使用的对象不全是不被引用的，它们中的一些是被引用的！这就是内存泄露的来源。</p><h2 id="内存泄露为什么会发生"><a href="#内存泄露为什么会发生" class="headerlink" title="内存泄露为什么会发生"></a>内存泄露为什么会发生</h2><p>让我们来看一下下面这个例子，它说明了内存泄露为什么会发生。在下面这个列子中，对象A引用了对象B，A的生命周期（t1<del>t4）是比B（t2</del>t3）的长；当B不再被应用程序使用时，A仍然在引用它；在这种情况下，垃圾收集器不能从内存中移除B；如果A引用了很多类似B这样的对象，它们不能被回收，又消耗着内存空间的资源，这样很有可能造成内存不足的问题。</p><p>还有一种可能的事情，B又引用了一些对象，这些被B引用的对象也不能被回收，那所有这些不被使用的对象将消耗大量宝贵的内存空间。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fm3d2a94sdbY4mb5ua-_BjAusKbq.jpeg"></p><h2 id="如何防止内存泄露"><a href="#如何防止内存泄露" class="headerlink" title="如何防止内存泄露"></a>如何防止内存泄露</h2><p>下面有一些防止内存泄露的快速实践技巧</p><ol><li>注意集合类，如：HashMap、ArrayList等等，因为它们是在常见的地方发生内存泄露；当它们被<code>static</code>声明时，它们和应用程序的生命周期是一样长的。</li><li>注意事件监听和回调，当一个监听事件被注册，而这个类再也没有被使用时可能会发生内存泄露。</li><li>“如果一个类管理自己的内存，程序员应该被提醒内存泄漏了”，通常，一个对象的指向其他对象的成员变量需要被置为null。</li></ol><p>References：<br>[1] Program Creek :<a href="http://www.programcreek.com/2013/10/the-introduction-of-memory-leak-what-why-and-how/">The Introduction of Java Memory Leaks</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（56）: tailf</title>
      <link href="/2017/02/20/linux-command-56-tailf/"/>
      <url>/2017/02/20/linux-command-56-tailf/</url>
      
        <content type="html"><![CDATA[<p>　　tailf 一个实时监听文件或日志的强大的命令</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ tailf [option] file</code></pre><h3 id="命令描述"><a href="#命令描述" class="headerlink" title="命令描述"></a>命令描述</h3><p>　　tailf 将会打印出一个文件的最后10行,等待并持续输出此文件的增长，它和<code>tail -f</code>相似，不同之处是当文件没有增长时，是不访问此文件的；但这会有一个副作用：不会更新文件的访问时间。当没有发生日志活动时，文件系统的冲洗（flush）不会定期发生。<br>　　tailf 对于打印日志不频繁，而又在使用笔记本电脑时是非常有用的，这样用户就能降低磁盘转速从而增加笔记本续航。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-n,–lines&#x3D;N,-N</td><td align="left">输出最后N行,而不是默认的最后10行</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：展示一个文件的最后5行并监听文件的新行（新增加的内容）</strong></p><pre><code class="bash">$ tailf -n 5 myfile.txt$ tailf -5 myfile.txt$ tailf --lines=5 myfile.txt</code></pre><blockquote><p><code>注：</code>这是一个实时监听文件或日志的强大的命令</p></blockquote><p><strong><code>例二</code>：实时新增日志内容，并通过管道过滤出自己想要的内容</strong></p><pre><code class="bash"># 实时监听ip地址为24.10.160.10的访问日志$ tailf access.log | grep 24.10.160.10</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pjax用法</title>
      <link href="/2017/02/08/pjax/"/>
      <url>/2017/02/08/pjax/</url>
      
        <content type="html"><![CDATA[<p>最近在开发一款hexo主题3-hexo，其中使用了pjax大大提高了用户体验和加载速度，在此简单介绍一下pjax的用法<a href="https://github.com/defunkt/jquery-pjax">github链接</a></p><span id="more"></span><h2 id="pjax是什么"><a href="#pjax是什么" class="headerlink" title="pjax是什么"></a>pjax是什么</h2><blockquote><p>pjax是一款jQuery插件，使用了ajax和pushState的技术，在保留真正永久链接，网页标题和可用的返回功能的情况下，带来一种快速的浏览体验。 –官方介绍</p></blockquote><p><code>用人话说</code>，就是当跳转过去的网页和当前网页的一部分是一样的，这时可以通过pjax就会从响应页面中取出 <code>不同的那部分</code> （需指定），替换掉原来的内容。 如果在服务端判断处理，直接返回 <code>不同的那部分内容</code>，这样就可以减少带宽占用，提升加载速度。</p><p>这样做的优势：</p><ol><li>由于从服务器取回的数据量变少，加载速度将会提升。</li><li>并且采用异步刷新页面中的不一样的地方，用户体验也是满满的。</li><li>保留了浏览器回退的功能（解决了ajax的尴尬）</li></ol><p>好了，开始操作。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>第一步：引入jQuery和jQuery.pjax</p><pre><code class="html">&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery.pjax/1.9.6/jquery.pjax.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>第二步：将指定的a的链接，转为pjax风格</p><pre><code class="javascript">/*将#menu中的a的链接的页面，只取回class=pjax元素中的内容，替换掉当前页面class=pjax元素中的内容*/$(document).pjax(&#39;.#menu a&#39;, &#39;.pjax&#39;, &#123;fragment:&#39;.pjax&#39;, timeout:8000&#125;);</code></pre><p>第三步：如果需要在请求的过程中做一些自定义的事件，可以使用下面的方法</p><pre><code class="javascript">$(document).on(&#123;  &#39;pjax:click&#39;: function() &#123;    //点击链接时，需要触发的事件写到这里  &#125;,  &#39;pjax:start&#39;: function() &#123;    //当开始获取请求时，需要触发的事件写在这里  &#125;,  &#39;pjax:end&#39;: function() &#123;    //当请求完成后，需要触发的事件写在这里  &#125;&#125;);</code></pre><p>结束。</p><h2 id="详细文档"><a href="#详细文档" class="headerlink" title="详细文档"></a>详细文档</h2><p>翻译于官方</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre><code class="javascript">$(document).pjax(selector, [container], options)</code></pre><ol><li><code>selector</code> 触发点击事件的选择器，String类型</li><li><code>container</code> 一个选择器，为唯一的pjax容器</li><li><code>options</code> 一个可以包含下面这些选项的对象</li></ol><h3 id="pjax-options"><a href="#pjax-options" class="headerlink" title="pjax options"></a>pjax options</h3><table><thead><tr><th align="left">key</th><th align="left">default</th><th align="left">description</th></tr></thead><tbody><tr><td align="left"><code>timeout</code></td><td align="left">650</td><td align="left">ajax超时时间，单位毫秒，超时后将请求整个页面进行刷新</td></tr><tr><td align="left"><code>push</code></td><td align="left">true</td><td align="left">使用 pushState 添加一个浏览器历史导航条目</td></tr><tr><td align="left"><code>replace</code></td><td align="left">false</td><td align="left">替换URL，而不添加浏览器历史条目</td></tr><tr><td align="left"><code>maxCacheLength</code></td><td align="left">20</td><td align="left">历史内容 cache 的最大size</td></tr><tr><td align="left"><code>version</code></td><td align="left"></td><td align="left">string ： 当前pjax版本</td></tr><tr><td align="left"><code>scrollTo</code></td><td align="left">0</td><td align="left">垂直位置滚动，为了避免改变滚动条位置</td></tr><tr><td align="left"><code>type</code></td><td align="left">“GET”</td><td align="left">可以查看<a href="http://api.jquery.com/jQuery.ajax/">jQuery.ajax()</a></td></tr><tr><td align="left"><code>dataType</code></td><td align="left">“html”</td><td align="left">可以查看<a href="http://api.jquery.com/jQuery.ajax/">jQuery.ajax()</a></td></tr><tr><td align="left"><code>container</code></td><td align="left"></td><td align="left">css选择器，此元素内容将被替换</td></tr><tr><td align="left"><code>url</code></td><td align="left">link.href</td><td align="left">string: ajax 请求的URL</td></tr><tr><td align="left"><code>target</code></td><td align="left">link</td><td align="left">eventually the relatedTarget value for <a href="#Events">pjax events</a></td></tr><tr><td align="left"><code>fragment</code></td><td align="left"></td><td align="left">从ajax响应的页面中抽取的‘片段’</td></tr></tbody></table><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>除了<code>pjax:click</code>和<code>pjax:clicked</code>外的所有pjax事件从pjax容器中触发，是不需要点击链接的。<br><strong>所有事件的生命周期在通过pjax请求链接的过程中</strong></p><table><thead><tr><th align="left">event</th><th align="left">cancel</th><th align="left">arguments</th><th align="left">notes</th></tr></thead><tbody><tr><td align="left"><code>pjax:click</code></td><td align="left">✔︎</td><td align="left"><code>options</code></td><td align="left">在一个链接被激活（点击）时触发此事件，可以在此取消阻止pjax</td></tr><tr><td align="left"><code>pjax:beforeSend</code></td><td align="left">✔︎</td><td align="left"><code>xhr, options</code></td><td align="left">可以设置 XHR 头</td></tr><tr><td align="left"><code>pjax:start</code></td><td align="left"></td><td align="left"><code>xhr, options</code></td><td align="left"></td></tr><tr><td align="left"><code>pjax:send</code></td><td align="left"></td><td align="left"><code>xhr, options</code></td><td align="left"></td></tr><tr><td align="left"><code>pjax:clicked</code></td><td align="left"></td><td align="left"><code>options</code></td><td align="left">当链接被点击，并且已经开始pjax请求后触发</td></tr><tr><td align="left"><code>pjax:beforeReplace</code></td><td align="left"></td><td align="left"><code>contents, options</code></td><td align="left">从服务器已经加载到HTML内容，在替换HTML内容之前触发</td></tr><tr><td align="left"><code>pjax:success</code></td><td align="left"></td><td align="left"><code>data, status, xhr, options</code></td><td align="left">从服务器已经加载到HTML内容，在替换HTML内容之后触发</td></tr><tr><td align="left"><code>pjax:timeout</code></td><td align="left">✔︎</td><td align="left"><code>xhr, options</code></td><td align="left">页面将会在<code>options.timeout</code>之后直接发起请求刷新页面，除非取消pjax</td></tr><tr><td align="left"><code>pjax:error</code></td><td align="left">✔︎</td><td align="left">xhr, textStatus, error, options</td><td align="left">ajax 错误，将会请求刷新页面，除非取消pjax</td></tr><tr><td align="left"><code>pjax:complete</code></td><td align="left"></td><td align="left">xhr, textStatus, options</td><td align="left">不管结果是什么，在ajax后，都触发</td></tr><tr><td align="left"><code>pjax:end</code></td><td align="left"></td><td align="left"><code>xhr, options</code></td><td align="left"></td></tr></tbody></table><p><strong>生命周期在浏览器返回或前进时触发</strong></p><table><thead><tr><th align="left">event</th><th align="left">cancel</th><th align="left">arguments</th><th align="left">notes</th></tr></thead><tbody><tr><td align="left"><code>pjax:popstate</code></td><td align="left"></td><td align="left"></td><td align="left">事件方向(前进，后退)属性: “back”&#x2F;“forward”</td></tr><tr><td align="left"><code>pjax:start</code></td><td align="left"></td><td align="left"><code>null, options</code></td><td align="left">替换内容前</td></tr><tr><td align="left"><code>pjax:beforeReplace</code></td><td align="left"></td><td align="left"><code>contents, options</code></td><td align="left">从cache中读取内容后，替换html前</td></tr><tr><td align="left"><code>pjax:end</code></td><td align="left"></td><td align="left"><code>null, options</code></td><td align="left">替换内容后</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reading-list</title>
      <link href="/2017/01/31/reading-list/"/>
      <url>/2017/01/31/reading-list/</url>
      
        <content type="html"><![CDATA[<p>下面是一些我读过的书</p><span id="more"></span><p>★ ★ ★ ★ ☆ ☆ ☆ ：推荐指数，7星制。此乃余之私见，或显偏薄。</p><h2 id="文学小说"><a href="#文学小说" class="headerlink" title="文学小说"></a>文学小说</h2><ol><li><strong>《棋王 树王 孩子王》</strong> by 阿城  2015年9月  ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《达芬奇密码》</strong> by 丹.布朗   2015年9月 ★ ★ ★ ★ ★ ★ ☆</li><li><strong>《追风筝的人》</strong> by 卡勒德·胡赛尼  2016年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《霍乱时期的爱情》</strong> by 加西亚·马尔克斯  2016年8月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《查令十字街84号》</strong> by 海莲·汉芙  2016年9月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《围城》</strong> by 钱钟书  2017年1月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《一个陌生女人的来信》</strong> by 茨威格  2017年1月 ★ ★ ★ ★ ★ ★ ☆</li><li><strong>《一颗心的沦亡》</strong> by 茨威格  2017年1月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《情感的迷茫》</strong> by 茨威格  2017年1月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《一个女人一生中的二十四个小时》</strong> by 茨威格  2017年1月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《摆渡人》</strong> by 克莱尔·麦克福尔 2019年3月28 ★ ☆ ☆ ☆ ☆ ☆ ☆</li><li><strong>《悟空传》</strong> by 今何在  2016年8月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《岛上书店》</strong> by 加·泽文 2019年4月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《月亮与六便士》</strong> by 毛姆 2019年4月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《活着》</strong> by 余华 2019年5月★ ★ ★ ★ ★ ★ ☆</li><li><strong>《白夜行》</strong> by 东野圭吾 2019年12月 ★ ★ ★ ★ ★ ☆ ☆</li></ol><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><ol><li><strong>《不去会死》</strong> by 石田裕辅 2017年2月 ★ ★ ★ ☆ ☆ ☆ ☆</li></ol><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ol><li><strong>《秦迷·秦始皇的秘密》</strong> by 李开元  2016年3月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《鱼羊野史·第1卷》</strong> by 高晓松  2016年9月 ★ ★ ★ ★ ★ ☆ ☆</li></ol><h2 id="心理学"><a href="#心理学" class="headerlink" title="心理学"></a>心理学</h2><ol><li><strong>《天才在左，疯子在右》</strong> by 高铭  2016年3月 ★ ★ ★ ★ ★ ★ ☆</li></ol><h2 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h2><ol><li><strong>《历代经济变革得失》</strong> by 吴晓波 2017年2月 ★ ★ ★ ★ ★ ★ ☆</li></ol><h2 id="科幻"><a href="#科幻" class="headerlink" title="科幻"></a>科幻</h2><ol><li><strong>《球状闪电》</strong> by 刘慈欣  2016年3月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《三体·“地球往事”三部曲之一》</strong> by 刘慈欣  2016年4月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《流浪地球》</strong> by 刘慈欣 2019年3月 ★ ★ ★ ★ ☆ ☆ ☆</li></ol><h2 id="创业"><a href="#创业" class="headerlink" title="创业"></a>创业</h2><ol><li><strong>《从零到一》</strong> by 彼得·蒂尔 2015年6月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《创业维艰》</strong> by 本·霍洛维茨  2015年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《餐巾纸上的创业课》</strong> by 神田昌典  2016年6月 ★ ★ ★ ★ ☆ ☆ ☆</li></ol><h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><ol><li><strong>《如何高效学习》</strong> by 斯科特·扬  2017年1月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《DISCover自我探索》</strong> by 李海峰 2017年1月 ★ ★ ★ ★ ★ ★ ☆</li></ol><h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><ol><li><strong>《淘宝技术这十年》</strong> by 子柳  2015年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《写给大家看的设计书》</strong> by Robin Williams 2023年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《黑客与画家》</strong> by 保罗·格雷姆  2023年10月 ★ ★ ★ ★ ★ ☆ ☆</li></ol><h2 id="待读-在读"><a href="#待读-在读" class="headerlink" title="待读&#x2F;在读"></a>待读&#x2F;在读</h2><ol><li><strong>《基督山伯爵》</strong> by 大仲马</li><li><strong>《程序员修炼之道》</strong> by Andrew Hunt &amp; David Thomas</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
          <category> 书单 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令</title>
      <link href="/2017/01/23/linux-command/"/>
      <url>/2017/01/23/linux-command/</url>
      
        <content type="html"><![CDATA[<p>开始详细的系统的学习linux命令，坚持每天一个命令。</p><span id="more"></span><p>此系列最初参考<a href="http://www.cnblogs.com/peida/archive/2012/12/05/2803591.html">peida</a>的“ 每天一个linux命令”，之后根据自己的见闻逐渐添加整理。</p><h3 id="文件目录操作命令"><a href="#文件目录操作命令" class="headerlink" title="文件目录操作命令"></a>文件目录操作命令</h3><ol><li><a href="/2016/12/01/linux-command-1-ls/" title="每天一个linux命令（1）: ls">每天一个linux命令（1）: ls</a></li><li><a href="/2016/12/02/linux-command-2-cd/" title="每天一个linux命令（2）: cd">每天一个linux命令（2）: cd</a></li><li><a href="/2016/12/03/linux-command-3-pwd/" title="每天一个linux命令（3）: pwd">每天一个linux命令（3）: pwd</a></li><li><a href="/2016/12/04/linux-command-4-mkdir/" title="每天一个linux命令（4）: mkdir">每天一个linux命令（4）: mkdir</a></li><li><a href="/2016/12/05/linux-command-5-rm/" title="每天一个linux命令（5）: rm">每天一个linux命令（5）: rm</a></li><li><a href="/2016/12/06/linux-command-6-rmdir/" title="每天一个linux命令（6）: rmdir">每天一个linux命令（6）: rmdir</a></li><li><a href="/2016/12/07/linux-command-7-mv/" title="每天一个linux命令（7）: mv">每天一个linux命令（7）: mv</a></li><li><a href="/2016/12/08/linux-command-8-cp/" title="每天一个linux命令（8）: cp">每天一个linux命令（8）: cp</a></li><li><a href="/2016/12/09/linux-command-9-touch/" title="每天一个linux命令（9）: touch">每天一个linux命令（9）: touch</a></li><li><a href="/2016/12/10/linux-command-10-cat/" title="每天一个linux命令（10）: cat">每天一个linux命令（10）: cat</a></li><li><a href="/2016/12/11/linux-command-11-nl/" title="每天一个linux命令（11）: nl">每天一个linux命令（11）: nl</a></li><li><a href="/2016/12/12/linux-command-12-more/" title="每天一个linux命令（12）: more">每天一个linux命令（12）: more</a></li><li><a href="/2016/12/13/linux-command-13-less/" title="每天一个linux命令（13）: less">每天一个linux命令（13）: less</a></li><li><a href="/2016/12/14/linux-command-14-head/" title="每天一个linux命令（14）: head">每天一个linux命令（14）: head</a></li><li><a href="/2016/12/15/linux-command-15-tail/" title="每天一个linux命令（15）: tail">每天一个linux命令（15）: tail</a></li><li><a href="/2017/02/20/linux-command-56-tailf/" title="每天一个linux命令（56）: tailf">每天一个linux命令（56）: tailf</a></li></ol><h3 id="文件查找命令"><a href="#文件查找命令" class="headerlink" title="文件查找命令"></a>文件查找命令</h3><ol start="16"><li><a href="/2016/12/16/linux-command-16-which/" title="每天一个linux命令（16）: which">每天一个linux命令（16）: which</a></li><li><a href="/2016/12/17/linux-command-17-whereis/" title="每天一个linux命令（17）: whereis">每天一个linux命令（17）: whereis</a></li><li><a href="/2016/12/18/linux-command-18-locate/" title="每天一个linux命令（18）: locate">每天一个linux命令（18）: locate</a></li><li><a href="/2016/12/19/linux-command-19-find%E5%91%BD%E4%BB%A4%E6%A6%82%E8%A7%88/" title="每天一个linux命令（19）: find命令概览">每天一个linux命令（19）: find命令概览</a></li><li><a href="/2016/12/20/linux-command-20-find%E5%91%BD%E4%BB%A4%E4%B9%8Bexec/" title="每天一个linux命令（20）: find命令之exec">每天一个linux命令（20）: find命令之exec</a></li><li><a href="/2016/12/21/linux-command-21-find%E5%91%BD%E4%BB%A4%E4%B9%8Bxargs/" title="每天一个linux命令（21）: find命令之xargs">每天一个linux命令（21）: find命令之xargs</a></li><li><a href="/2016/12/22/linux-command-22-find%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/" title="每天一个linux命令（22）: find命令的参数详解">每天一个linux命令（22）: find命令的参数详解</a></li></ol><h3 id="文件打包上传和下载"><a href="#文件打包上传和下载" class="headerlink" title="文件打包上传和下载"></a>文件打包上传和下载</h3><ol start="23"><li><a href="/2016/12/23/linux-command-23-%E7%94%A8SecureCRT%E6%9D%A5%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/" title="每天一个linux命令（23）: 用SecureCRT来上传和下载文件">每天一个linux命令（23）: 用SecureCRT来上传和下载文件</a></li><li><a href="/2016/12/24/linux-command-24-tar/" title="每天一个linux命令（24）: tar">每天一个linux命令（24）: tar</a></li><li><a href="/2016/12/25/linux-command-25-gzip/" title="每天一个linux命令（25）: gzip">每天一个linux命令（25）: gzip</a></li></ol><h3 id="linux文件权限设置"><a href="#linux文件权限设置" class="headerlink" title="linux文件权限设置"></a>linux文件权限设置</h3><ol start="26"><li><a href="/2016/12/26/linux-command-26-chmod/" title="每天一个linux命令（26）: chmod">每天一个linux命令（26）: chmod</a></li><li><a href="/2016/12/27/linux-command-27-chgrp/" title="每天一个linux命令（27）: chgrp">每天一个linux命令（27）: chgrp</a></li><li><a href="/2016/12/28/linux-command-28-chown/" title="每天一个linux命令（28）: chown">每天一个linux命令（28）: chown</a></li><li><a href="/2016/12/29/linux-command-29-group/" title="每天一个linux命令（29）: &#x2F;etc&#x2F;group文件详解">每天一个linux命令（29）: &#x2F;etc&#x2F;group文件详解</a></li></ol><h3 id="磁盘存储相关"><a href="#磁盘存储相关" class="headerlink" title="磁盘存储相关"></a>磁盘存储相关</h3><ol start="30"><li><a href="/2016/12/30/linux-command-30-df/" title="每天一个linux命令（30）: df">每天一个linux命令（30）: df</a></li><li><a href="/2016/12/31/linux-command-31-du/" title="每天一个linux命令（31）: du">每天一个linux命令（31）: du</a></li></ol><h3 id="性能监控和优化命令"><a href="#性能监控和优化命令" class="headerlink" title="性能监控和优化命令"></a>性能监控和优化命令</h3><ol start="32"><li><a href="/2017/01/01/linux-command-32-top/" title="每天一个linux命令（32）: top">每天一个linux命令（32）: top</a></li><li><a href="/2017/01/02/linux-command-33-free/" title="每天一个linux命令（33）: free">每天一个linux命令（33）: free</a></li><li><a href="/2017/01/03/linux-command-34-vmstat/" title="每天一个linux命令（34）: vmstat">每天一个linux命令（34）: vmstat</a></li><li><a href="/2017/01/04/linux-command-35-iostat/" title="每天一个linux命令（35）: iostat">每天一个linux命令（35）: iostat</a></li><li><a href="/2017/01/05/linux-command-36-lsof/" title="每天一个linux命令（36）: lsof">每天一个linux命令（36）: lsof</a></li></ol><h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><ol start="37"><li><a href="/2017/01/06/linux-command-37-ifconfig/" title="每天一个linux命令（37）: ifconfig">每天一个linux命令（37）: ifconfig</a></li><li><a href="/2017/01/07/linux-command-38-route/" title="每天一个linux命令（38）: route">每天一个linux命令（38）: route</a></li><li><a href="/2017/01/08/linux-command-39-ping/" title="每天一个linux命令（39）: ping">每天一个linux命令（39）: ping</a></li><li><a href="/2017/01/09/linux-command-40-traceroute/" title="每天一个linux命令（40）: traceroute">每天一个linux命令（40）: traceroute</a></li><li><a href="/2017/01/10/linux-command-41-netstat/" title="每天一个linux命令（41）: netstat">每天一个linux命令（41）: netstat</a></li><li><a href="/2017/01/11/linux-command-42-ss/" title="每天一个linux命令（42）: ss">每天一个linux命令（42）: ss</a></li><li><a href="/2017/01/12/linux-command-43-telnet/" title="每天一个linux命令（43）: telnet">每天一个linux命令（43）: telnet</a></li><li><a href="/2017/01/12/linux-command-44-rcp/" title="每天一个linux命令（44）: rcp">每天一个linux命令（44）: rcp</a></li><li><a href="/2017/01/13/linux-command-45-scp/" title="每天一个linux命令（45）: scp">每天一个linux命令（45）: scp</a></li></ol><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ol start="46"><li><a href="/2017/01/14/linux-command-46-ln/" title="每天一个linux命令（46）: ln">每天一个linux命令（46）: ln</a></li><li><a href="/2017/01/15/linux-command-47-diff/" title="每天一个linux命令（47）: diff">每天一个linux命令（47）: diff</a></li><li><a href="/2017/01/16/linux-command-48-date/" title="每天一个linux命令（48）: date">每天一个linux命令（48）: date</a></li><li><a href="/2017/01/17/linux-command-49-cal/" title="每天一个linux命令（49）: cal">每天一个linux命令（49）: cal</a></li><li><a href="/2017/01/18/linux-command-50-grep/" title="每天一个linux命令（50）: grep">每天一个linux命令（50）: grep</a></li><li><a href="/2017/01/19/linux-command-51-wc/" title="每天一个linux命令（51）: wc">每天一个linux命令（51）: wc</a></li><li><a href="/2017/01/20/linux-command-52-ps/" title="每天一个linux命令（52）: ps">每天一个linux命令（52）: ps</a></li><li><a href="/2017/01/21/linux-command-53-watch/" title="每天一个linux命令（53）: watch">每天一个linux命令（53）: watch</a></li><li><a href="/2017/01/22/linux-command-54-at/" title="每天一个linux命令（54）: at">每天一个linux命令（54）: at</a></li><li><a href="/2017/01/23/linux-command-55-crontab/" title="每天一个linux命令（55）: crontab">每天一个linux命令（55）: crontab</a></li><li><a href="/2017/02/20/linux-command-56-tailf/" title="每天一个linux命令（56）: tailf">每天一个linux命令（56）: tailf</a></li><li><a href="/2017/03/05/linux-command-57-sftp/" title="每天一个linux命令（57）: sftp">每天一个linux命令（57）: sftp</a></li><li><a href="/2017/05/23/linux-command-57-sort/" title="每天一个linux命令（58）: sort">每天一个linux命令（58）: sort</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（55）: crontab</title>
      <link href="/2017/01/23/linux-command-55-crontab/"/>
      <url>/2017/01/23/linux-command-55-crontab/</url>
      
        <content type="html"><![CDATA[<p>　　前一天学习了 at 命令是针对仅运行一次的任务，循环运行的例行性计划任务，linux系统则是由 cron (crond) 这个系统服务来控制的。Linux 系统上面原本就有非常多的计划性工作，因此这个系统服务是默认启动的。另外, 由于使用者自己也可以设置计划任务，所以， Linux 系统也提供了使用者控制计划任务的命令 :crontab 命令。</p><span id="more"></span><h3 id="crond简介"><a href="#crond简介" class="headerlink" title="crond简介"></a>crond简介</h3><p>　　crond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p><p>　　Linux下的任务调度分为两类，系统任务调度和用户任务调度。</p><p>　　系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在&#x2F;etc目录下有一个crontab文件，这个就是系统任务调度的配置文件。</p><p>　　&#x2F;etc&#x2F;crontab文件包括下面几行：</p><pre><code class="bash"># /etc/crontab: system-wide crontab# Unlike any other crontab you don&#39;t have to run the `crontab&#39;# command to install the new version when you edit this file# and files in /etc/cron.d. These files also have username fields,# that none of the other crontabs do.SHELL=/bin/shPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin# m h dom mon dow usercommand17 ** * *root    cd / &amp;&amp; run-parts --report /etc/cron.hourly25 6* * *roottest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )47 6* * 7roottest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )52 61 * *roottest -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )</code></pre><p>　　前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。第六至九行表示的含义将在下个小节详细讲述。这里不在多说。</p><p>　　用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 &#x2F;var&#x2F;spool&#x2F;cron目录中。其文件名与用户名一致。</p><h3 id="使用者权限文件"><a href="#使用者权限文件" class="headerlink" title="使用者权限文件"></a>使用者权限文件</h3><p>文件：&#x2F;etc&#x2F;cron.deny<br>说明：该文件中所列用户不允许使用crontab命令</p><p>文件：&#x2F;etc&#x2F;cron.allow<br>说明：该文件中所列用户允许使用crontab命令</p><p>文件：&#x2F;var&#x2F;spool&#x2F;cron&#x2F;<br>说明：所有用户crontab文件存放的目录,以用户名命名</p><h3 id="crontab文件的含义"><a href="#crontab文件的含义" class="headerlink" title="crontab文件的含义"></a>crontab文件的含义</h3><p>　　用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：<br>minute   hour   day   month   week   command<br>其中：<br>　　minute： 表示分钟，可以是从0到59之间的任何整数。<br>　　hour：表示小时，可以是从0到23之间的任何整数。<br>　　day：表示日期，可以是从1到31之间的任何整数。<br>　　month：表示月份，可以是从1到12之间的任何整数。<br>　　week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。<br>　　command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</p><p><strong>在以上各个字段中，还可以使用以下特殊字符：</strong><br><code>星号（*）</code>：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。<br><code>逗号（,）</code>：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”<br><code>中杠（-）</code>：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”<br><code>正斜线（/）</code>：可以用正斜线指定时间的间隔频率，例如“0-23&#x2F;2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*&#x2F;10，如果用在minute字段，表示每十分钟执行一次。</p><h3 id="crond服务"><a href="#crond服务" class="headerlink" title="crond服务"></a>crond服务</h3><p>安装crontab：</p><pre><code class="bash">$ yum install crontabs</code></pre><p>服务操作说明：</p><pre><code class="bash">$ /sbin/service crond start //启动服务$ /sbin/service crond stop //关闭服务$ /sbin/service crond restart //重启服务$ /sbin/service crond reload //重新载入配置</code></pre><p>查看crontab服务状态：</p><pre><code class="bash">$ service crond status</code></pre><p>手动启动crontab服务：</p><pre><code class="bash">$ service crond start</code></pre><p>查看crontab服务是否已设置为开机启动，执行命令：</p><pre><code class="bash">$ ntsysv</code></pre><p>加入开机自动启动：</p><pre><code class="bash">$ chkconfig –level 35 crond on</code></pre><h2 id="contab-命令详解"><a href="#contab-命令详解" class="headerlink" title="contab 命令详解"></a>contab 命令详解</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ crontab [-u user] file$ crontab [-u user] [ -e | -l | -r ]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-u user</td><td align="left">用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行</td></tr><tr><td align="left">file</td><td align="left">file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</td></tr><tr><td align="left">-e</td><td align="left">编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件</td></tr><tr><td align="left">-l</td><td align="left">显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容</td></tr><tr><td align="left">-r</td><td align="left">从&#x2F;var&#x2F;spool&#x2F;cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件</td></tr><tr><td align="left">-i</td><td align="left">在删除用户的crontab文件时给确认提示</td></tr></tbody></table><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong><code>例一</code>：创建一个新的crontab文件</strong><br>在考虑向cron进程提交一个crontab文件之前，首先要做的一件事情就是设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑crontab文件。9 9 %的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$ HOME目录下的. profile文件，在其中加入这样一行：<br>EDITOR&#x3D;vi; export EDITOR<br>然后保存并退出。不妨创建一个名为<user> cron的文件，其中<user>是用户名，例如， davecron。在该文件中加入如下的内容。<br>         # (put your own initials here)echo the date to the console every<br>         # 15minutes between 6pm and 6am<br>         0,15,30,45 18-06 * * * &#x2F;bin&#x2F;echo ‘date’ &gt; &#x2F;dev&#x2F;console<br>    保存并退出。确信前面5个域用空格分隔。<br>在上面的例子中，系统将每隔1 5分钟向控制台输出一次当前时间。如果系统崩溃或挂起，从最后所显示的时间就可以一眼看出系统是什么时间停止工作的。在有些系统中，用tty1来表示控制台，可以根据实际情况对上面的例子进行相应的修改。为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为cron命令的参数：<br>        $ crontab davecron<br>现在该文件已经提交给cron进程，它将每隔1 5分钟运行一次。<br>同时，新创建文件的一个副本已经被放在&#x2F;var&#x2F;spool&#x2F;cron目录中，文件名就是用户名(即dave)。<br><strong><code>例二</code>：列出crontab文件</strong></p><pre><code class="bash">$ crontab -l</code></pre><blockquote><p><strong>说明：</strong><br>你将会看到和上面类似的内容。可以使用这种方法在$ H O M E目录中对crontab文件做一备份：<br>        $ crontab -l &gt; $HOME&#x2F;mycron<br>这样，一旦不小心误删了crontab文件，可以用上一节所讲述的方法迅速恢复。</p></blockquote><p><strong><code>例三</code>：编辑crontab文件</strong></p><pre><code class="bash">$ crontab -e</code></pre><blockquote><p><strong>说明：</strong><br>可以像使用v i编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， c r o n会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。<br>我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条：<br>       # DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month<br>        30 3 1,7,14,21,26 * * &#x2F;bin&#x2F;find -name “core’ -exec rm {} ;<br>现在保存并退出。最好在crontab文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的作业。<br>现在让我们使用前面讲过的crontab -l命令列出它的全部信息：<br>       $ crontab -l<br>       # (crondave installed on Tue May 4 13:07:43 1999)<br>       # DT:ech the date to the console every 30 minites<br>      0,15,30,45 18-06 * * * &#x2F;bin&#x2F;echo <code>date</code> &gt; &#x2F;dev&#x2F;tty1<br>       # DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month<br>       30 3 1,7,14,21,26 * * &#x2F;bin&#x2F;find -name “core’ -exec rm {} ;</p></blockquote><p><strong><code>例四</code>：删除crontab文件</strong></p><pre><code class="bash">$ crontab -r</code></pre><p><strong><code>例五</code>：恢复丢失的crontab文件</strong><br>如果不小心误删了crontab文件，假设你在自己的$ H O M E目录下还有一个备份，那么可以将其拷贝到&#x2F;var&#x2F;spool&#x2F;cron&#x2F;<username>，其中<username>是用户名。如果由于权限问题无法完成拷贝，可以用：<br>        $ crontab <filename><br>    其中，<filename>是你在$ H O M E目录中副本的文件名。<br>我建议你在自己的$ H O M E目录中保存一个该文件的副本。我就有过类似的经历，有数次误删了crontab文件（因为r键紧挨在e键的右边）。这就是为什么有些系统文档建议不要直接编辑crontab文件，而是编辑该文件的一个副本，然后重新提交新的文件。<br>有些crontab的变体有些怪异，所以在使用crontab命令时要格外小心。如果遗漏了任何选项，crontab可能会打开一个空文件，或者看起来像是个空文件。这时敲delete键退出，不要按<Ctrl-D>，否则你将丢失crontab文件。</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：每1分钟执行一次command</strong></p><pre><code class="bash">* * * * * command</code></pre><p><strong><code>例二</code>：每小时的第3和第15分钟执行</strong></p><pre><code class="bash">3,15 * * * * command</code></pre><p><strong><code>例三</code>：在上午8点到11点的第3和第15分钟执行</strong></p><pre><code class="bash">3,15 8-11 * * * command</code></pre><p><strong><code>例四</code>：每隔两天的上午8点到11点的第3和第15分钟执行</strong></p><pre><code class="bash">3,15 8-11 */2 * * command</code></pre><p><strong><code>例五</code>：每个星期一的上午8点到11点的第3和第15分钟执行</strong></p><pre><code class="bash">3,15 8-11 * * 1 command</code></pre><p><strong><code>例六</code>：每晚的21:30重启smb</strong></p><pre><code class="bash">30 21 * * * /etc/init.d/smb restart</code></pre><p><strong><code>例七</code>：每月1、10、22日的4 : 45重启smb</strong></p><pre><code class="bash">45 4 1,10,22 * * /etc/init.d/smb restart</code></pre><p><strong><code>例八</code>：每周六、周日的1 : 10重启smb</strong></p><pre><code class="bash">10 1 * * 6,0 /etc/init.d/smb restart</code></pre><p><strong><code>例九</code>：每天18 : 00至23 : 00之间每隔30分钟重启smb</strong></p><pre><code class="bash">0,30 18-23 * * * /etc/init.d/smb restart</code></pre><p><strong><code>例十</code>：每星期六的晚上11 : 00 pm重启smb</strong></p><pre><code class="bash">0 23 * * 6 /etc/init.d/smb restart</code></pre><p><strong><code>例十一</code>：每一小时重启smb</strong></p><pre><code class="bash">* */1 * * * /etc/init.d/smb restart</code></pre><p><strong><code>例十二</code>：晚上11点到早上7点之间，每隔一小时重启smb</strong></p><pre><code class="bash">* 23-7/1 * * * /etc/init.d/smb restart</code></pre><p><strong><code>例十三</code>：每月的4号与每周一到周三的11点重启smb</strong></p><pre><code class="bash">0 11 4 * mon-wed /etc/init.d/smb restart</code></pre><p><strong><code>例十四</code>：一月一号的4点重启smb</strong></p><pre><code class="bash">0 4 1 jan * /etc/init.d/smb restart</code></pre><p><strong><code>例十五</code>：每小时执行&#x2F;etc&#x2F;cron.hourly目录内的脚本</strong></p><pre><code class="bash">01   *   *   *   *     root run-parts /etc/cron.hourly</code></pre><blockquote><p><strong>说明：</strong><br>run-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="注意环境变量问题"><a href="#注意环境变量问题" class="headerlink" title="注意环境变量问题"></a>注意环境变量问题</h4><p>　　有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p><p>　　在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。</p><p>　　不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：<br>　　1）脚本中涉及文件路径时写全局路径；<br>　　2）脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p><pre><code class="bash">$ cat start_cbp.sh#!/bin/shsource /etc/profileexport RUN_CONF=/home/d139/conf/platform/cbp/cbp_jboss.conf/usr/local/jboss-4.0.5/bin/run.sh -c mev &amp;</code></pre><p>3）当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：</p><pre><code class="bash">0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</code></pre><h4 id="注意清理系统用户的邮件日志"><a href="#注意清理系统用户的邮件日志" class="headerlink" title="注意清理系统用户的邮件日志"></a>注意清理系统用户的邮件日志</h4><p>　　每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。<br>　　例如，可以在crontab文件中设置如下形式，忽略日志输出：</p><pre><code class="bash">0 */3 * * * /usr/local/apache2/apachectl restart &gt;/dev/null 2&gt;&amp;1</code></pre><p>“&#x2F;dev&#x2F;null 2&gt;&amp;1”表示先将标准输出重定向到&#x2F;dev&#x2F;null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了&#x2F;dev&#x2F;null，因此标准错误也会重定向到&#x2F;dev&#x2F;null，这样日志输出问题就解决了。</p><h4 id="系统级任务调度与用户级任务调度"><a href="#系统级任务调度与用户级任务调度" class="headerlink" title="系统级任务调度与用户级任务调度"></a>系统级任务调度与用户级任务调度</h4><p>　　系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过“crontab –uroot –e”来设置，也可以将调度任务直接写入&#x2F;etc&#x2F;crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到&#x2F;etc&#x2F;crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。</p><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><p>　　新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</p><p>　　当crontab突然失效时，可以尝试&#x2F;etc&#x2F;init.d&#x2F;crond restart解决问题。或者查看日志看某个job有没有执行&#x2F;报错tail -f &#x2F;var&#x2F;log&#x2F;cron。</p><p>　　千万别乱运行crontab -r。它从Crontab目录（&#x2F;var&#x2F;spool&#x2F;cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p><p>　　在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（54）: at</title>
      <link href="/2017/01/22/linux-command-54-at/"/>
      <url>/2017/01/22/linux-command-54-at/</url>
      
        <content type="html"><![CDATA[<p>　　在windows系统中，windows提供了计划任务这一功能，在控制面板 -&gt; 性能与维护 -&gt; 任务计划， 它的功能就是安排自动运行的任务。 通过’添加任务计划’的一步步引导，则可建立一个定时执行的任务。</p><span id="more"></span><p>　　在linux系统中你可能已经发现了为什么系统常常会自动的进行一些任务？这些任务到底是谁在支配他们工作的？在linux系统如果你想要让自己设计的备份程序可以自动在某个时间点开始在系统底下运行，而不需要手动来启动它，又该如何处置呢？ 这些例行的工作可能又分为一次性定时工作与循环定时工作，在系统内又是哪些服务在负责？ 还有，如果你想要每年在老婆的生日前一天就发出一封信件提醒自己不要忘记，linux系统下该怎么做呢？</p><p>　　今天我们主要学习一下一次性定时计划任务的at命令的用法！</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ at [参数] [时间]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　在一个指定的时间执行一个指定任务，只能执行一次，且需要开启atd进程（ps -ef | grep atd查看， 开启用&#x2F;etc&#x2F;init.d&#x2F;atd start or restart； 开机即启动则需要运行 chkconfig –level 2345 atd on）。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-m</td><td align="left">当指定的任务被完成之后，将给用户发送邮件，即使没有标准输出</td></tr><tr><td align="left">-I</td><td align="left">atq的别名</td></tr><tr><td align="left">-d</td><td align="left">atrm的别名</td></tr><tr><td align="left">-v</td><td align="left">显示任务将被执行的时间</td></tr><tr><td align="left">-c</td><td align="left">打印任务的内容到标准输出</td></tr><tr><td align="left">-V</td><td align="left">显示版本信息</td></tr><tr><td align="left">-q&lt;列队&gt;</td><td align="left">使用指定的列队</td></tr><tr><td align="left">-f&lt;文件&gt;</td><td align="left">从指定文件读入任务而不是从标准输入读入</td></tr><tr><td align="left">-t&lt;时间参数&gt;</td><td align="left">以时间参数的形式提交要运行的任务<br>at允许使用一套相当复杂的指定时间的方法。他能够接受在当天的hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。当然也能够使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4点）等比较模糊的 词语来指定时间。用户还能够采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。 也能够指定命令执行的具体日期，指定格式为month day（月 日）或mm&#x2F;dd&#x2F;yy（月&#x2F;日&#x2F;年）或dd.mm.yy（日.月.年）。指定的日期必须跟在指定时间的后面。 上面介绍的都是绝对计时法，其实还能够使用相对计时法，这对于安排不久就要执行的命令是很有好处的。指定格式为：now + count time-units ，now就是当前时间，time-units是时间单位，这里能够是minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count是时间的数量，究竟是几天，还是几小时，等等。 更有一种计时方法就是直接使用today（今天）、tomorrow（明天）来指定完成命令的时间。</td></tr><tr><td align="left">TIME</td><td align="left">时间格式，这里可以定义出什么时候要进行 at 这项任务的时间</td></tr><tr><td align="left">TIME的格式：</td><td align="left"></td></tr><tr><td align="left">HH:MM</td><td align="left"></td></tr><tr><td align="left">ex&gt; 04:00</td><td align="left"></td></tr><tr><td align="left">在今日的 HH:MM 时刻进行，若该时刻已超过，则明天的 HH:MM 进行此任务。</td><td align="left"></td></tr></tbody></table><p>HH:MM YYYY-MM-DD<br>ex&gt; 04:00 2009-03-17<br>强制规定在某年某月的某一天的特殊时刻进行该项任务</p><p>HH:MM[am|pm] [Month] [Date]<br>ex&gt; 04pm March 17<br>也是一样，强制在某年某月某日的某时刻进行该项任务</p><p>HH:MM[am|pm] + number [minutes|hours|days|weeks]<br>ex&gt; now + 5 minutes<br>ex&gt; 04pm + 3 days<br>就是说，在某个时间点再加几个时间后才进行该项任务。</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：三天后的下午 5 点锺执行 &#x2F;bin&#x2F;ls</strong></p><pre><code class="bash">$ at 5pm+3 daysat&gt; /bin/lsat&gt; &lt;EOT&gt; # 按一下Ctrl+d就会出现&lt;EOT&gt;结束符job 2 at Thu Feb  2 17:00:00 2017</code></pre><p><strong><code>例二</code>：明天17点钟，输出时间到指定文件内</strong></p><pre><code class="bash">$ at 17:20 tomorrowat&gt; date &gt;/root/2013.log   at&gt; &lt;EOT&gt;</code></pre><p><strong><code>例三</code>：计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务</strong></p><pre><code class="bash">$ atq2Thu Feb  2 17:00:00 2017 a faker</code></pre><p><strong><code>例四</code>：删除已经设置的任务</strong></p><pre><code class="bash"># 2 为atq查出来的最前面的任务id$ atrm 2</code></pre><p><strong><code>例五</code>：显示已经设置的任务内容</strong></p><pre><code class="bash">$ at -c 2#!/bin/sh# atrun uid=1000 gid=1000# mail faker 0umask 22此处省略n个字符/bin/ls</code></pre><h3 id="atd-的启动与-at-运行的方式"><a href="#atd-的启动与-at-运行的方式" class="headerlink" title="atd 的启动与 at 运行的方式"></a>atd 的启动与 at 运行的方式</h3><h4 id="atd-的启动"><a href="#atd-的启动" class="headerlink" title="atd 的启动"></a>atd 的启动</h4><p>　　要使用一次性计划任务时，我们的 Linux 系统上面必须要有负责这个计划任务的服务，那就是 atd 服务。 不过并非所有的 Linux distributions 都默认会把他打开的，所以，某些时刻我们需要手动将atd 服务激活才行。 激活的方法很简单，就是这样：<br><strong>命令：</strong></p><pre><code class="bash">$ /etc/init.d/atd start$ /etc/init.d/atd restart</code></pre><p><strong>配置一下启动时就启动这个服务，免得每次重新启动都得再来一次</strong></p><pre><code class="bash">$ chkconfig atd on</code></pre><h4 id="at-的运行方式"><a href="#at-的运行方式" class="headerlink" title="at 的运行方式"></a>at 的运行方式</h4><p>　　既然是计划任务，那么应该会有任务执行的方式，并且将这些任务排进行程表中。那么产生计划任务的方式是怎么进行的? 事实上，我们使用 at 这个命令来产生所要运行的计划任务，并将这个计划任务以文字档的方式写入 &#x2F;var&#x2F;spool&#x2F;at&#x2F; 目录内，该工作便能等待 atd 这个服务的取用与运行了。就这么简单。</p><p>　　不过，并不是所有的人都可以进行 at 计划任务。为什么? 因为系统安全的原因。很多主机被所谓的攻击破解后，最常发现的就是他们的系统当中多了很多的黑客程序， 这些程序非常可能运用一些计划任务来运行或搜集你的系统运行信息,并定时的发送给黑客。 所以，除非是你认可的帐号，否则先不要让他们使用 at 命令。那怎么达到使用 at 的可控呢?</p><p>　　我们可以利用 &#x2F;etc&#x2F;at.allow 与 &#x2F;etc&#x2F;at.deny 这两个文件来进行 at 的使用限制。加上这两个文件后， at 的工作情况是这样的：</p><p>　　先找寻 &#x2F;etc&#x2F;at.allow 这个文件，写在这个文件中的使用者才能使用 at ，没有在这个文件中的使用者则不能使用 at (即使没有写在 at.deny 当中);</p><p>　　如果 &#x2F;etc&#x2F;at.allow 不存在，就寻找 &#x2F;etc&#x2F;at.deny 这个文件，若写在这个 at.deny 的使用者则不能使用 at ，而没有在这个 at.deny 文件中的使用者，就可以使用 at 命令了。</p><p>　　如果两个文件都不存在，那么只有 root 可以使用 at 这个命令。</p><p>　　透过这个说明，我们知道 &#x2F;etc&#x2F;at.allow 是管理较为严格的方式，而 &#x2F;etc&#x2F;at.deny 则较为松散 (因为帐号没有在该文件中，就能够运行 at 了)。在一般的 distributions 当中，由于假设系统上的所有用户都是可信任的， 因此系统通常会保留一个空的 &#x2F;etc&#x2F;at.deny 文件，意思是允许所有人使用 at 命令的意思 (您可以自行检查一下该文件)。 不过，万一你不希望有某些使用者使用 at 的话，将那个使用者的帐号写入 &#x2F;etc&#x2F;at.deny 即可！ 一个帐号写一行。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（53）: watch</title>
      <link href="/2017/01/21/linux-command-53-watch/"/>
      <url>/2017/01/21/linux-command-53-watch/</url>
      
        <content type="html"><![CDATA[<p>　　watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果。你可以拿他来监测你想要的一切命令的结果变化，比如 tail 一个 log 文件，ls 监测某个文件的大小变化，看你的想象力了！</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ watch[参数][命令]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令&#x2F;定时执行命令</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-n或–interval</td><td align="left">watch缺省每2秒运行一下程序，可以用-n或-interval来指定间隔的时间</td></tr><tr><td align="left">-d或–differences</td><td align="left">watch 会高亮显示变化的区域</td></tr><tr><td align="left">-d&#x3D;cumulative</td><td align="left">会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来</td></tr><tr><td align="left">-t 或-no-title</td><td align="left">会关闭watch命令在顶部的时间间隔,命令，当前时间的输出</td></tr><tr><td align="left">-h, –help</td><td align="left">查看帮助文档</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：每隔一秒高亮显示网络链接数的变化情况</strong></p><pre><code class="bash">$ watch -n 1 -d netstat -ant</code></pre><blockquote><p><strong>说明：</strong><br>其它操作：<br>切换终端： Ctrl+x<br>退出watch：Ctrl+g (deepin系统没效果，只能使用Ctrl+c退出了)</p></blockquote><p><strong><code>例二</code>：每隔一秒高亮显示http链接数的变化情况</strong></p><pre><code class="bash"># 每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加&#39;&#39;将命令区域归整。$ watch -n 1 -d &#39;pstree|grep http&#39;</code></pre><p><strong><code>例三</code>：实时查看模拟攻击客户机建立起来的连接数</strong></p><pre><code class="bash">$ watch &#39;netstat -an | grep:21 | \ grep&lt;模拟攻击客户机的IP&gt;| wc -l&#39;</code></pre><p><strong><code>例四</code>：监测当前目录中 scf’ 的文件的变化</strong></p><pre><code class="bash">$ watch -d &#39;ls -l|grep scf&#39;</code></pre><p><strong><code>例五</code>：10秒一次输出系统的平均负载</strong></p><pre><code class="bash">$ watch -n 10 &#39;cat /proc/loadavg&#39;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（52）: ps</title>
      <link href="/2017/01/20/linux-command-52-ps/"/>
      <url>/2017/01/20/linux-command-52-ps/</url>
      
        <content type="html"><![CDATA[<p>　　Linux中的ps命令是Process Status的缩写。ps命令用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。</p><span id="more"></span><p>　　要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，而 ps 命令就是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。</p><!--more --><p>　　ps 为我们提供了进程的一次性的查看，它所提供的查看结果并不动态连续的；如果想对进程时间监控，应该用 top 工具。</p><p>　　kill 命令用于杀死进程。<br><strong>linux上进程有5种状态:</strong></p><ol><li>运行(正在运行或在运行队列中等待)</li><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li><li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</li></ol><p><strong>ps工具标识进程的5种状态码:</strong><br>D 不可中断 uninterruptible sleep (usually IO)<br>R 运行 runnable (on run queue)<br>S 中断 sleeping<br>T 停止 traced or stopped<br>Z 僵死 a defunct (”zombie”) process</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ ps [参数]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>用来现实当前进程的状态</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">显示所有进程</td></tr><tr><td align="left">-a</td><td align="left">显示同一终端下的所有程序</td></tr><tr><td align="left">-A</td><td align="left">显示所有进程</td></tr><tr><td align="left">c</td><td align="left">显示进程的真实名称</td></tr><tr><td align="left">-N</td><td align="left">反向选择</td></tr><tr><td align="left">-e</td><td align="left">等于“-A”</td></tr><tr><td align="left">e</td><td align="left">显示环境变量</td></tr><tr><td align="left">f</td><td align="left">显示程序间的关系</td></tr><tr><td align="left">-H</td><td align="left">显示树状结构</td></tr><tr><td align="left">r</td><td align="left">显示当前终端的进程</td></tr><tr><td align="left">T</td><td align="left">显示当前终端的所有程序</td></tr><tr><td align="left">u</td><td align="left">指定用户的所有进程</td></tr><tr><td align="left">-au</td><td align="left">显示较详细的资讯</td></tr><tr><td align="left">-aux</td><td align="left">显示所有包含其他使用者的行程</td></tr><tr><td align="left">-C&lt;命令&gt;</td><td align="left">列出指定命令的状况</td></tr><tr><td align="left">–lines&lt;行数&gt;</td><td align="left">每页显示的行数</td></tr><tr><td align="left">–width&lt;字符数&gt;</td><td align="left">每页显示的字符数</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本显示</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示所有进程信息</strong></p><pre><code class="bash">$ ps -A</code></pre><p><strong><code>例二</code>：显示指定用户的进程信息</strong></p><pre><code class="bash">$ ps -u faker</code></pre><p><strong><code>例三</code>：显示所有进程信息，连同命令行</strong></p><pre><code class="bash">$ ps -ef</code></pre><p><strong><code>例四</code>：ps 与grep 常用组合用法，查找特定进程</strong></p><pre><code class="bash">$ ps -ef|grep ssh</code></pre><p><strong><code>例五</code>：将目前属于您自己这次登入的 PID 与相关信息列示出来</strong></p><pre><code class="bash">$ ps -l</code></pre><blockquote><p><strong>说明：</strong><br>各相关信息的意义：<br>　　F 代表这个程序的旗标 (flag)， 4 代表使用者为 super user<br>　　S 代表这个程序的状态 (STAT)，关于各 STAT 的意义将在内文介绍<br>　　UID 程序被该 UID 所拥有<br>　　PID 就是这个程序的 ID ！<br>　　PPID 则是其上级父程序的ID<br>　　C CPU 使用的资源百分比<br>　　PRI 这个是 Priority (优先执行序) 的缩写，详细后面介绍<br>　　NI 这个是 Nice 值，在下一小节我们会持续介绍<br>　　ADDR 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 “-“<br>　　SZ 使用掉的内存大小<br>　　WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作<br>　　TTY 登入者的终端机位置<br>　　TIME 使用掉的 CPU 时间。<br>　　CMD 所下达的指令为何<br>　　在预设的情况下， ps 仅会列出与目前所在的 bash shell 有关的 PID 而已，所以， 当我使用 ps -l 的时候，只有三个 PID。</p></blockquote><p><strong><code>例六</code>：列出目前所有的正在内存当中的程序</strong></p><pre><code class="bash">$ ps aux</code></pre><blockquote><p><strong>说明：</strong><br>　　USER：该 process 属于那个使用者账号的<br>　　PID ：该 process 的号码<br>　　%CPU：该 process 使用掉的 CPU 资源百分比<br>　　%MEM：该 process 所占用的物理内存百分比<br>　　VSZ ：该 process 使用掉的虚拟内存量 (Kbytes)<br>　　RSS ：该 process 占用的固定的内存量 (Kbytes)<br>　　TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts&#x2F;0 等等的，则表示为由网络连接进主机的程序。<br>　　STAT：该程序目前的状态，主要的状态有<br>　　R ：该程序目前正在运作，或者是可被运作<br>　　S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。<br>　　T ：该程序目前正在侦测或者是停止了<br>　　Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态<br>　　START：该 process 被触发启动的时间<br>　　TIME ：该 process 实际使用 CPU 运作的时间<br>　　COMMAND：该程序的实际指令</p></blockquote><p><strong><code>例七</code>：列出类似程序树的程序显示</strong></p><pre><code class="bash">$ ps -axjf</code></pre><p><strong><code>例八</code>：找出与 cron 与 syslog 这两个服务有关的 PID 号码</strong></p><pre><code class="bash">$ ps aux | egrep &#39;(cron|syslog)&#39;</code></pre><p><strong><code>其他</code></strong></p><pre><code class="bash"># 可以用 | 管道和 more 连接起来分页查看$ ps -aux |more# 把所有进程显示出来，并输出到ps001.txt文件$ ps -aux &gt; ps001.txt# 输出指定的字段$ ps -o pid,ppid,pgrp,session,tpgid,comm</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（51）: wc</title>
      <link href="/2017/01/19/linux-command-51-wc/"/>
      <url>/2017/01/19/linux-command-51-wc/</url>
      
        <content type="html"><![CDATA[<p>　　Linux系统中的wc(Word Count)命令的功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ wc [选项]文件...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　统计指定文件中的字节数、字数、行数，并将统计结果显示输出。该命令统计指定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所指定文件的总统计数。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">统计字节数</td></tr><tr><td align="left">-l</td><td align="left">统计行数</td></tr><tr><td align="left">-m</td><td align="left">统计字符数。这个标志不能与 -c 标志一起使用</td></tr><tr><td align="left">-w</td><td align="left">统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串</td></tr><tr><td align="left">-L</td><td align="left">打印最长行的长度</td></tr><tr><td align="left">-help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查看文件的字节数、字数、行数</strong></p><pre><code class="bash">$ wc 1.txt 5    19   105   1.txt 行数 单词数 字节数 文件名</code></pre><p><strong><code>例二</code>：用wc命令怎么做到只打印统计数字不打印文件名</strong></p><pre><code class="bash">$ wc -l 1.txt5 1.txt # 5行$ cat 1.txt | wc -l5 # 值输出数字</code></pre><p><strong><code>例三</code>：用来统计当前目录下的文件和文件夹总数</strong></p><pre><code class="bash"># 数量中包含当前目录$ ls -l | wc -l10 # 7个文件 + 2个文件夹 + 1个当前目录</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（50）: grep</title>
      <link href="/2017/01/18/linux-command-50-grep/"/>
      <url>/2017/01/18/linux-command-50-grep/</url>
      
        <content type="html"><![CDATA[<p>　　Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p><span id="more"></span><p>　　grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>　　grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ grep [option] pattern file</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用于过滤&#x2F;搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a <br>–text</td><td align="left">不要忽略二进制的数据</td></tr><tr><td align="left">-A&lt;显示行数&gt;  <br>–after-context&#x3D;&lt;显示行数&gt;</td><td align="left">除了显示符合范本样式的那一列之外，并显示该行之后的内容</td></tr><tr><td align="left">-b <br>–byte-offset</td><td align="left">在显示符合样式的那一行之前，标示出该行第一个字符的编号</td></tr><tr><td align="left">-B&lt;显示行数&gt;  <br>–before-context&#x3D;&lt;显示行数&gt;</td><td align="left">除了显示符合样式的那一行之外，并显示该行之前的内容</td></tr><tr><td align="left">-c    <br>–count</td><td align="left">计算符合样式的列数</td></tr><tr><td align="left">-C&lt;显示行数&gt;    <br>–context&#x3D;&lt;显示行数&gt;或-&lt;显示行数&gt;</td><td align="left">显示上下文n行</td></tr><tr><td align="left">-d &lt;动作&gt;      <br>–directories&#x3D;&lt;动作&gt;</td><td align="left">当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作</td></tr><tr><td align="left">-e&lt;范本样式&gt;  <br>–regexp&#x3D;&lt;范本样式&gt;</td><td align="left">指定字符串做为查找文件内容的样式</td></tr><tr><td align="left">-E      <br>–extended-regexp</td><td align="left">将样式为延伸的普通表示法来使用</td></tr><tr><td align="left">-f&lt;规则文件&gt;  <br>–file&#x3D;&lt;规则文件&gt;</td><td align="left">指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式</td></tr><tr><td align="left">-F   <br>–fixed-regexp</td><td align="left">将样式视为固定字符串的列表</td></tr><tr><td align="left">-G   <br>–basic-regexp</td><td align="left">样式视为普通的表示法来使用</td></tr><tr><td align="left">-h   <br>–no-filename</td><td align="left">在显示符合样式的那一行之前，不标示该行所属的文件名称</td></tr><tr><td align="left">-H   <br>–with-filename</td><td align="left">在显示符合样式的那一行之前，表示该行所属的文件名称</td></tr><tr><td align="left">-i    <br>–ignore-case</td><td align="left">忽略字符的大小写</td></tr><tr><td align="left">-l    <br>–file-with-matches</td><td align="left">只列出匹配的文件名</td></tr><tr><td align="left">-L   <br>–files-without-match</td><td align="left">列出不匹配的文件名</td></tr><tr><td align="left">-n   <br>–line-number</td><td align="left">显示行号</td></tr><tr><td align="left">-q   <br>–quiet或–silent</td><td align="left">不显示任何信息</td></tr><tr><td align="left">-r   <br>–recursive</td><td align="left">递归查询， 此参数的效果和指定“-d recurse”参数相同</td></tr><tr><td align="left">-s   <br>–no-messages</td><td align="left">不显示错误信息</td></tr><tr><td align="left">-v   <br>–revert-match</td><td align="left">显示不包含匹配文本的所有行</td></tr><tr><td align="left">-V   <br>–version</td><td align="left">显示版本信息</td></tr><tr><td align="left">-w   <br>–word-regexp</td><td align="left">只显示全字符合的列</td></tr><tr><td align="left">-x    <br>–line-regexp</td><td align="left">只显示全列符合的列</td></tr><tr><td align="left">-y</td><td align="left">此参数的效果和指定“-i”参数相同</td></tr></tbody></table><h3 id="规则表达式"><a href="#规则表达式" class="headerlink" title="规则表达式"></a>规则表达式</h3><p><strong>grep的规则表达式</strong><br>　　<code>^</code>  #锚定行的开始 如：<code>&#39;^grep&#39;</code>匹配所有以grep开头的行。<br>　　<code>$</code>  #锚定行的结束 如：<code>&#39;grep$&#39;</code>匹配所有以grep结尾的行。<br>　　<code>.</code>  #匹配一个非换行符的字符 如：<code>&#39;gr.p&#39;</code>匹配gr后接一个任意字符，然后是p。<br>　　<code>*</code>  #匹配零个或多个先前字符 如：<code>&#39;*grep&#39;</code>匹配所有一个或多个空格后紧跟grep的行。<br>　　<code>.*</code>   #一起用代表任意字符。<br>　　<code>[]</code>   #匹配一个指定范围内的字符，如<code>&#39;[Gg]rep&#39;</code>匹配Grep和grep。<br>　　<code>[^]</code>  #匹配一个不在指定范围内的字符，如：<code>&#39;[^A-FH-Z]rep&#39;</code>匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。<br>　　<code>\(..\)</code>  #标记匹配字符，如<code>&#39;\(love\)&#39;</code>，love被标记为1。<br>　　<code>\&lt;</code>      #锚定单词的开始，如:<code>&#39;\&lt;grep&#39;</code>匹配包含以grep开头的单词的行。<br>　　<code>\&gt;</code>      #锚定单词的结束，如<code>&#39;grep\&gt;&#39;</code>匹配包含以grep结尾的单词的行。<br>　　<code>x\&#123;m\&#125;</code>  #重复字符x，m次，如：<code>&#39;o\&#123;5\&#125;&#39;</code>匹配包含5个o的行。<br>　　<code>x\&#123;m,\&#125;</code>  #重复字符x,至少m次，如：<code>&#39;o\&#123;5,\&#125;&#39;</code>匹配至少有5个o的行。<br>　　<code>x\&#123;m,n\&#125;</code>  #重复字符x，至少m次，不多于n次，如：<code>&#39;o\&#123;5,10\&#125;&#39;</code>匹配5–10个o的行。<br>　　<code>\w</code>    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：<code>&#39;G\w*p&#39;</code>匹配以G后跟零个或多个文字或数字字符，然后是p。<br>　　<code>\W</code>   #<code>\w</code>的反置形式，匹配一个或多个非单词字符，如点号句号等。<br>　　<code>\b</code>   #单词锁定符，如: <code>&#39;\bgrep\b&#39;</code>只匹配grep。<br><strong>POSIX字符</strong><br>　　为了在不同国家的字符编码中保持一至，POSIX(The Portable Operating System Interface)增加了特殊的字符类，如[:alnum:]是[A-Za-z0-9]的另一个写法。要把它们放到[]号内才能成为正则表达式，如<code>[A-Za-z0-9]</code>或<code>[[:alnum:]]</code>。在linux下的grep除fgrep外，都支持POSIX的字符类。<br>　　[:alnum:]    #文字数字字符<br>　　[:alpha:]    #文字字符<br>　　[:digit:]    #数字字符<br>　　[:graph:]    #非空字符（非空格、控制字符）<br>　　[:lower:]    #小写字符<br>　　[:cntrl:]    #控制字符<br>　　[:print:]    #非空字符（包括空格）<br>　　[:punct:]    #标点符号<br>　　[:space:]    #所有空白字符（新行，空格，制表符）<br>　　[:upper:]    #大写字符<br>　　[:xdigit:]   #十六进制数字（0-9，a-f，A-F）</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找指定进程</strong></p><pre><code class="bash">$ ps -ef|grep hexofaker    13401 19030  0 09:51 pts/2    00:00:15 hexofaker    15465 15449  0 10:34 pts/3    00:00:00 grep hexo</code></pre><blockquote><p><strong>说明：</strong><br>第一条记录是查找出的进程；第二条结果是grep进程本身，并非真正要找的进程。</p></blockquote><p><strong><code>例二</code>：查找指定进程数</strong></p><pre><code class="bash">$ ps -ef|grep hexo -c$ ps -ef|grep -c hexo2</code></pre><p><strong><code>例三</code>：从2.txt中读取关键词在1.txt中进行搜索</strong></p><pre><code class="bash"># -n显示行号$ cat 1.txt | grep -nf 2.txt1:If you please draw me a sheep!2:What!</code></pre><p><strong><code>例四</code>：从文件中查找关键词</strong></p><pre><code class="bash">$ grep &#39;jump&#39; 1.txtI jumped to my feet,completely thunderstruck.</code></pre><p><strong><code>例五</code>：从多个文件中查找关键词</strong></p><pre><code class="bash">$ grep &#39;jump&#39; 1.txt 2.txt1.txt:I jumped to my feet,completely thunderstruck.2.txt:I jump</code></pre><blockquote><p><strong>说明：</strong><br>多文件时，输出查询到的信息内容行时，会把文件的命名在行最前面输出并且加上”:”作为标示符</p></blockquote><p><strong><code>例六</code>：grep不显示本身进程</strong></p><pre><code class="bash">$ ps aux|grep \[s]sh$ ps aux | grep ssh | grep -v &quot;grep&quot;</code></pre><p><strong><code>例七</code>：找出以u开头的行内容</strong></p><pre><code class="bash">$ cat 1.txt |grep ^uIf you please draw me a sheep!I jumped to my feet,completely thunderstruck.</code></pre><p><strong><code>例八</code>：输出非u开头的行内容</strong></p><pre><code class="bash">$ cat 1.txt | grep ^[^I]What!Draw me a sheep!</code></pre><p><strong><code>例九</code>：输出以!结尾的行内容</strong></p><pre><code class="bash">$ cat 1.txt |grep \!$If you please draw me a sheep!What!Draw me a sheep!</code></pre><p><strong><code>例十</code>：显示包含sh或者at字符的内容行</strong></p><pre><code class="bash">$ cat 1.txt |grep -E &quot;sh|at&quot;If you please draw me a sheep!What!Draw me a sheep!</code></pre><p><strong><code>例十一</code>：显示当前目录下面以.txt 结尾的文件中的所有包含每个字符串至少有7个连续小写字符的字符串的行</strong></p><pre><code class="bash">$ grep &#39;[a-z]\&#123;7\&#125;&#39; *.txt1.txt:I jumped to my feet,completely thunderstruck.3.txt:kdfkksjdf1121234.txt:kisdfsf</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（49）: cal</title>
      <link href="/2017/01/17/linux-command-49-cal/"/>
      <url>/2017/01/17/linux-command-49-cal/</url>
      
        <content type="html"><![CDATA[<p>　　cal命令可以用来显示公历（阳历）日历。公历是现在国际通用的历法，又称格列历，通称阳历。“阳历”又名“太阳历”，系以地球绕行太阳一周为一年，为西方各国所通用，故又名“西历”。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ cal [参数][月份][年份]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>用于查看日历等时间信息，如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-1</td><td align="left">显示一个月的月历</td></tr><tr><td align="left">-3</td><td align="left">显示系统前一个月，当前月，下一个月的月历</td></tr><tr><td align="left">-s</td><td align="left">显示星期天为一个星期的第一天，默认的格式</td></tr><tr><td align="left">-m</td><td align="left">显示星期一为一个星期的第一天</td></tr><tr><td align="left">-j</td><td align="left">显示在当年中的第几天（一年日期按天算，从1月1号算起，默认显示当前月在一年中的天数）</td></tr><tr><td align="left">-y</td><td align="left">显示当前年份的日历</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示当前月份日历</strong></p><pre><code class="bash">$ cal</code></pre><p><img src="http://oncj6b2vl.bkt.clouddn.com/Fo959HUHU7DyFEaargV5_4n6nsNi.png" alt="日历"><br><strong><code>例二</code>：显示指定月份的日历</strong></p><pre><code class="bash">$ cal 6 2016</code></pre><p><img src="http://oncj6b2vl.bkt.clouddn.com/Fhjcoswylnxplt5CjFHlfb55va4M.png" alt="2016年6月"><br><strong><code>例三</code>：显示2016年的日历</strong></p><pre><code class="bash">$ cal -y 2016$ cal 2016</code></pre><p><img src="http://oncj6b2vl.bkt.clouddn.com/Fnloz8dl1VKyVgn32hjCM0lPGkJI.png" alt="2016年日历"><br><strong><code>例四</code>：显示自1月1日的天数</strong></p><pre><code class="bash">$ cal -j</code></pre><p><img src="http://oncj6b2vl.bkt.clouddn.com/FsQNZEvW5UEJHd3IV2sF19OlOjvs.png" alt="本年的第几天"></p><p><strong><code>例五</code>：星期一显示在第一列</strong></p><pre><code class="bash">$ cal -m</code></pre><p><img src="http://oncj6b2vl.bkt.clouddn.com/Ft9YOB5-L4fauP9TWqQLCpAOYwlY.png" alt="本机deepin不支持这个参数，登陆到服务器截了一张图=="></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（48）: date</title>
      <link href="/2017/01/16/linux-command-48-date/"/>
      <url>/2017/01/16/linux-command-48-date/</url>
      
        <content type="html"><![CDATA[<p>　　在linux环境中，不管是编程还是其他维护，时间是必不可少的，也经常会用到时间的运算，熟练运用date命令来表示自己想要表示的时间，肯定可以给自己的工作带来诸多方便。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ date [参数]... [+格式]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　date 可以用来显示或设定系统的日期与时间。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>命令参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%H</td><td align="left">小时(以00-23来表示)</td></tr><tr><td align="left">%I</td><td align="left">小时(以01-12来表示)</td></tr><tr><td align="left">%K</td><td align="left">小时(以0-23来表示)</td></tr><tr><td align="left">%l</td><td align="left">小时(以0-12来表示)</td></tr><tr><td align="left">%M</td><td align="left">分钟(以00-59来表示)</td></tr><tr><td align="left">%P</td><td align="left">AM或PM</td></tr><tr><td align="left">%r</td><td align="left">时间(含时分秒，小时以12小时AM&#x2F;PM来表示)</td></tr><tr><td align="left">%s</td><td align="left">总秒数。起算时间为1970-01-01 00:00:00 UTC</td></tr><tr><td align="left">%S</td><td align="left">秒(以本地的惯用法来表示)</td></tr><tr><td align="left">%T</td><td align="left">时间(含时分秒，小时以24小时制来表示)</td></tr><tr><td align="left">%X</td><td align="left">时间(以本地的惯用法来表示)</td></tr><tr><td align="left">%Z</td><td align="left">市区</td></tr><tr><td align="left">%a</td><td align="left">星期的缩写</td></tr><tr><td align="left">%A</td><td align="left">星期的完整名称</td></tr><tr><td align="left">%b</td><td align="left">月份英文名的缩写</td></tr><tr><td align="left">%B</td><td align="left">月份的完整英文名称</td></tr><tr><td align="left">%c</td><td align="left">日期与时间。只输入date指令也会显示同样的结果</td></tr><tr><td align="left">%d</td><td align="left">日期(以01-31来表示)</td></tr><tr><td align="left">%D</td><td align="left">日期(含年月日)</td></tr><tr><td align="left">%j</td><td align="left">该年中的第几天</td></tr><tr><td align="left">%m</td><td align="left">月份(以01-12来表示)</td></tr><tr><td align="left">%U</td><td align="left">该年中的周数</td></tr><tr><td align="left">%w</td><td align="left">该周的天数，0代表周日，1代表周一，异词类推</td></tr><tr><td align="left">%x</td><td align="left">日期(以本地的惯用法来表示)</td></tr><tr><td align="left">%y</td><td align="left">年份(以00-99来表示)</td></tr><tr><td align="left">%Y</td><td align="left">年份(以四位数来表示)</td></tr><tr><td align="left">%n</td><td align="left">在显示时，插入新的一行</td></tr><tr><td align="left">%t</td><td align="left">在显示时，插入tab</td></tr><tr><td align="left">MM</td><td align="left">月份(必要)</td></tr><tr><td align="left">DD</td><td align="left">日期(必要)</td></tr><tr><td align="left">hh</td><td align="left">小时(必要)</td></tr><tr><td align="left">mm</td><td align="left">分钟(必要)</td></tr><tr><td align="left">ss</td><td align="left">秒(选择性)</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d&lt;字符串&gt;</td><td align="left">显示字符串所指的日期与时间。字符串前后必须加上双引号</td></tr><tr><td align="left">-s&lt;字符串&gt;</td><td align="left">根据字符串来设置日期与时间。字符串前后必须加上双引号</td></tr><tr><td align="left">-u</td><td align="left">显示GMT</td></tr><tr><td align="left">–help</td><td align="left">在线帮助</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p><strong>1.在显示方面，使用者可以设定欲显示的格式，格式设定为一个加号后接数个标记，其中可用的标记列表如下: % :  打印出 %</strong><br>%n : 下一行<br>%t : 跳格<br>%H : 小时(00..23)<br>%I : 小时(01..12)<br>%k : 小时(0..23)<br>%l : 小时(1..12)<br>%M : 分钟(00..59)<br>%p : 显示本地 AM 或 PM<br>%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)<br>%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数<br>%S : 秒(00..61)<br>%T : 直接显示时间 (24 小时制)<br>%X : 相当于 %H:%M:%S<br>%Z : 显示时区 %a : 星期几 (Sun..Sat)<br>%A : 星期几 (Sunday..Saturday)<br>%b : 月份 (Jan..Dec)<br>%B : 月份 (January..December)<br>%c : 直接显示日期与时间<br>%d : 日 (01..31)<br>%D : 直接显示日期 (mm&#x2F;dd&#x2F;yy)<br>%h : 同 %b<br>%j : 一年中的第几天 (001..366)<br>%m : 月份 (01..12)<br>%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)<br>%w : 一周中的第几天 (0..6)<br>%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)<br>%x : 直接显示日期 (mm&#x2F;dd&#x2F;yy)<br>%y : 年份的最后两位数字 (00.99)<br>%Y : 完整年份 (0000..9999)<br><strong>2.在设定时间方面</strong><br>date -s &#x2F;&#x2F;设置当前时间，只有root权限才能设置，其他只能查看。<br>date -s 20080523 &#x2F;&#x2F;设置成20080523，这样会把具体时间设置成空00:00:00<br>date -s 01:01:01 &#x2F;&#x2F;设置具体时间，不会对日期做更改<br>date -s “01:01:01 2008-05-23″ &#x2F;&#x2F;这样可以设置全部时间<br>date -s “01:01:01 20080523″ &#x2F;&#x2F;这样可以设置全部时间<br>date -s “2008-05-23 01:01:01″ &#x2F;&#x2F;这样可以设置全部时间<br>date -s “20080523 01:01:01″ &#x2F;&#x2F;这样可以设置全部时间<br><strong>3.加减</strong><br>date +%Y%m%d         &#x2F;&#x2F;显示前天年月日<br>date +%Y%m%d –date&#x3D;”+1 day”  &#x2F;&#x2F;显示前一天的日期<br>date +%Y%m%d –date&#x3D;”-1 day”  &#x2F;&#x2F;显示后一天的日期<br>date +%Y%m%d –date&#x3D;”-1 month”  &#x2F;&#x2F;显示上一月的日期<br>date +%Y%m%d –date&#x3D;”+1 month”  &#x2F;&#x2F;显示下一月的日期<br>date +%Y%m%d –date&#x3D;”-1 year”  &#x2F;&#x2F;显示前一年的日期<br>date +%Y%m%d –date&#x3D;”+1 year”  &#x2F;&#x2F;显示下一年的日期</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示当前时间</strong></p><pre><code class="bash">$ date2017年 01月 28日 星期六 14:51:10 CST$ date &#39;+%c&#39;2017年01月28日 星期六 14时51分35秒$ date &#39;+%D&#39;01/28/17$ date &#39;+%x&#39;2017年01月28日$ date &#39;+%T&#39;14:52:02$ date &#39;+%X&#39;14时52分06秒</code></pre><p><strong><code>例二</code>：显示日期和设定时间</strong></p><pre><code class="bash">$ date --date 08:42:00</code></pre><p><strong><code>例三</code>：date -d参数使用</strong></p><pre><code class="bash">$ date -d &quot;nov 22&quot;2012年 11月 22日 星期四 00:00:00 CST$ date -d &#39;2 weeks&#39;2012年 12月 22日 星期六 08:50:21 CST$ date -d &#39;next monday&#39;2012年 12月 10日 星期一 00:00:00 CST$ date -d next-day +%Y%m%d20121209$ date -d tomorrow +%Y%m%d20121209$ date -d last-day +%Y%m%d20121207$ date -d yesterday +%Y%m%d20121207$ date -d last-month +%Y%m201211$ date -d next-month +%Y%m201301$ date -d &#39;30 days ago&#39;2012年 11月 08日 星期四 08:51:37 CST$ date -d &#39;-100 days&#39;2012年 08月 30日 星期四 08:52:03 CST$ date -d &#39;dec 14 -2 weeks&#39;2012年 11月 30日 星期五 00:00:00 CST$ date -d &#39;50 days&#39;2013年 01月 27日 星期日 08:52:27 CST</code></pre><blockquote><p><strong>说明：</strong><br>　　date 命令的另一个扩展是 -d 选项，该选项非常有用。使用这个功能强大的选项，通过将日期作为引号括起来的参数提供，您可以快速地查明一个特定的日期。-d 选项还可以告诉您，相对于当前日期若干天的究竟是哪一天，从现在开始的若干天或若干星期以后，或者以前（过去）。通过将这个相对偏移使用引号括起来，作为 -d 选项的参数，就可以完成这项任务。<br>　　具体说明如下：<br>　　　　date -d “nov 22”  今年的 11 月 22 日是星期三<br>　　　　date -d ‘2 weeks’ 2周后的日期<br>　　　　date -d ‘next monday’ (下周一的日期)<br>　　　　date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d<br>　　　　date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d<br>　　　　date -d last-month +%Y%m(上个月是几月)<br>　　　　date -d next-month +%Y%m(下个月是几月)<br>　　使用 ago 指令，您可以得到过去的日期：<br>　　　　date -d ‘30 days ago’ （30天前的日期）<br>　　使用负数以得到相反的日期：<br>　　　　date -d ‘dec 14 -2 weeks’ （相对:dec 14这个日期的两周前的日期）<br>　　　　date -d ‘-100 days’ (100天以前的日期)<br>　　　　date -d ‘50 days’(50天后的日期)</p></blockquote><p><strong><code>例四</code>：显示月份和日数</strong></p><pre><code class="bash">$ date  &#39;+%B %d&#39;一月 28</code></pre><p><strong><code>例五</code>：显示时间后跳行，再显示目前日期</strong></p><pre><code class="bash">$ date &#39;+%T%n%D&#39;14:58:2301/28/17</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（47）: diff</title>
      <link href="/2017/01/15/linux-command-47-diff/"/>
      <url>/2017/01/15/linux-command-47-diff/</url>
      
        <content type="html"><![CDATA[<p>　　diff 命令是 linux上非常重要的工具，用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方。diff在命令行中打印每一个行的改动。最新版本的diff还支持二进制文件。diff程序的输出被称为补丁 (patch)，因为Linux系统中还有一个patch程序，可以根据diff的输出将a.c的文件内容更新为b.c。diff是svn、cvs、git等版本控制工具不可或缺的一部分。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ diff [参数] [文件1或目录1] [文件2或目录2]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　diff命令能比较单个文件或者目录内容。如果指定比较的是文件，则只有当输入为文本文件时才有效。以逐行的方式，比较文本文件的异同处。如果指定比较的是目录的的时候，diff 命令会比较两个目录下名字相同的文本文件。列出不同的二进制文件、公共子目录和只在一个目录出现的文件。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">指定要显示多少行的文本。此参数必须与-c或-u参数一并使用</td></tr><tr><td align="left">-a或–text</td><td align="left">diff预设只会逐行比较文本文件</td></tr><tr><td align="left">-b或–ignore-space-change</td><td align="left">不检查空格字符的不同</td></tr><tr><td align="left">-B或–ignore-blank-lines</td><td align="left">不检查空白行</td></tr><tr><td align="left">-c</td><td align="left">显示全部内文，并标出不同之处</td></tr><tr><td align="left">-C或–context</td><td align="left">与执行”-c”指令相同</td></tr><tr><td align="left">-d或–minimal</td><td align="left">使用不同的演算法，以较小的单位来做比较</td></tr><tr><td align="left">-D或ifdef</td><td align="left">此参数的输出格式可用于前置处理器巨集</td></tr><tr><td align="left">-e或–ed</td><td align="left">此参数的输出格式可用于ed的script文件</td></tr><tr><td align="left">-f或-forward-ed</td><td align="left">输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处</td></tr><tr><td align="left">-H或–speed-large-files</td><td align="left">比较大文件时，可加快速度</td></tr><tr><td align="left">-l或–ignore-matching-lines</td><td align="left">若两个文件在某几行有所不同，而这几行同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异</td></tr><tr><td align="left">-i或–ignore-case</td><td align="left">不检查大小写的不同</td></tr><tr><td align="left">-l或–paginate</td><td align="left">将结果交由pr程序来分页</td></tr><tr><td align="left">-n或–rcs</td><td align="left">将比较结果以RCS的格式来显示</td></tr><tr><td align="left">-N或–new-file</td><td align="left">在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录：文件A若使用-N参数，则diff会将文件A与一个空白的文件比较</td></tr><tr><td align="left">-p</td><td align="left">若比较的文件为C语言的程序码文件时，显示差异所在的函数名称</td></tr><tr><td align="left">-P或–unidirectional-new-file</td><td align="left">与-N类似，但只有当第二个目录包含了一个第一个目录所没有的文件时，才会将这个文件与空白的文件做比较</td></tr><tr><td align="left">-q或–brief</td><td align="left">仅显示有无差异，不显示详细的信息</td></tr><tr><td align="left">-r或–recursive</td><td align="left">比较子目录中的文件</td></tr><tr><td align="left">-s或–report-identical-files</td><td align="left">若没有发现任何差异，仍然显示信息</td></tr><tr><td align="left">-S或–starting-file</td><td align="left">在比较目录时，从指定的文件开始比较</td></tr><tr><td align="left">-t或–expand-tabs</td><td align="left">在输出时，将tab字符展开</td></tr><tr><td align="left">-T或–initial-tab</td><td align="left">在每行前面加上tab字符以便对齐</td></tr><tr><td align="left">-u,-U或–unified&#x3D;</td><td align="left">以合并的方式来显示文件内容的不同</td></tr><tr><td align="left">-v或–version</td><td align="left">显示版本信息</td></tr><tr><td align="left">-w或–ignore-all-space</td><td align="left">忽略全部的空格字符</td></tr><tr><td align="left">-W或–width</td><td align="left">在使用-y参数时，指定栏宽</td></tr><tr><td align="left">-x或–exclude</td><td align="left">不比较选项中所指定的文件或目录</td></tr><tr><td align="left">-X或–exclude-from</td><td align="left">您可以将文件或目录类型存成文本文件，然后在&#x3D;中指定此文本文件</td></tr><tr><td align="left">-y或–side-by-side</td><td align="left">以并列的方式显示文件的异同之处</td></tr><tr><td align="left">–left-column</td><td align="left">在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容</td></tr><tr><td align="left">–suppress-common-lines</td><td align="left">在使用-y参数时，仅显示不同之处</td></tr><tr><td align="left">–help</td><td align="left">显示帮助</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><h2 id="例一：比较两个文件-bash-diff-1-txt-2-txt1c1-ii"><a href="#例一：比较两个文件-bash-diff-1-txt-2-txt1c1-ii" class="headerlink" title="例一：比较两个文件&#96;&#96;&#96;bash$ diff 1.txt 2.txt1c1&lt; ii"></a><strong><code>例一</code>：比较两个文件</strong><br>&#96;&#96;&#96;bash<br>$ diff 1.txt 2.txt<br>1c1<br>&lt; ii</h2><blockquote><p>iii</p></blockquote><pre><code>&gt;**说明：**　　上面的“1c1”表示第一个文件和第二个文件的第1行内容有所不同；　　diff 的normal 显示格式有三种提示:　　　　a - add　　　　c - change　　　　d - delete**`例二`：并排格式输出**```bash$ diff 1.txt 2.txt -y -W 50ii      |iiiiii      iiiiiii    iiiiiiiii    iiiii</code></pre><blockquote><p><strong>说明：</strong><br>　　“|”表示前后2个文件内容有不同<br>　　“&lt;”表示后面文件比前面文件少了1行内容<br>　　“&gt;”表示后面文件比前面文件多了1行内容</p></blockquote><p><strong><code>例三</code>：上下文输出格式</strong></p><pre><code class="bash">$ diff 1.txt 2.txt  -c*** 1.txt2017-01-28 14:24:13.744538252 +0800--- 2.txt2017-01-28 14:24:59.096124066 +0800****************** 1,4 ****! ii  iii  iiii  iiiii--- 1,4 ----! iii  iii  iiii  iiiii</code></pre><blockquote><p><strong>说明：</strong><br>　　这种方式在开头两行作了比较文件的说明，这里有三中特殊字符：<br>　　“＋” 比较的文件的后者比前着多一行<br>　　“－” 比较的文件的后者比前着少一行<br>　　“！” 比较的文件两者有差别的行</p></blockquote><p><strong><code>例四</code>：统一格式输出</strong></p><pre><code class="bash">$ diff 1.txt 2.txt  -u--- 1.txt2017-01-28 14:24:13.744538252 +0800+++ 2.txt2017-01-28 14:24:59.096124066 +0800@@ -1,4 +1,4 @@-ii+iii iii iiii iiiii</code></pre><p><strong><code>例五</code>：比较文件夹不同</strong></p><pre><code class="bash">$ diff test3 test6</code></pre><p><strong><code>例六</code>：比较两个文件不同，并生产补丁</strong></p><pre><code class="bash">$ diff -ruN 1.txt 2.txt &gt;patch.log</code></pre><p><strong><code>例七</code>：打补丁</strong></p><pre><code class="bash">$ 1.txt patch</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（46）: ln</title>
      <link href="/2017/01/14/linux-command-46-ln/"/>
      <url>/2017/01/14/linux-command-46-ln/</url>
      
        <content type="html"><![CDATA[<p>　　ln是linux中又一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ ln [参数][源文件或目录][目标文件或目录]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。<br><strong>软连接</strong><br>　　1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式<br>　　2.软链接可以 跨文件系统 ，硬链接不可以<br>　　3.软链接可以对一个不存在的文件名进行链接<br>　　4.软链接可以对目录进行链接<br><strong>硬链接</strong><br>　　1.硬链接，以文件副本的形式存在。但不占用实际空间。<br>　　2.不允许给目录创建硬链接<br>　　3.硬链接只有在同一个文件系统中才能创建<br><strong>两点注意</strong><br>　　第一，ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；<br>　　第二，ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。<br>　　ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">删除，覆盖以前建立的链接</td></tr><tr><td align="left">-d</td><td align="left">允许超级用户制作目录的硬链接</td></tr><tr><td align="left">-f</td><td align="left">强制执行</td></tr><tr><td align="left">-i</td><td align="left">交互模式，文件存在则提示用户是否覆盖</td></tr><tr><td align="left">-n</td><td align="left">把符号链接视为一般目录</td></tr><tr><td align="left">-s</td><td align="left">软链接(符号链接)</td></tr><tr><td align="left">-v</td><td align="left">显示详细的处理过程</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-S</td><td align="left">“-S&lt;字尾备份字符串&gt; ”或 “–suffix&#x3D;&lt;字尾备份字符串&gt;”</td></tr><tr><td align="left">-V</td><td align="left">“-V&lt;备份方式&gt;”或“–version-control&#x3D;&lt;备份方式&gt;”</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：给文件创建软链接</strong></p><pre><code class="bash"># 为2.txt文件创建软链接2，如果2.txt丢失，2将失效$ ln -s 2.txt 2</code></pre><p><strong><code>例二</code>：给文件创建硬链接</strong></p><pre><code class="bash"># 为1.txt创建硬链接1，1.txt与1的各项属性相同,删除1.txt，1仍能使用$ ln 1.txt 1</code></pre><p><strong><code>例三</code>：接上面两实例，链接完毕后，删除和重建链接原文件</strong></p><pre><code class="bash">$ ll-rw-r--r-- 2 faker faker   10 1月  22 11:28 1-rw-r--r-- 2 faker faker   10 1月  22 11:28 1.txtlrwxrwxrwx 1 faker faker    5 1月  28 11:15 2 -&gt; 2.txt-rwxrwxrwx 1 faker faker   14 1月  18 10:06 2.txt$ rm 1.txt 2.txt-rw-r--r-- 1 faker faker   10 1月  22 11:28 1lrwxrwxrwx 1 faker faker    5 1月  28 11:15 2 -&gt; 2.txt$ cat 1sdfiskdlf$ cat 2cat: 2: 没有那个文件或目录</code></pre><blockquote><p><strong>说明：</strong><br>　　1.源文件被删除后，并没有影响硬链接文件；软链接文件在centos系统下不断的闪烁，提示源文件已经不存在<br>　　2.重建源文件后，软链接不在闪烁提示，说明已经链接成功，找到了链接文件系统；重建后，硬链接文件并没有受到源文件影响，硬链接文件的内容还是保留了删除前源文件的内容，说明硬链接已经失效</p></blockquote><p><strong><code>例三</code>：将文件链接为另一个目录中的相同名字</strong></p><pre><code class="bash"># 在ig文件夹中创建一个1.txt的链接$ ln 1.txt ig/$ ll ig-rw-r--r-- 2 faker faker   10 1月  28 13:40 1.txt</code></pre><p><strong><code>例五</code>：给目录创建软连接</strong></p><pre><code class="bash">$ ln -s ig gi</code></pre><blockquote><p><strong>说明：</strong><br>　　1.目录只能创建软链接<br>　　<del>2.目录创建链接必须用绝对路径，相对路径创建会不成功，会提示：符号连接的层数过多 这样的错误</del>（测试并不会出现这样的问题）<br>　　3.在链接目标目录中修改文件都会在源文件目录中同步变化</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（45）: scp</title>
      <link href="/2017/01/13/linux-command-45-scp/"/>
      <url>/2017/01/13/linux-command-45-scp/</url>
      
        <content type="html"><![CDATA[<p>　　scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I&#x2F;O非常高，而scp基本不影响系统正常使用。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ scp [参数] [原路径] [目标路径]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-1</td><td align="left">强制scp命令使用协议ssh1</td></tr><tr><td align="left">-2</td><td align="left">强制scp命令使用协议ssh2</td></tr><tr><td align="left">-4</td><td align="left">强制scp命令只使用IPv4寻址</td></tr><tr><td align="left">-6</td><td align="left">强制scp命令只使用IPv6寻址</td></tr><tr><td align="left">-B</td><td align="left">使用批处理模式（传输过程中不询问传输口令或短语）</td></tr><tr><td align="left">-C</td><td align="left">允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</td></tr><tr><td align="left">-p</td><td align="left">保留原文件的修改时间，访问时间和访问权限</td></tr><tr><td align="left">-q</td><td align="left">不显示传输进度条</td></tr><tr><td align="left">-r</td><td align="left">递归复制整个目录</td></tr><tr><td align="left">-v</td><td align="left">详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题</td></tr><tr><td align="left">-c cipher</td><td align="left">以cipher将数据传输进行加密，这个选项将直接传递给ssh</td></tr><tr><td align="left">-F ssh_config</td><td align="left">指定一个替代的ssh配置文件，此参数直接传递给ssh</td></tr><tr><td align="left">-i identity_file</td><td align="left">从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh</td></tr><tr><td align="left">-l limit</td><td align="left">限定用户所能使用的带宽，以Kbit&#x2F;s为单位</td></tr><tr><td align="left">-o ssh_option</td><td align="left">如果习惯于使用ssh_config(5)中的参数传递方式</td></tr><tr><td align="left">-P port</td><td align="left">注意是大写的P, port是指定数据传输用到的端口号</td></tr><tr><td align="left">-S program</td><td align="left">指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong>从本地服务器复制到远程服务器：</strong></p><pre><code class="bash"># 指定了用户名，命令执行后需输入密码$ scp -r img/* root@server:/var/project/img/# 没有指定用户名，命令执行后需要输入用户名密码$ scp -r img/* server:/var/project/img/</code></pre><p><strong>从远程服务器复制到本地当前目录：</strong></p><pre><code class="bash">$ scp -r server:/var/project/img/* .</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（44）: rcp</title>
      <link href="/2017/01/12/linux-command-44-rcp/"/>
      <url>/2017/01/12/linux-command-44-rcp/</url>
      
        <content type="html"><![CDATA[<p>　　rcp代表“remote file copy”（远程文件拷贝）。该命令用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ rcp [参数] [源文件] [目标文件]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　rcp命令用在远端复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到该目录中。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-r</td><td align="left">递归地把源目录中的所有内容拷贝到目的目录中。要使用这个选项，目的必须是一个目录</td></tr><tr><td align="left">-p</td><td align="left">试图保留源文件的修改时间和模式，忽略umask</td></tr><tr><td align="left">-k</td><td align="left">请求rcp获得在指定区域内的远程主机的Kerberos 许可，而不是获得由krb_relmofhost⑶确定的远程主机区域内的远程主机的Kerberos许可。</td></tr><tr><td align="left">-x</td><td align="left">为传送的所有数据打开DES加密。这会影响响应时间和CPU利用率，但是可以提高安全性。如果在文件名中指定的路径不是完整的路径名，那么这个路径被解释为相对远程机上同名用户的主目录。如果没有给出远程用户名，就使用当前用户名。如果远程机上的路径包含特殊shell字符，需要用反斜线（\）、双引号（”）或单引号（’）括起来，使所有的shell元字符都能被远程地解释。需要说明的是，rcp不提示输入口令，它通过rsh命令来执行拷贝。</td></tr><tr><td align="left">directory</td><td align="left">每个文件或目录参数既可以是远程文件名也可以是本地文件名。远程文件名具有如下形式：rname@rhost：path，其中rname是远程用户名，rhost是远程计算机名，path是这个文件的路径。</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong>使用rcp，需要具备的条件</strong><br>　　如果系统中有 &#x2F;etc&#x2F;hosts 文件，系统管理员应确保该文件包含要与之进行通信的远程主机的项。<br>　　&#x2F;etc&#x2F;hosts 文件中有一行文字，其中包含每个远程系统的以下信息：<br>　　　　<code>internet_address   official_name   alias</code><br>　　例如：<br>　　　　<code>9.186.10.***  webserver1.com.58.webserver</code><br>.rhosts 文件<br>　　.rhosts 文件位于远程系统的主目录下，其中包含本地系统的名称和本地登录名。<br>　　例如，远程系统的 .rhosts 文件中的项可能是：<br>　　　　<code>webserver1 root</code><br>　　其中，webserver1 是本地系统的名称，root 是本地登录名。这样，webserver1 上的 root 即可在包含.rhosts 文件的远程系统中来回复制文件。<br><strong>配置过程:</strong><br>只对root用户生效</p><ol><li><p>在双方root用户根目录下建立.rhosts文件,并将双方的hostname加进去.在此之前应在双方的 &#x2F;etc&#x2F;hosts文件中加入对方的IP和hostname</p></li><li><p>把rsh服务启动起来,redhat默认是不启动的。<br>方法：用执行ntsysv命令,在rsh选项前用空格键选中,确定退出。然后执行：<br>service xinetd restart即可。</p></li></ol><p>3.到&#x2F;etc&#x2F;pam.d&#x2F;目录下,把rsh文件中的auth required &#x2F;lib&#x2F;security&#x2F;pam_securetty.so<br>一行用“#”注释掉即可。（只有注释掉这一行，才能用root用户登录）</p><p><strong><code>例一</code>：将本地img文件夹内的所有内容 复制到服务器相应的img目录下</strong></p><pre><code class="bash"># -r 递归子目录$ rcp -r img/* webserver1:/var/project/img/</code></pre><p><strong><code>例二</code>：将服务器的img文件夹内的所有内容 复制到本地目录下</strong></p><pre><code class="bash"># -r 递归子目录$ rcp -r webserver1:/var/project/img/* img/</code></pre><p><strong><code>例三</code>：将目录复制到远程系统：要将本地目录及其文件和子目录复制到远程系统</strong></p><pre><code class="bash"># 将本地的img目录复制到服务器的project目录下$ rcp -r img/ webserver1:/var/project/</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（43）: telnet</title>
      <link href="/2017/01/12/linux-command-43-telnet/"/>
      <url>/2017/01/12/linux-command-43-telnet/</url>
      
        <content type="html"><![CDATA[<p>　　telnet命令通常用来远程登录。telnet程序是基于TELNET协议的远程登录客户端程序。Telnet协议是TCP&#x2F;IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的 能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个 telnet会话，必须输入用户名和密码来登录服务器。Telnet是常用的远程控制Web服务器的方法。</p><span id="more"></span><p>　　但是，telnet因为采用明文传送报文，安全性不好，很多Linux服务器都不开放telnet服务，而改用更安全的ssh方式了。但仍然有很多别的系统可能采用了telnet方式来提供远程登录，因此弄清楚telnet客户端的使用方式仍是很有必要的。</p><p>　　telnet命令还可做别的用途，比如确定远程服务的状态，比如确定远程服务器的某个端口是否能访问。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ telnet [参数][主机]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　执行telnet指令开启终端机阶段作业，并登入远端主机。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-8</td><td align="left">允许使用8位字符资料，包括输入与输出</td></tr><tr><td align="left">-a</td><td align="left">尝试自动登入远端系统</td></tr><tr><td align="left">-b&lt;主机别名&gt;</td><td align="left">使用别名指定远端主机名称</td></tr><tr><td align="left">-c</td><td align="left">不读取用户专属目录里的.telnetrc文件</td></tr><tr><td align="left">-d</td><td align="left">启动排错模式</td></tr><tr><td align="left">-e&lt;脱离字符&gt;</td><td align="left">设置脱离字符</td></tr><tr><td align="left">-E</td><td align="left">滤除脱离字符</td></tr><tr><td align="left">-f</td><td align="left">此参数的效果和指定”-F”参数相同</td></tr><tr><td align="left">-F</td><td align="left">使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机</td></tr><tr><td align="left">-k&lt;域名&gt;</td><td align="left">使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名</td></tr><tr><td align="left">-K</td><td align="left">不自动登入远端主机</td></tr><tr><td align="left">-l&lt;用户名称&gt;</td><td align="left">指定要登入远端主机的用户名称</td></tr><tr><td align="left">-L</td><td align="left">允许输出8位字符资料</td></tr><tr><td align="left">-n&lt;记录文件&gt;</td><td align="left">指定文件记录相关信息</td></tr><tr><td align="left">-r</td><td align="left">使用类似rlogin指令的用户界面</td></tr><tr><td align="left">-S&lt;服务类型&gt;</td><td align="left">设置telnet连线所需的IP TOS信息</td></tr><tr><td align="left">-x</td><td align="left">假设主机有支持数据加密的功能，就使用它</td></tr><tr><td align="left">-X&lt;认证形态&gt;</td><td align="left">关闭指定的认证形态</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：远程服务器无法访问</strong></p><pre><code class="bash">$ telnet 192.168.120.206Trying 192.168.120.209...telnet: connect to address 192.168.120.209: No route to hosttelnet: Unable to connect to remote host: No route to host</code></pre><blockquote><p><strong>说明：</strong><br>处理这种情况方法：<br>　　（1）确认ip地址是否正确？<br>　　（2）确认ip地址对应的主机是否已经开机？<br>　　（3）如果主机已经启动，确认路由设置是否设置正确？（使用route命令查看）<br>　　（4）如果主机已经启动，确认主机上是否开启了telnet服务？（使用netstat命令查看，TCP的23端口是否有LISTEN状态的行）<br>　　（5）如果主机已经启动telnet服务，确认防火墙是否放开了23端口的访问？（使用iptables-save查看）</p></blockquote><p><strong><code>例二</code>：域名无法解析</strong></p><pre><code class="bash">$ telnet www.baidu.comwww.baidu.com/telnet: Temporary failure in name resolution</code></pre><blockquote><p><strong>说明：</strong><br>处理这种情况方法：<br>　　（1）确认域名是否正确<br>　　（2）确认本机的域名解析有关的设置是否正确（&#x2F;etc&#x2F;resolv.conf中nameserver的设置是否正确，如果没有，可以使用nameserver 8.8.8.8）<br>　　（3）确认防火墙是否放开了UDP53端口的访问（DNS使用UDP协议，端口53，使用iptables-save查看）</p></blockquote><p><strong><code>例三</code>：连接被拒绝</strong></p><pre><code class="bash">$ telnet 192.168.120.206Trying 192.168.120.206...telnet: connect to address 192.168.120.206: Connection refusedtelnet: Unable to connect to remote host: Connection refused</code></pre><blockquote><p><strong>说明：</strong><br>处理这种情况：<br>　　（1）确认ip地址或者主机名是否正确？<br>　　（2）确认端口是否正确，是否默认的23端口</p></blockquote><p><strong><code>例四</code>：正常telnet</strong></p><pre><code class="bash">$ telnet 192.168.120.204Trying 192.168.120.204...Connected to 192.168.120.204 (192.168.120.204).Escape character is &#39;^]&#39;.    localhost (Linux release 2.6.18-274.18.1.el5 #1 SMP Thu Feb 9 12:45:44 EST 2012) (1)login: rootPassword:Login incorrect</code></pre><blockquote><p><strong>说明：</strong><br>　　一般情况下不允许root从远程登录，可以先用普通账号登录，然后再用su -切到root用户。</p></blockquote><p><strong><code>例五</code>：测试服务器8888端口是否可用</strong></p><pre><code class="bash">$ telnet 192.168.0.88 8888</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（42）: ss</title>
      <link href="/2017/01/11/linux-command-42-ss/"/>
      <url>/2017/01/11/linux-command-42-ss/</url>
      
        <content type="html"><![CDATA[<p>　　ss是Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p><span id="more"></span><p>　　当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat &#x2F;proc&#x2F;net&#x2F;tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。</p><p>　　天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ ss [参数]$ ss[参数] [过滤]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　ss(Socket Statistics的缩写)命令可以用来获取 socket统计信息，此命令输出的结果类似于 netstat输出的内容，但它能显示更多更详细的 TCP连接状态的信息，且比 netstat 更快速高效。它使用了 TCP协议栈中 tcp_diag（是一个用于分析统计的模块），能直接从获得第一手内核信息，这就使得 ss命令快捷高效。在没有 tcp_diag，ss也可以正常运行。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-h, –help</td><td align="left">帮助信息</td></tr><tr><td align="left">-V, –version</td><td align="left">程序版本信息</td></tr><tr><td align="left">-n, –numeric</td><td align="left">不解析服务名称</td></tr><tr><td align="left">-r, –resolve</td><td align="left">解析主机名</td></tr><tr><td align="left">-a, –all</td><td align="left">显示所有套接字（sockets）</td></tr><tr><td align="left">-l, –listening</td><td align="left">显示监听状态的套接字（sockets）</td></tr><tr><td align="left">-o, –options</td><td align="left">显示计时器信息</td></tr><tr><td align="left">-e, –extended</td><td align="left">显示详细的套接字（sockets）信息</td></tr><tr><td align="left">-m, –memory</td><td align="left">显示套接字（socket）的内存使用情况</td></tr><tr><td align="left">-p, –processes</td><td align="left">显示使用套接字（socket）的进程</td></tr><tr><td align="left">-i, –info</td><td align="left">显示 TCP内部信息</td></tr><tr><td align="left">-s, –summary</td><td align="left">显示套接字（socket）使用概况</td></tr><tr><td align="left">-4, –ipv4</td><td align="left">仅显示IPv4的套接字（sockets）</td></tr><tr><td align="left">-6, –ipv6</td><td align="left">仅显示IPv6的套接字（sockets）</td></tr><tr><td align="left">-0, –packet</td><td align="left">显示 PACKET 套接字（socket）</td></tr><tr><td align="left">-t, –tcp</td><td align="left">仅显示 TCP套接字（sockets）</td></tr><tr><td align="left">-u, –udp</td><td align="left">仅显示 UCP套接字（sockets）</td></tr><tr><td align="left">-d, –dccp</td><td align="left">仅显示 DCCP套接字（sockets）</td></tr><tr><td align="left">-w, –raw</td><td align="left">仅显示 RAW套接字（sockets）</td></tr><tr><td align="left">-x, –unix</td><td align="left">仅显示 Unix套接字（sockets）</td></tr><tr><td align="left">-f, –family&#x3D;FAMILY</td><td align="left">显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink</td></tr><tr><td align="left">-A, –query&#x3D;QUERY, –socket&#x3D;QUERY<br/>QUERY :&#x3D; {all</td><td align="left">inet</td></tr><tr><td align="left">-D, –diag&#x3D;FILE</td><td align="left">将原始TCP套接字（sockets）信息转储到文件</td></tr><tr><td align="left">-F, –filter&#x3D;FILE</td><td align="left">从文件中都去过滤器信息</td></tr><tr><td align="left">FILTER :&#x3D; [ state TCP-STATE ] [ EXPRESSION ]</td><td align="left"></td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示TCP连接</strong></p><pre><code class="bash">$ ss -t -a</code></pre><p><strong><code>例二</code>：显示 Sockets 摘要</strong></p><pre><code class="bash">$ ss -sTotal: 1385 (kernel 0)TCP:   199 (estab 64, closed 76, orphaned 0, synrecv 0, timewait 1/0), ports 0Transport Total     IP        IPv6*  0         -         -        RAW  2         1         1        UDP  29        21        8        TCP  123       47        76       INET  154       69        85       FRAG  0         0         0  </code></pre><blockquote><p><strong>说明：</strong><br>　　列出当前的established, closed, orphaned and waiting TCP sockets</p></blockquote><p><strong><code>例三</code>：列出所有打开的网络连接端口</strong></p><pre><code class="bash">$ ss -l</code></pre><p><strong><code>例四</code>：查看进程使用的socket</strong></p><pre><code class="bash">$ ss -pl</code></pre><p><strong><code>例五</code>：找出打开套接字&#x2F;端口应用程序</strong></p><pre><code class="bash">$ ss -lp | grep 3306</code></pre><p><strong><code>例六</code>：显示所有UDP Sockets</strong></p><pre><code class="bash">$ ss -u -a</code></pre><p><strong><code>例七</code>：显示所有状态为established的SMTP连接</strong></p><pre><code class="bash">$ ss -o state established &#39;( dport = :smtp or sport = :smtp )&#39;</code></pre><p><strong><code>例八</code>：显示所有状态为Established的HTTP连接</strong></p><pre><code class="bash">$ ss -o state established &#39;( dport = :http or sport = :http )&#39;</code></pre><p><strong><code>例九</code>：列举出处于 FIN-WAIT-1状态的源端口为 80或者 443，目标网络为 193.233.7&#x2F;24所有 tcp套接字<br>命令</strong></p><pre><code class="bash">$ ss -o state fin-wait-1 &#39;( sport = :http or sport = :https )&#39; dst 193.233.7/24</code></pre><p><strong><code>例十</code>：用TCP 状态过滤Sockets</strong></p><pre><code class="bash">$ ss -4 state FILTER-NAME-HERE$ ss -6 state FILTER-NAME-HERE</code></pre><blockquote><p><strong>说明：</strong><br>FILTER-NAME-HERE 可以代表以下任何一个：<br>　　established<br>　　syn-sent<br>　　syn-recv<br>　　fin-wait-1<br>　　fin-wait-2<br>　　time-wait<br>　　closed<br>　　close-wait<br>　　last-ack<br>　　listen<br>　　closing<br>　　all : 所有以上状态<br>　　connected : 除了listen and closed的所有状态<br>　　synchronized :所有已连接的状态除了syn-sent<br>　　bucket : 显示状态为maintained as minisockets,如：time-wait和syn-recv.<br>　　big : 和bucket相反.</p></blockquote><p><strong><code>例十一</code>：匹配远程地址和端口号</strong></p><pre><code class="bash">$ ss dst ADDRESS_PATTERN$ ss dst 192.168.1.5$ ss dst 192.168.119.113:http$ ss dst 192.168.119.113:smtp$ ss dst 192.168.119.113:443</code></pre><p><strong><code>例十二</code>：匹配本地地址和端口号</strong></p><pre><code class="bash">$ ss src ADDRESS_PATTERN$ ss src 192.168.119.103$ ss src 192.168.119.103:http$ ss src 192.168.119.103:80$ ss src 192.168.119.103:smtp$ ss src 192.168.119.103:25</code></pre><p><strong><code>例十三</code>：将本地或者远程端口和一个数比较</strong></p><pre><code class="bash">$ ss dport OP PORT$ ss sport OP PORT</code></pre><blockquote><p><strong>说明：</strong><br>　　ss dport OP PORT 远程端口和一个数比较；ss sport OP PORT 本地端口和一个数比较。<br>　　OP 可以代表以下任意一个:<br>　　　　&lt;&#x3D; or le : 小于或等于端口号<br>　　　　&gt;&#x3D; or ge : 大于或等于端口号<br>　　　　&#x3D;&#x3D; or eq : 等于端口号<br>　　　　!&#x3D; or ne : 不等于端口号<br>　　　　&lt; or gt : 小于端口号<br>　　　　&gt; or lt : 大于端口号</p></blockquote><p><strong><code>例十四</code>：ss 和 netstat 效率对比</strong></p><pre><code class="bash">$ time netstat -at$ time ss</code></pre><blockquote><p><strong>说明：</strong><br>　　用time 命令分别获取通过netstat和ss命令获取程序和概要占用资源所使用的时间。在服务器连接数比较多的时候，netstat的效率完全没法和ss比。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（41）: netstat</title>
      <link href="/2017/01/10/linux-command-41-netstat/"/>
      <url>/2017/01/10/linux-command-41-netstat/</url>
      
        <content type="html"><![CDATA[<p>　　netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p><span id="more"></span><p>　　如果你的计算机有时候接收到的数据报导致出错数据或故障，你不必感到奇怪，TCP&#x2F;IP可以容许这些类型的错误，并能够自动重发数据报。但如果累计的出错情况数目占到所接收的IP数据报相当大的百分比，或者它的数目正迅速增加，那么你就应该使用netstat查一查为什么会出现这些情况了。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a或–all</td><td align="left">显示所有连线中的Socket</td></tr><tr><td align="left">-A&lt;网络类型&gt;或–&lt;网络类型&gt;</td><td align="left">列出该网络类型连线中的相关地址</td></tr><tr><td align="left">-c或–continuous</td><td align="left">持续列出网络状态</td></tr><tr><td align="left">-C或–cache</td><td align="left">显示路由器配置的快取信息</td></tr><tr><td align="left">-e或–extend</td><td align="left">显示网络其他相关信息</td></tr><tr><td align="left">-F或–fib</td><td align="left">显示FIB</td></tr><tr><td align="left">-g或–groups</td><td align="left">显示多重广播功能群组组员名单</td></tr><tr><td align="left">-h或–help</td><td align="left">在线帮助</td></tr><tr><td align="left">-i或–interfaces</td><td align="left">显示网络界面信息表单</td></tr><tr><td align="left">-l或–listening</td><td align="left">显示监控中的服务器的Socket</td></tr><tr><td align="left">-M或–masquerade</td><td align="left">显示伪装的网络连线</td></tr><tr><td align="left">-n或–numeric</td><td align="left">直接使用IP地址，而不通过域名服务器</td></tr><tr><td align="left">-N或–netlink或–symbolic</td><td align="left">显示网络硬件外围设备的符号连接名称</td></tr><tr><td align="left">-o或–timers</td><td align="left">显示计时器</td></tr><tr><td align="left">-p或–programs</td><td align="left">显示正在使用Socket的程序识别码和程序名称</td></tr><tr><td align="left">-r或–route</td><td align="left">显示Routing Table</td></tr><tr><td align="left">-s或–statistice</td><td align="left">显示网络工作信息统计表</td></tr><tr><td align="left">-t或–tcp</td><td align="left">显示TCP传输协议的连线状况</td></tr><tr><td align="left">-u或–udp</td><td align="left">显示UDP传输协议的连线状况</td></tr><tr><td align="left">-v或–verbose</td><td align="left">显示指令执行过程</td></tr><tr><td align="left">-V或–version</td><td align="left">显示版本信息</td></tr><tr><td align="left">-w或–raw</td><td align="left">显示RAW传输协议的连线状况</td></tr><tr><td align="left">-x或–unix</td><td align="left">此参数的效果和指定”-A unix”参数相同</td></tr><tr><td align="left">–ip或–inet</td><td align="left">此参数的效果和指定”-A inet”参数相同</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：无参数使用</strong></p><pre><code class="bash">$ netstatActive Internet connections (w/o servers)Proto Recv-Q Send-Q Local Address               Foreign Address             State      tcp        0    268 192.168.120.204:ssh         10.2.0.68:62420             ESTABLISHEDudp        0      0 192.168.120.204:4371        10.58.119.119:domain        ESTABLISHEDActive UNIX domain sockets (w/o servers)Proto RefCnt Flags       Type       State         I-Node Pathunix  2      [ ]         DGRAM                    1491   @/org/kernel/udev/udevdunix  4      [ ]         DGRAM                    7337   /dev/logunix  2      [ ]         DGRAM                    708823unix  2      [ ]         DGRAM                    7539   unix  3      [ ]         STREAM     CONNECTED     7287   unix  3      [ ]         STREAM     CONNECTED     7286</code></pre><blockquote><p><strong>说明：</strong><br>　　从整体上看，netstat的输出结果可以分为两个部分：<br>　　一个是Active Internet connections，称为有源TCP连接，其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列。这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积。这种情况只能在非常少的情况见到。<br>　　另一个是Active UNIX domain sockets，称为有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。<br>　　Proto显示连接使用的协议,RefCnt表示连接到本套接口上的进程号,Types显示套接口的类型,State显示套接口当前的状态,Path表示连接到套接口的其它进程使用的路径名。<br><strong>套接口类型：</strong><br>　　-t ：TCP<br>　　-u ：UDP<br>　　-raw ：RAW类型<br>　　–unix ：UNIX域类型<br>　　–ax25 ：AX25类型<br>　　–ipx ：ipx类型<br>　　–netrom ：netrom类型<br><strong>状态说明：</strong><br>　　LISTEN：侦听来自远方的TCP端口的连接请求<br>　　SYN-SENT：再发送连接请求后等待匹配的连接请求（如果有大量这样的状态包，检查是否中招了）<br>　　SYN-RECEIVED：再收到和发送一个连接请求后等待对方对连接请求的确认（如有大量此状态，估计被flood攻击了）<br>　　ESTABLISHED：代表一个打开的连接<br>　　FIN-WAIT-1：等待远程TCP连接中断请求，或先前的连接中断请求的确认<br>　　FIN-WAIT-2：从远程TCP等待连接中断请求<br>　　CLOSE-WAIT：等待从本地用户发来的连接中断请求<br>　　CLOSING：等待远程TCP对连接中断的确认<br>　　LAST-ACK：等待原来的发向远程TCP的连接中断请求的确认（不是什么好东西，此项出现，检查是否被攻击）<br>　　TIME-WAIT：等待足够的时间以确保远程TCP接收到连接中断请求的确认<br>　　CLOSED：没有任何连接状态</p></blockquote><p><strong><code>例二</code>：列出所有端口</strong></p><pre><code class="bash">$ netstat -aActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address               Foreign Address             State      tcp        0      0 localhost:smux              *:*                         LISTEN      tcp        0      0 *:svn                       *:*                         LISTEN      tcp        0      0 *:ssh                       *:*                         LISTEN      tcp        0    284 192.168.120.204:ssh         10.2.0.68:62420             ESTABLISHEDudp        0      0 localhost:syslog            *:*                                     udp        0      0 *:snmp                      *:*                                     Active UNIX domain sockets (servers and established)Proto RefCnt Flags       Type       State         I-Node Pathunix  2      [ ACC ]     STREAM     LISTENING     708833 /tmp/ssh-yKnDB15725/agent.15725unix  2      [ ACC ]     STREAM     LISTENING     7296   /var/run/audispd_eventsunix  2      [ ]         DGRAM                    1491   @/org/kernel/udev/udevdunix  4      [ ]         DGRAM                    7337   /dev/logunix  2      [ ]         DGRAM                    708823unix  2      [ ]         DGRAM                    7539   unix  3      [ ]         STREAM     CONNECTED     7287   unix  3      [ ]         STREAM     CONNECTED     7286   </code></pre><blockquote><p><strong>说明：</strong><br>　　显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED），也包括监听连接请（LISTENING）的那些连接</p></blockquote><p><strong><code>例三</code>：显示当前UDP连接状况</strong></p><pre><code class="bash">$ netstat -nu</code></pre><p><strong><code>例四</code>：显示UDP端口号的使用情况</strong></p><pre><code class="bash">$ netstat -apu</code></pre><p><strong><code>例五</code>：显示UDP端口号的使用情况</strong></p><pre><code class="bash">$ netstat -i</code></pre><p><strong><code>例六</code>：显示组播组的关系</strong></p><pre><code class="bash">$ netstat -g</code></pre><p><strong><code>例七</code>：显示网络统计信息</strong></p><pre><code class="bash">$ netstat -s</code></pre><blockquote><p><strong>说明：</strong><br>　　按照各个协议分别显示其统计数据。如果我们的应用程序（如Web浏览器）运行速度比较慢，或者不能显示Web页之类的数据，那么我们就可以用本选项来查看一下所显示的信息。我们需要仔细查看统计数据的各行，找到出错的关键字，进而确定问题所在。</p></blockquote><p><strong><code>例八</code>：显示监听的套接口</strong></p><pre><code class="bash">$ netstat -l</code></pre><p><strong><code>例九</code>：显示所有已建立的有效连接</strong></p><pre><code class="bash">$ netstat -n</code></pre><p><strong><code>例十</code>：显示关于以太网的统计数据</strong></p><pre><code class="bash">$ netstat -e</code></pre><blockquote><p><strong>说明：</strong><br>　　用于显示关于以太网的统计数据。它列出的项目包括传送的数据报的总字节数、错误数、删除数、数据报的数量和广播的数量。这些统计数据既有发送的数据报数量，也有接收的数据报数量。这个选项可以用来统计一些基本的网络流量）</p></blockquote><p><strong><code>例十一</code>：显示关于路由表的信息</strong></p><pre><code class="bash">$ netstat -r</code></pre><p><strong><code>例十二</code>：列出所有 tcp 端口</strong></p><pre><code class="bash">$ netstat -at</code></pre><p><strong><code>例十三</code>：统计机器中网络连接各个状态个数</strong></p><pre><code class="bash">$ netstat -a | awk &#39;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#39;</code></pre><p><strong><code>例十四</code>：把状态全都取出来后使用uniq -c统计后再进行排序</strong></p><pre><code class="bash">$ netstat -nat |awk &#39;&#123;print $6&#125;&#39;|sort|uniq -c</code></pre><p><strong><code>例十五</code>：查看连接某服务端口最多的的IP地址</strong></p><pre><code class="bash">$ netstat -nat | grep &quot;192.168.120.20:16067&quot; |awk &#39;&#123;print $5&#125;&#39;|awk -F: &#39;&#123;print $4&#125;&#39;|sort|uniq -c|sort -nr|head -20</code></pre><p><strong><code>例十六</code>：找出程序运行的端口</strong></p><pre><code class="bash">$ netstat -ap | grep ssh</code></pre><p><strong><code>例十七</code>：在 netstat 输出中显示 PID 和进程名称</strong></p><pre><code class="bash">$ netstat -pt</code></pre><blockquote><p><strong>说明：</strong><br>　　netstat -p 可以与其它开关一起使用，就可以添加 “PID&#x2F;进程名称” 到 netstat 输出中，这样 debugging 的时候可以很方便的发现特定端口运行的程序</p></blockquote><p><strong><code>例十八</code>：查看所有端口使用情况</strong></p><pre><code class="bash">$ netstat -tln</code></pre><p><strong><code>例十九</code>：找出运行在指定端口的进程</strong></p><pre><code class="bash">$ netstat -anpt | grep &#39;:4000&#39;(Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.)tcp        0      0 0.0.0.0:4000            0.0.0.0:*               LISTEN      5362/hexo           tcp        0      0 127.0.0.1:4000          127.0.0.1:45884         ESTABLISHED 5362/hexo           tcp        0      0 127.0.0.1:4000          127.0.0.1:45886         ESTABLISHED 5362/hexo  </code></pre><blockquote><p><strong>说明：</strong><br>　　运行在端口4000的进程id为5362，再通过ps命令就可以找到具体的应用程序了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（40）: traceroute</title>
      <link href="/2017/01/09/linux-command-40-traceroute/"/>
      <url>/2017/01/09/linux-command-40-traceroute/</url>
      
        <content type="html"><![CDATA[<p>　　通过traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。linux系统中，我们称之为traceroute,在MS Windows中为tracert。 traceroute通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。</p><span id="more"></span><p>　　在大多数情况下，我们会在linux主机系统下，直接执行命令行：<br>　　　　<code>traceroute hostname</code><br>　　而在Windows系统下是执行tracert的命令：<br>　　　　<code>tracert hostname</code></p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ traceroute [参数] [主机]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　traceroute指令让你追踪网络数据包的路由途径，预设数据包大小是40Bytes，用户可另行设置。<br>　　具体参数格式：<code>traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;...][-i&lt;网络界面&gt;][-m&lt;存活数值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主机名称或IP地址][数据包大小]</code></p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d</td><td align="left">使用Socket层级的排错功能</td></tr><tr><td align="left">-f</td><td align="left">设置第一个检测数据包的存活数值TTL的大小</td></tr><tr><td align="left">-F</td><td align="left">设置勿离断位</td></tr><tr><td align="left">-g</td><td align="left">设置来源路由网关，最多可设置8个</td></tr><tr><td align="left">-i</td><td align="left">使用指定的网络界面送出数据包</td></tr><tr><td align="left">-I</td><td align="left">使用ICMP回应取代UDP资料信息</td></tr><tr><td align="left">-m</td><td align="left">设置检测数据包的最大存活数值TTL的大小</td></tr><tr><td align="left">-n</td><td align="left">直接使用IP地址而非主机名称</td></tr><tr><td align="left">-p</td><td align="left">设置UDP传输协议的通信端口</td></tr><tr><td align="left">-r</td><td align="left">忽略普通的Routing Table，直接将数据包送到远端主机上</td></tr><tr><td align="left">-s</td><td align="left">设置本地主机送出数据包的IP地址</td></tr><tr><td align="left">-t</td><td align="left">设置检测数据包的TOS数值</td></tr><tr><td align="left">-v</td><td align="left">详细显示指令的执行过程</td></tr><tr><td align="left">-w</td><td align="left">设置等待远端主机回报的时间</td></tr><tr><td align="left">-x</td><td align="left">开启或关闭数据包的正确性检验</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：traceroute 用法简单、最常用的用法</strong></p><pre><code class="bash">$ traceroute yelog.github.comtraceroute to yelog.github.com (151.101.192.133), 30 hops max, 60 byte packets 1  vrouter (192.168.0.1)  0.443 ms  0.565 ms  0.684 ms 2  112.208.32.1.pldt.net (112.208.32.1)  14.518 ms  22.454 ms  23.080 ms 3  119.93.255.197 (119.93.255.197)  24.492 ms  25.380 ms  26.328 ms 4  210.213.131.66.static.pldt.net (210.213.131.66)  29.942 ms 210.213.131.70.static.pldt.net (210.213.131.70)  28.209 ms  28.992 ms 5  122.2.175.30.static.pldt.net (122.2.175.30)  32.429 ms  32.765 ms 210.213.128.29.static.pldt.net (210.213.128.29)  35.165 ms 6  210.213.130.162.static.pldt.net (210.213.130.162)  32.147 ms  31.403 ms  32.107 ms 7  las-b3-link.telia.net (62.115.13.128)  198.546 ms  190.829 ms  191.039 ms 8  las-b21-link.telia.net (213.155.131.82)  194.301 ms las-b21-link.telia.net (62.115.116.179)  191.927 ms las-b21-link.telia.net (213.155.131.84)  194.433 ms 9  * * *10  * * *</code></pre><blockquote><p><strong>说明：</strong><br>　　记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 4 <a href="http://www.58.com/">www.58.com</a> ，表示向每个网关发送4个数据包。<br>　　有时我们traceroute 一台主机时，会看到有一些行是以星号表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。<br>　　有时我们在某一网关处延时比较长，有可能是某台网关比较阻塞，也可能是物理设备本身的原因。当然如果某台DNS出现问题时，不能解析主机名、域名时，也会 有延时长的现象；您可以加-n 参数来避免DNS解析，以IP格式输出数据。<br>　　如果在局域网中的不同网段之间，我们可以通过traceroute 来排查问题所在，是主机的问题还是网关的问题。如果我们通过远程来访问某台服务器遇到问题时，我们用到traceroute 追踪数据包所经过的网关，提交IDC服务商，也有助于解决问题；但目前看来在国内解决这样的问题是比较困难的，就是我们发现问题所在，IDC服务商也不可能帮助我们解决。</p></blockquote><p><strong><code>例二</code>：跳数设置</strong></p><pre><code class="bash">$ traceroute -m 10 www.baidu.com</code></pre><p><strong><code>例三</code>：显示IP地址，不查主机名</strong></p><pre><code class="bash">$ traceroute -n www.baidu.com</code></pre><p><strong><code>例四</code>：探测包使用的基本UDP端口设置6888</strong></p><pre><code class="bash">$ traceroute -p 6888 www.baidu.com</code></pre><p><strong><code>例五</code>：把探测包的个数设置为值4</strong></p><pre><code class="bash">$ traceroute -q 4 www.baidu.com</code></pre><p><strong><code>例六</code>：绕过正常的路由表，直接发送到网络相连的主机</strong></p><pre><code class="bash">$ traceroute -r www.baidu.com</code></pre><p><strong><code>例七</code>：把对外发探测包的等待响应时间设置为3秒</strong></p><pre><code class="bash">$ traceroute -w 3 www.baidu.com</code></pre><blockquote><p><strong>Traceroute的工作原理</strong><br>　　Traceroute最简单的基本用法是：traceroute hostname<br>　　Traceroute程序的设计是利用ICMP及IP header的TTL（Time To Live）栏位（field）。首先，traceroute送出一个TTL是1的IP datagram（其实，每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器（router）收到这个datagram时，它将TTL减1。此时，TTL变为0了，所以该路由器会将此datagram丢掉，并送回一个「ICMP time exceeded」消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着traceroute 再送出另一个TTL是2 的datagram，发现第2 个路由器…… traceroute 每次将送出的datagram的TTL 加1来发现另一个路由器，这个重复的动作一直持续到某个datagram 抵达目的地。当datagram到达目的地后，该主机并不会送回ICMP time exceeded消息，因为它已是目的地了，那么traceroute如何得知目的地到达了呢？<br>　　Traceroute在送出UDP datagrams到目的地时，它所选择送达的port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当traceroute 收到这个消息时，便知道目的地已经到达了。所以traceroute 在Server端也是没有所谓的Daemon 程式。<br>　　Traceroute提取发 ICMP TTL到期消息设备的IP地址并作域名解析。每次 ，Traceroute都打印出一系列数据,包括所经过的路由设备的域名及 IP地址,三个包每次来回所花时间。</p></blockquote><h3 id="windows之tracert"><a href="#windows之tracert" class="headerlink" title="windows之tracert"></a>windows之tracert</h3><blockquote><p><strong>格式：</strong></p></blockquote><pre><code class="bash">$ tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout] target_name</code></pre><blockquote><p><strong>参数说明</strong><br>　　tracert [-d] [-h maximum_hops] [-j computer-list] [-w timeout] target_name<br>　　该诊断实用程序通过向目的地发送具有不同生存时间 (TL) 的 Internet 控制信息协议 (CMP) 回应报文，以确定至目的地的路由。路径上的每个路由器都要在转发该 ICMP 回应报文之前将其 TTL 值至少减 1，因此 TTL 是有效的跳转计数。当报文的 TTL 值减少到 0 时，路由器向源系统发回 ICMP 超时信息。通过发送 TTL 为 1 的第一个回应报文并且在随后的发送中每次将 TTL 值加 1，直到目标响应或达到最大 TTL 值，Tracert 可以确定路由。通过检查中间路由器发发回的 ICMP 超时 (ime Exceeded) 信息，可以确定路由器。注意，有些路由器“安静”地丢弃生存时间 (TLS) 过期的报文并且对 tracert 无效。<br><strong>参数：</strong><br>-d 指定不对计算机名解析地址。<br>-h maximum_hops 指定查找目标的跳转的最大数目。<br>-jcomputer-list 指定在 computer-list 中松散源路由。<br>-w timeout 等待由 timeout 对每个应答指定的毫秒数。<br>target_name 目标计算机的名称。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（39）: ping</title>
      <link href="/2017/01/08/linux-command-39-ping/"/>
      <url>/2017/01/08/linux-command-39-ping/</url>
      
        <content type="html"><![CDATA[<p>　　Linux系统的ping命令是常用的网络命令，它通常用来测试与目标主机的连通性，我们经常会说“ping一下某机器，看是不是开着”、不能打开网页时会说“你先ping网关地址192.168.1.1试试”。它通过发送ICMP ECHO_REQUEST数据包到网络主机（send ICMP ECHO_REQUEST to network hosts），并显示响应情况，这样我们就可以根据它输出的信息来确定目标主机是否可访问（但这不是绝对的）。有些服务器为了防止通过ping探测到，通过防火墙设置了禁止ping或者在内核参数中禁止ping，这样就不能通过ping确定该主机是否还处于开启状态。<br>  <span id="more"></span><br>　　linux下的ping和windows下的ping稍有区别,linux下ping不会自动终止,需要按ctrl+c终止或者用参数-c指定要求完成的回应次数。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ ping [参数] [主机名或IP地址]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>  ping命令用于：确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络。如果主机正在运行并连在网上，它就对回送信号进行响应。每个回送信号请求包含一个网际协议（IP）和 ICMP 头，后面紧跟一个 tim 结构，以及来填写这个信息包的足够的字节。缺省情况是连续发送回送信号请求直到接收到中断信号（Ctrl-C）。<br>  ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和(信息)包丢失情况的统计信息，并且在完成之后显示一个简要总结。ping 命令在程序超时或当接收到 SIGINT 信号时结束。Host 参数或者是一个有效的主机名或者是因特网地址。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d</td><td align="left">使用Socket的SO_DEBUG功能</td></tr><tr><td align="left">-f</td><td align="left">极限检测。大量且快速地送网络封包给一台机器，看它的回应</td></tr><tr><td align="left">-n</td><td align="left">只输出数值</td></tr><tr><td align="left">-q</td><td align="left">不显示任何传送封包的信息，只显示最后的结果</td></tr><tr><td align="left">-r</td><td align="left">忽略普通的Routing Table，直接将数据包送到远端主机上。通常是查看本机的网络接口是否有问题</td></tr><tr><td align="left">-R</td><td align="left">记录路由过程</td></tr><tr><td align="left">-v</td><td align="left">详细显示指令的执行过程</td></tr><tr><td align="left"><p>-c 数目</td><td align="left">在发送指定数目的包后停止</td></tr><tr><td align="left">-i 秒数</td><td align="left">设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次</td></tr><tr><td align="left">-I 网络界面</td><td align="left">使用指定的网络界面送出数据包</td></tr><tr><td align="left">-l 前置载入</td><td align="left">设置在送出要求信息之前，先行发出的数据包</td></tr><tr><td align="left">-p 范本样式</td><td align="left">设置填满数据包的范本样式</td></tr><tr><td align="left">-s 字节数</td><td align="left">指定发送的数据字节数，预设值是56，加上8字节的ICMP头，一共是64ICMP数据字节</td></tr><tr><td align="left">-t 存活数值</td><td align="left">设置存活数值TTL的大小</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：ping通的情况</strong></p><pre><code class="bash">$ ping 192.168.0.1PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.238 ms64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.202 ms64 bytes from 192.168.0.1: icmp_seq=3 ttl=64 time=0.232 ms64 bytes from 192.168.0.1: icmp_seq=4 ttl=64 time=0.210 ms--- 192.168.0.1 ping statistics ---6 packets transmitted, 6 received, 0% packet loss, time 4997ms</code></pre><p><strong><code>例二</code>：ping不通的情况</strong></p><pre><code class="bash">$ ping 192.168.0.222PING 192.168.0.222 (192.168.0.222) 56(84) bytes of data.From 192.168.0.101 icmp_seq=1 Destination Host UnreachableFrom 192.168.0.101 icmp_seq=2 Destination Host UnreachableFrom 192.168.0.101 icmp_seq=3 Destination Host Unreachable--- 192.168.0.222 ping statistics ---7 packets transmitted, 0 received, +6 errors, 100% packet loss, time 6032mspipe 3</code></pre><p><strong><code>例二</code>：ping指定次数</strong></p><pre><code class="bash">$ ping -c 192.168.0.1</code></pre><p><strong><code>例三</code>：时间间隔和次数限制的ping</strong></p><pre><code class="bash">$ ping -c 10 -i 0.5 192.168.120.206</code></pre><p><strong><code>例四</code>：通过域名ping公网上的站点</strong></p><pre><code class="bash">$ ping -c 5 yelog.github.com</code></pre><p><strong><code>例五</code>：多参数使用</strong></p><pre><code class="bash"># -i 3 发送周期为 3秒 -s 设置发送包的大小为1024 -t 设置TTL值为 255$ ping -i 3 -s 1024 -t yelog.github.comPING github.map.fastly.net (151.101.192.133) 1024(1052) bytes of data.1032 bytes from 151.101.192.133 (151.101.192.133): icmp_seq=1 ttl=56 time=191 ms1032 bytes from 151.101.192.133 (151.101.192.133): icmp_seq=2 ttl=56 time=190 ms1032 bytes from 151.101.192.133 (151.101.192.133): icmp_seq=3 ttl=56 time=189 ms1032 bytes from 151.101.192.133 (151.101.192.133): icmp_seq=4 ttl=56 time=190 ms</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（38）: route</title>
      <link href="/2017/01/07/linux-command-38-route/"/>
      <url>/2017/01/07/linux-command-38-route/</url>
      
        <content type="html"><![CDATA[<p>　　Linux系统的route命令用于显示和操作IP路由表（show &#x2F; manipulate the IP routing table）。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在&#x2F;etc&#x2F;rc.local中添加route命令来保证该路由设置永久有效。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">route [-f] [-p] [Command [Destination] [mask Netmask] [Gateway] [metric Metric]] [if Interface]]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　Route命令是用于操作基于内核ip路由表，它的主要作用是创建一个静态路由让指定一个主机或者一个网络通过一个网络接口，如eth0。当使用”add”或者”del”参数时，路由表被修改，如果没有参数，则显示路由表当前的内容。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">显示更多信息</td></tr><tr><td align="left">-n</td><td align="left">不解析名字</td></tr><tr><td align="left">-v</td><td align="left">显示详细的处理信息</td></tr><tr><td align="left">-F</td><td align="left">显示发送信息</td></tr><tr><td align="left">-C</td><td align="left">显示路由缓存</td></tr><tr><td align="left">-f</td><td align="left">清除所有网关入口的路由表</td></tr><tr><td align="left">-p 与 add 命令</td><td align="left">-p 与 add 命令一起使用时使路由具有永久性。</td></tr><tr><td align="left">add</td><td align="left">添加一条新路由</td></tr><tr><td align="left">del</td><td align="left">删除一条路由</td></tr><tr><td align="left">-net</td><td align="left">目标地址是一个网络</td></tr><tr><td align="left">-host</td><td align="left">目标地址是一个主机</td></tr><tr><td align="left">netmask</td><td align="left">当添加一个网络路由时，需要使用网络掩码</td></tr><tr><td align="left">gw</td><td align="left">路由数据包通过网关。注意，你指定的网关必须能够达到</td></tr><tr><td align="left">metric</td><td align="left">设置路由跳数</td></tr><tr><td align="left">Command</td><td align="left">指定您想运行的命令 (Add&#x2F;Change&#x2F;Delete&#x2F;Print)</td></tr><tr><td align="left">Destination</td><td align="left">指定该路由的网络目标</td></tr><tr><td align="left">mask Netmask</td><td align="left">指定与网络目标相关的网络掩码（也被称作子网掩码）</td></tr><tr><td align="left">Gateway</td><td align="left">指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址</td></tr><tr><td align="left">metric Metric</td><td align="left">为路由指定一个整数成本值标（从 1 至 9999），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用</td></tr><tr><td align="left">if Interface</td><td align="left">为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进制值进行接口索引</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示当前路由</strong></p><pre><code class="bash">$ route$ route -n</code></pre><pre><code class="bash">[root@localhost ~]# routeKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface192.168.120.0   *               255.255.255.0   U     0      0        0 eth0e192.168.0.0     192.168.120.1   255.255.0.0     UG    0      0        0 eth010.0.0.0        192.168.120.1   255.0.0.0       UG    0      0        0 eth0default         192.168.120.240 0.0.0.0         UG    0      0        0 eth0[root@localhost ~]# route -nKernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface192.168.120.0   0.0.0.0         255.255.255.0   U     0      0        0 eth0192.168.0.0     192.168.120.1   255.255.0.0     UG    0      0        0 eth010.0.0.0        192.168.120.1   255.0.0.0       UG    0      0        0 eth00.0.0.0         192.168.120.240 0.0.0.0         UG    0      0        0 eth0</code></pre><blockquote><p><strong>说明：</strong><br>　　第一行表示主机所在网络的地址为192.168.120.0，若数据传送目标是在本局域网内通信，则可直接通过eth0转发数据包;<br>　　第四行表示数据传送目的是访问Internet，则由接口eth0，将数据包发送到网关192.168.120.240<br>　　其中Flags为路由标志，标记当前网络节点的状态。<br>　　Flags标志说明：<br>　　U Up表示此路由当前为启动状态<br>　　H Host，表示此网关为一主机<br>　　G Gateway，表示此网关为一路由器<br>　　R Reinstate Route，使用动态路由重新初始化的路由<br>　　D Dynamically,此路由是动态性地写入<br>　　M Modified，此路由是由路由守护程序或导向器动态修改<br>　　! 表示此路由当前为关闭状态<br><strong>备注：</strong><br>　　route -n (-n 表示不解析名字,列出速度会比route 快)</p></blockquote><p><strong><code>例二</code>：添加网关&#x2F;设置网关</strong></p><pre><code class="bash"># 增加一条 到达244.0.0.0的路由$ route add -net 224.0.0.0 netmask 240.0.0.0 dev eth0</code></pre><p><strong><code>例三</code>：屏蔽一条路由</strong></p><pre><code class="bash"># 增加一条屏蔽的路由，目的地址为 224.x.x.x 将被拒绝$ route add -net 224.0.0.0 netmask 240.0.0.0 reject</code></pre><p><strong><code>例四</code>：删除路由记录</strong></p><pre><code class="bash">$ route del -net 224.0.0.0 netmask 240.0.0.0$ route del -net 224.0.0.0 netmask 240.0.0.0 reject</code></pre><p><strong><code>例五</code>：删除和添加设置默认网关</strong></p><pre><code class="bash">$ route del default gw 192.168.120.240$ route add default gw 192.168.120.240</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（37）: ifconfig</title>
      <link href="/2017/01/06/linux-command-37-ifconfig/"/>
      <url>/2017/01/06/linux-command-37-ifconfig/</url>
      
        <content type="html"><![CDATA[<p>　　许多windows非常熟悉ipconfig命令行工具，它被用来获取网络接口配置信息并对此进行修改。Linux系统拥有一个类似的工具，也就是ifconfig(interfaces config)。通常需要以root身份登录或使用sudo以便在Linux机器上使用ifconfig工具。依赖于ifconfig命令中使用一些选项属性，ifconfig工具不仅可以被用来简单地获取网络接口配置信息，还可以修改这些配置。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ ifconfig [网络设备] [参数]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。</p><blockquote><p><strong>注意：</strong>  用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。</p></blockquote><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">up</td><td align="left">启动指定网络设备&#x2F;网卡</td></tr><tr><td align="left">down</td><td align="left">关闭指定网络设备&#x2F;网卡。该参数可以有效地阻止通过指定接口的IP信息流，如果想永久地关闭一个接口，我们还需要从核心路由表中将该接口的路由信息全部删除</td></tr><tr><td align="left">arp</td><td align="left">设置指定网卡是否支持ARP协议</td></tr><tr><td align="left">-promisc</td><td align="left">设置是否支持网卡的promiscuous模式，如果选择此参数，网卡将接收网络中发给它所有的数据包</td></tr><tr><td align="left">-allmulti</td><td align="left">设置是否支持多播模式，如果选择此参数，网卡将接收网络中所有的多播数据包</td></tr><tr><td align="left">-a</td><td align="left">显示全部接口信息</td></tr><tr><td align="left">-s</td><td align="left">显示摘要信息（类似于 netstat -i）</td></tr><tr><td align="left">add</td><td align="left">给指定网卡配置IPv6地址</td></tr><tr><td align="left">del</td><td align="left">删除指定网卡的IPv6地址</td></tr><tr><td align="left">&lt;硬件地址&gt;</td><td align="left">配置网卡最大的传输单元</td></tr><tr><td align="left">mtu&lt;字节数&gt;</td><td align="left">设置网卡的最大传输单元 (bytes)</td></tr><tr><td align="left">netmask&lt;子网掩码&gt;</td><td align="left">设置网卡的子网掩码。掩码可以是有前缀0x的32位十六进制数，也可以是用点分开的4个十进制数。如果不打算将网络分成子网，可以不管这一选项；如果要使用子网，那么请记住，网络中每一个系统必须有相同子网掩码</td></tr><tr><td align="left">tunel</td><td align="left">建立隧道</td></tr><tr><td align="left">dstaddr</td><td align="left">设定一个远端地址，建立点对点通信</td></tr><tr><td align="left">-broadcast&lt;地址&gt;</td><td align="left">为指定网卡设置广播协议</td></tr><tr><td align="left">-pointtopoint&lt;地址&gt;</td><td align="left">为网卡设置点对点通讯协议</td></tr><tr><td align="left">multicast</td><td align="left">为网卡设置组播标志</td></tr><tr><td align="left">address</td><td align="left">为网卡设置IPv4地址</td></tr><tr><td align="left">txqueuelen&lt;长度&gt;</td><td align="left">为网卡设置传输列队的长度</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示网络设备信息（激活状态的）</strong></p><pre><code class="bash">$ ifconfig</code></pre><blockquote><p><strong>说明：</strong><br>　　eth0 表示第一块网卡， 其中 HWaddr 表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是 00:50:56:BF:26:20<br>　　inet addr 用来表示网卡的IP地址，此网卡的 IP地址是 192.168.120.204，广播地址， Bcast:192.168.120.255，掩码地址Mask:255.255.255.0<br>　　lo 是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 HTTPD服务器的指定到回坏地址，在浏览器输入 127.0.0.1 就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。<br>　　第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）<br>　　第二行：网卡的IP地址、子网、掩码<br>　　第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节<br>　　第四、五行：接收、发送数据包情况统计<br>　　第七行：接收、发送数据字节数统计信息。</p></blockquote><p><strong><code>例二</code>：启动关闭指定网卡</strong></p><pre><code class="bash"># 启动eth0网卡$ ifconfig eth0 up# 关闭eth0网卡$ ifconfig eth0 down</code></pre><blockquote><p><strong>注意：</strong> ssh登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡。</p></blockquote><p><strong><code>例三</code>：为网卡配置和删除IPv6地址</strong></p><pre><code class="bash"># 配置IPv6的地址$ ifconfig eth0 add 33ffe:3240:800:1005::2/64# 删除IPv6的地址$ ifconfig eth0 del 33ffe:3240:800:1005::2/64</code></pre><p><strong><code>例四</code>：用ifconfig修改MAC地址</strong></p><pre><code class="bash">$ ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE</code></pre><p><strong><code>例五</code>：配置IP地址</strong></p><pre><code class="bash"># 配置ip$ ifconfig eth0 192.168.120.56# 配置ip和掩码地址$ ifconfig eth0 192.168.120.56 netmask 255.255.255.0# 配置ip、掩码地址和广播地址$ ifconfig eth0 192.168.120.56 netmask 255.255.255.0 broadcast 192.168.120.255</code></pre><p><strong><code>例六</code>：启用和关闭ARP协议</strong></p><pre><code class="bash"># 启用eth0的ARP协议$ ifconfig eth0 arp# 关闭eth0的ARP协议$ ifconfig eth0 -arp</code></pre><p><strong><code>例七</code>：设置最大传输单元</strong></p><pre><code class="bash"># 设置能通过的最大数据包大小为 1500 bytes$ ifconfig eth0 mtu 1500</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（36）: lsof</title>
      <link href="/2017/01/05/linux-command-36-lsof/"/>
      <url>/2017/01/05/linux-command-36-lsof/</url>
      
        <content type="html"><![CDATA[<p>　　lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ lsof [参数][文件]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回&#x2F;恢复删除的文件。是十分方便的系统监视工具，因为 lsof 需要访问核心内存和各种文件，所以需要root用户执行。<br>lsof打开的文件可以是：</p><ol><li>普通文件</li><li>目录</li><li>网络文件系统的文件</li><li>字符或设备文件</li><li>(函数)共享库</li><li>管道，命名管道</li><li>符号链接</li><li>网络文件（例如：NFS file、网络socket，unix域名socket）</li><li>还有其它类型的文件，等等</li></ol><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">列出打开文件存在的进程</td></tr><tr><td align="left">-c&lt;进程名&gt;</td><td align="left">列出指定进程所打开的文件</td></tr><tr><td align="left">-g</td><td align="left">列出GID号进程详情</td></tr><tr><td align="left">-d&lt;文件号&gt;</td><td align="left">列出占用该文件号的进程</td></tr><tr><td align="left">+d&lt;目录&gt;</td><td align="left">列出目录下被打开的文件</td></tr><tr><td align="left">+D&lt;目录&gt;</td><td align="left">递归列出目录下被打开的文件</td></tr><tr><td align="left">-n&lt;目录&gt;</td><td align="left">列出使用NFS的文件</td></tr><tr><td align="left">-i&lt;条件&gt;</td><td align="left">列出符合条件的进程。（4、6、协议、:端口、 @ip ）</td></tr><tr><td align="left">-p&lt;进程号&gt;</td><td align="left">列出指定进程号所打开的文件</td></tr><tr><td align="left">-u</td><td align="left">列出UID号进程详情</td></tr><tr><td align="left">-h</td><td align="left">显示帮助信息</td></tr><tr><td align="left">-v</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：无任何参数</strong></p><pre><code class="bash">$ lsofCOMMAND     PID USER   FD      TYPE             DEVICE     SIZE       NODE NAMEinit          1 root  cwd       DIR                8,2     4096          2 /init          1 root  rtd       DIR                8,2     4096          2 /init          1 root  txt       REG                8,2    43496    6121706 /sbin/initinit          1 root  mem       REG                8,2   143600    7823908 /lib64/ld-2.5.soinit          1 root  mem       REG                8,2  1722304    7823915 /lib64/libc-2.5.soinit          1 root  mem       REG                8,2    23360    7823919 /lib64/libdl-2.5.soinit          1 root  mem       REG                8,2    95464    7824116 /lib64/libselinux.so.1init          1 root  mem       REG                8,2   247496    7823947 /lib64/libsepol.so.1init          1 root   10u     FIFO               0,17                1233 /dev/initctlmigration     2 root  cwd       DIR                8,2     4096          2 /migration     2 root  rtd       DIR                8,2     4096          2 /migration     2 root  txt   unknown                                        /proc/2/exeksoftirqd     3 root  cwd       DIR                8,2     4096          2 /ksoftirqd     3 root  rtd       DIR                8,2     4096          2 /ksoftirqd     3 root  txt   unknown                                        /proc/3/exemigration     4 root  cwd       DIR                8,2     4096          2 /migration     4 root  rtd       DIR                8,2     4096          2 /migration     4 root  txt   unknown                                        /proc/4/exeksoftirqd     5 root  cwd       DIR                8,2     4096          2 /ksoftirqd     5 root  rtd       DIR                8,2     4096          2 /ksoftirqd     5 root  txt   unknown                                        /proc/5/exeevents/0      6 root  cwd       DIR                8,2     4096          2 /events/0      6 root  rtd       DIR                8,2     4096          2 /events/0      6 root  txt   unknown                                        /proc/6/exeevents/1      7 root  cwd       DIR                8,2     4096          2 /</code></pre><blockquote><p><strong>说明：</strong><br>lsof输出各列信息的意义如下：<br>COMMAND：进程的名称<br>PID：进程标识符<br>PPID：父进程标识符（需要指定-R参数）<br>USER：进程所有者<br>PGID：进程所属组<br>FD：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等<br>（1）cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改<br>（2）txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 &#x2F;sbin&#x2F;init 程序<br>（3）lnn：library references (AIX);<br>（4）er：FD information error (see NAME column);<br>（5）jld：jail directory (FreeBSD);<br>（6）ltx：shared library text (code and data);<br>（7）mxx ：hex memory-mapped type number xx.<br>（8）m86：DOS Merge mapped file;<br>（9）mem：memory-mapped file;<br>（10）mmap：memory-mapped device;<br>（11）pd：parent directory;<br>（12）rtd：root directory;<br>（13）tr：kernel trace file (OpenBSD);<br>（14）v86  VP&#x2F;ix mapped file;<br>（15）0：表示标准输出<br>（16）1：表示标准输入<br>（17）2：表示标准错误<br>一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等<br>（1）u：表示该文件被打开并处于读取&#x2F;写入模式<br>（2）r：表示该文件被打开并处于只读模式<br>（3）w：表示该文件被打开并处于<br>（4）空格：表示该文件的状态模式为unknow，且没有锁定<br>（5）-：表示该文件的状态模式为unknow，且被锁定<br>同时在文件状态模式后面，还跟着相关的锁<br>（1）N：for a Solaris NFS lock of unknown type;<br>（2）r：for read lock on part of the file;<br>（3）R：for a read lock on the entire file;<br>（4）w：for a write lock on part of the file;（文件的部分写锁）<br>（5）W：for a write lock on the entire file;（整个文件的写锁）<br>（6）u：for a read and write lock of any length;<br>（7）U：for a lock of unknown type;<br>（8）x：for an SCO OpenServer Xenix lock on part      of the file;<br>（9）X：for an SCO OpenServer Xenix lock on the      entire file;<br>（10）space：if there is no lock.<br>TYPE：文件类型，如DIR、REG等，常见的文件类型<br>（1）DIR：表示目录<br>（2）CHR：表示字符类型<br>（3）BLK：块设备类型<br>（4）UNIX： UNIX 域套接字<br>（5）FIFO：先进先出 (FIFO) 队列<br>（6）IPv4：网际协议 (IP) 套接字<br>DEVICE：指定磁盘的名称<br>SIZE：文件的大小<br>NODE：索引节点（文件在磁盘上的标识）<br>NAME：打开文件的确切名称</p></blockquote><p><strong><code>例二</code>：查看谁正在使用某个文件，也就是说查找某个文件相关的进程</strong></p><pre><code class="bash">$ lsof /bin/bashCOMMAND   PID USER  FD   TYPE DEVICE   SIZE    NODE NAMEbash    24159 root txt    REG    8,2 801528 5368780 /bin/bashbash    24909 root txt    REG    8,2 801528 5368780 /bin/bashbash    24941 root txt    REG    8,2 801528 5368780 /bin/bash</code></pre><p><strong><code>例三</code>：递归查看某个目录的文件信息</strong></p><pre><code class="bash">$ lsof test/test3COMMAND   PID USER   FD   TYPE DEVICE SIZE    NODE NAMEbash    24941 root  cwd    DIR    8,2 4096 2258872 test/test3vi      24976 root  cwd    DIR    8,2 4096 2258872 test/test3</code></pre><blockquote><p><strong>说明：</strong> 使用了+D，对应目录下的所有子目录和文件都会被列出</p></blockquote><p><strong><code>例四</code>：不使用+D选项，遍历查看某个目录的所有文件信息的方法</strong></p><pre><code class="bash">$ lsof |grep &#39;test/test3&#39;</code></pre><p><strong><code>例五</code>：列出某个用户打开的文件信息</strong></p><pre><code class="bash"># -u 选项，u其实是user的缩写$ lsof -u username</code></pre><p><strong><code>例六</code>：列出某个程序进程所打开的文件信息</strong></p><pre><code class="bash">$ lsof -c mysql</code></pre><blockquote><p><strong>说明：</strong>-c 选项将会列出所有以mysql这个进程开头的程序的文件，其实你也可以写成 lsof | grep mysql, 但是第一种方法明显比第二种方法要少打几个字符了</p></blockquote><p><strong><code>例七</code>：列出多个进程多个打开的文件信息</strong></p><pre><code class="bash">$ lsof -c mysql -c apache</code></pre><p><strong><code>例八</code>：列出某个用户以及某个进程所打开的文件信息</strong></p><pre><code class="bash">$ lsof  -u test -c mysql</code></pre><p><strong><code>例九</code>：列出除了某个用户外的被打开的文件信息</strong></p><pre><code class="bash"># ^这个符号在用户名之前，将会把是root用户打开的进程不让显示$ lsof -u ^root</code></pre><p><strong><code>例十</code>：通过某个进程号显示该进行打开的文件</strong></p><pre><code class="bash">$ lsof -p 1</code></pre><p><strong><code>例十一</code>：列出多个进程号对应的文件信息</strong></p><pre><code class="bash">$ lsof -p 1,2,3</code></pre><p><strong><code>例十二</code>：列出除了某个进程号，其他进程号所打开的文件信息</strong></p><pre><code class="bash">$ lsof -p ^1</code></pre><p><strong><code>例十三</code>：列出所有的网络连接</strong></p><pre><code class="bash">$ lsof -i</code></pre><p><strong><code>例十四</code>：列出所有tcp 网络连接信息</strong></p><pre><code class="bash">$ lsof -i tcp</code></pre><p><strong><code>例十五</code>：列出所有udp网络连接信息</strong></p><pre><code class="bash">$ lsof -i udp</code></pre><p><strong><code>例十六</code>：列出谁在使用某个端口</strong></p><pre><code class="bash">$ lsof -i :3306</code></pre><p><strong><code>例十七</code>：列出谁在使用某个特定的udp&#x2F;tcp端口</strong></p><pre><code class="bash">$ lsof -i udp:55$ lsof -i tcp:80</code></pre><p><strong><code>例十八</code>：列出某个用户的所有活跃的网络端口</strong></p><pre><code class="bash">$ lsof -a -u test -i</code></pre><p><strong><code>例十九</code>：列出所有网络文件系统</strong></p><pre><code class="bash">$ lsof -N</code></pre><p><strong><code>例二十</code>：域名socket文件</strong></p><pre><code class="bash">$ lsof -u</code></pre><p><strong><code>例二十一</code>：某个用户组所打开的文件信息</strong></p><pre><code class="bash">$ lsof -g 5555</code></pre><p><strong><code>例二十二</code>：根据文件描述列出对应的文件信息</strong></p><pre><code class="bash">$ lsof -d description(like 2)例如：lsof  -d  txt例如：lsof  -d  1例如：lsof  -d  2</code></pre><blockquote><p><strong>说明：</strong><br>0表示标准输入，1表示标准输出，2表示标准错误，从而可知：所以大多数应用程序所打开的文件的 FD 都是从 3 开始</p></blockquote><p><strong><code>例二十三</code>：根据文件描述范围列出文件信息</strong></p><pre><code class="bash">$ lsof -d 2-3</code></pre><p><strong><code>例二十四</code>：列出COMMAND列中包含字符串” sshd”，且文件描符的类型为txt的文件信息</strong></p><pre><code class="bash">$ lsof -c sshd -a -d txt</code></pre><p><strong><code>例二十五</code>：列出被进程号为1234的进程所打开的所有IPV4 network files</strong></p><pre><code class="bash">$ lsof -i 4 -a -p 1234</code></pre><p><strong><code>例二十六</code>：列出目前连接主机peida.linux上端口为：20，21，22，25，53，80相关的所有文件信息，且每隔3秒不断的执行lsof指令</strong></p><pre><code class="bash">$ lsof -i @peida.linux:20,21,22,25,53,80  -r  3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（35）: iostat</title>
      <link href="/2017/01/04/linux-command-35-iostat/"/>
      <url>/2017/01/04/linux-command-35-iostat/</url>
      
        <content type="html"><![CDATA[<p>　　Linux系统中的 iostat是I&#x2F;O statistics（输入&#x2F;输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。iostat属于sysstat软件包。可以用yum install sysstat 直接安装。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ iostat [参数][时间][次数]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　通过iostat方便查看CPU、网卡、tty设备、磁盘、CD-ROM 等等设备的活动情况,负载信息。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-C</td><td align="left">显示CPU使用情况</td></tr><tr><td align="left">-d</td><td align="left">显示磁盘使用情况</td></tr><tr><td align="left">-k</td><td align="left">以 KB 为单位显示</td></tr><tr><td align="left">-m</td><td align="left">以 M 为单位显示</td></tr><tr><td align="left">-N</td><td align="left">显示磁盘阵列(LVM) 信息</td></tr><tr><td align="left">-n</td><td align="left">显示 NFS 使用情况</td></tr><tr><td align="left">-p[磁盘]</td><td align="left">显示磁盘和分区的情况</td></tr><tr><td align="left">-t</td><td align="left">显示终端和CPU的信息</td></tr><tr><td align="left">-x</td><td align="left">显示详细信息</td></tr><tr><td align="left">-V</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示所有设备负载情况</strong></p><pre><code class="bash">$ iostatLinux 3.10.0-327.el7.x86_64 (s88) 2017年01月22日 _x86_64_(24 CPU)avg-cpu:  %user   %nice %system %iowait  %steal   %idle           0.62    0.00    0.20    1.46    0.00   97.72Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtnsda              64.59      1726.21       255.56    3159941     467823dm-0              3.55       141.11         4.46     258319       8162dm-1              0.10         0.83         0.00       1520          0dm-2              0.10         2.78         1.14       5080       2082dm-3             60.44      1565.98       248.84    2866640     455511dm-4             27.54       463.29       105.38     848088     192897dm-5              1.25        25.57        17.57      46804      32170dm-6              0.64        12.86         2.07      23535       3786dm-7              4.14        80.43        36.60     147240      67004dm-8              1.13        20.52         2.42      37566       4428dm-9              1.13        21.18         2.40      38766       4396dm-10             1.15        21.35         2.41      39082       4412dm-11             0.70        14.40         2.21      26355       4043dm-12             1.42        22.42         6.85      41035      12541dm-13             0.46        12.17         1.25      22275       2289dm-14             1.15        20.47         2.42      37470       4432dm-15             8.28       101.07        16.51     185018      30220dm-16             1.10        20.02         2.45      36646       4488dm-17             1.81        29.08         4.15      53232       7591dm-18             0.68        18.40         1.43      33689       2611dm-19             2.33        43.89         4.63      80340       8483</code></pre><blockquote><p><strong>说明：</strong><br><code>cpu属性值说明：</code><br>%user：CPU处在用户模式下的时间百分比。<br>%nice：CPU处在带NICE值的用户模式下的时间百分比。<br>%system：CPU处在系统模式下的时间百分比。<br>%iowait：CPU等待输入输出完成时间的百分比。<br>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。<br>%idle：CPU空闲时间百分比。<br><code>备注：</code>如果%iowait的值过高，表示硬盘存在I&#x2F;O瓶颈，%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。<br><code>disk属性值说明：</code><br>rrqm&#x2F;s:  每秒进行 merge 的读操作数目。即 rmerge&#x2F;s<br>wrqm&#x2F;s:  每秒进行 merge 的写操作数目。即 wmerge&#x2F;s<br>r&#x2F;s:  每秒完成的读 I&#x2F;O 设备次数。即 rio&#x2F;s<br>w&#x2F;s:  每秒完成的写 I&#x2F;O 设备次数。即 wio&#x2F;s<br>rsec&#x2F;s:  每秒读扇区数。即 rsect&#x2F;s<br>wsec&#x2F;s:  每秒写扇区数。即 wsect&#x2F;s<br>rkB&#x2F;s:  每秒读K字节数。是 rsect&#x2F;s 的一半，因为每扇区大小为512字节。<br>wkB&#x2F;s:  每秒写K字节数。是 wsect&#x2F;s 的一半。<br>avgrq-sz:  平均每次设备I&#x2F;O操作的数据大小 (扇区)。<br>avgqu-sz:  平均I&#x2F;O队列长度。<br>await:  平均每次设备I&#x2F;O操作的等待时间 (毫秒)。<br>svctm: 平均每次设备I&#x2F;O操作的服务时间 (毫秒)。<br>%util:  一秒中有百分之多少的时间用于 I&#x2F;O 操作，即被io消耗的cpu百分比<br><code>备注：</code>如果 %util 接近 100%，说明产生的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷，该磁盘可能存在瓶颈。如果 svctm 比较接近 await，说明 I&#x2F;O 几乎没有等待时间；如果 await 远大于 svctm，说明I&#x2F;O 队列太长，io响应太慢，则需要进行必要优化。如果avgqu-sz比较大，也表示有当量io在等待。</p></blockquote><p><strong><code>例二</code>：定时显示所有信息</strong></p><pre><code class="bash"># 每隔 2秒刷新显示，且显示3次$ iostat 2 3</code></pre><p><strong><code>例三</code>：显示指定磁盘信息</strong></p><pre><code class="bash">$ iostat -d sda1</code></pre><p><strong><code>例四</code>：显示tty和Cpu信息</strong></p><pre><code class="bash">$ iostat -t</code></pre><p><strong><code>例五</code>：以M为单位显示所有信息</strong></p><pre><code class="bash">$ iostat -m</code></pre><p><strong><code>例六</code>：查看TPS和吞吐量信息</strong></p><pre><code class="bash">$ iostat -d -k 1 1</code></pre><blockquote><p><strong>说明：</strong><br>tps：该设备每秒的传输次数（Indicate the number of transfers per second that were issued to the device.）。“一次传输”意思是“一次I&#x2F;O请求”。多个逻辑请求可能会被合并为“一次I&#x2F;O请求”。“一次传输”请求的大小是未知的。<br>kB_read&#x2F;s：每秒从设备（drive expressed）读取的数据量；<br>kB_wrtn&#x2F;s：每秒向设备（drive expressed）写入的数据量；<br>kB_read：读取的总数据量；kB_wrtn：写入的总数量数据量；<br>这些单位都为Kilobytes。<br>上面的例子中，我们可以看到磁盘sda以及它的各个分区的统计数据，当时统计的磁盘总TPS是22.73，下面是各个分区的TPS。（因为是瞬间值，所以总TPS并不严格等于各个分区TPS的总和）</p></blockquote><p><strong><code>例七</code>：查看设备使用率（%util）、响应时间（await）</strong></p><pre><code class="bash">$ iostat -d -x -k 1 1</code></pre><blockquote><p><strong>说明：</strong><br>rrqm&#x2F;s：  每秒进行 merge 的读操作数目.即 delta(rmerge)&#x2F;s<br>wrqm&#x2F;s： 每秒进行 merge 的写操作数目.即 delta(wmerge)&#x2F;s<br>r&#x2F;s：  每秒完成的读 I&#x2F;O 设备次数.即 delta(rio)&#x2F;s<br>w&#x2F;s：  每秒完成的写 I&#x2F;O 设备次数.即 delta(wio)&#x2F;s<br>rsec&#x2F;s：  每秒读扇区数.即 delta(rsect)&#x2F;s<br>wsec&#x2F;s： 每秒写扇区数.即 delta(wsect)&#x2F;s<br>rkB&#x2F;s：  每秒读K字节数.是 rsect&#x2F;s 的一半,因为每扇区大小为512字节.(需要计算)<br>wkB&#x2F;s：  每秒写K字节数.是 wsect&#x2F;s 的一半.(需要计算)<br>avgrq-sz：平均每次设备I&#x2F;O操作的数据大小 (扇区).delta(rsect+wsect)&#x2F;delta(rio+wio)<br>avgqu-sz：平均I&#x2F;O队列长度.即 delta(aveq)&#x2F;s&#x2F;1000 (因为aveq的单位为毫秒).<br>await：  平均每次设备I&#x2F;O操作的等待时间 (毫秒).即 delta(ruse+wuse)&#x2F;delta(rio+wio)<br>svctm： 平均每次设备I&#x2F;O操作的服务时间 (毫秒).即 delta(use)&#x2F;delta(rio+wio)<br>%util： 一秒中有百分之多少的时间用于 I&#x2F;O 操作,或者说一秒中有多少时间 I&#x2F;O 队列是非空的，即 delta(use)&#x2F;s&#x2F;1000 (因为use的单位为毫秒)<br>　　如果 %util 接近 100%，说明产生的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷，该磁盘可能存在瓶颈。<br>　　idle小于70% IO压力就较大了，一般读取速度有较多的wait。<br>同时可以结合vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比，高过30%时IO压力高)。<br>　　另外 await 的参数也要多和 svctm 来参考。差的过高就一定有 IO 的问题。<br>　　avgqu-sz 也是个做 IO 调优时需要注意的地方，这个就是直接每次操作的数据的大小，如果次数多，但数据拿的小的话，其实 IO 也会很小。如果数据拿的大，才IO 的数据会高。也可以通过 avgqu-sz × ( r&#x2F;s or w&#x2F;s ) &#x3D; rsec&#x2F;s or wsec&#x2F;s。也就是讲，读定速度是这个来决定的。<br>　　svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了)，svctm 的大小一般和磁盘性能有关，CPU&#x2F;内存的负荷也会对其有影响，请求过多也会间接导致 svctm 的增加。await 的大小一般取决于服务时间(svctm) 以及 I&#x2F;O 队列的长度和 I&#x2F;O 请求的发出模式。如果 svctm 比较接近 await，说明 I&#x2F;O 几乎没有等待时间；如果 await 远大于 svctm，说明 I&#x2F;O 队列太长，应用得到的响应时间变慢，如果响应时间超过了用户可以容许的范围，这时可以考虑更换更快的磁盘，调整内核 elevator 算法，优化应用，或者升级 CPU。<br>　　队列长度(avgqu-sz)也可作为衡量系统 I&#x2F;O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I&#x2F;O 洪水。<br><code>形象的比喻：</code><br>r&#x2F;s+w&#x2F;s 类似于交款人的总数<br>平均队列长度(avgqu-sz)类似于单位时间里平均排队人的个数<br>平均服务时间(svctm)类似于收银员的收款速度<br>平均等待时间(await)类似于平均每人的等待时间<br>平均I&#x2F;O数据(avgrq-sz)类似于平均每人所买的东西多少<br>I&#x2F;O 操作率 (%util)类似于收款台前有人排队的时间比例<br>　　设备IO操作:总IO(io)&#x2F;s &#x3D; r&#x2F;s(读) +w&#x2F;s(写) &#x3D;1.46 + 25.28&#x3D;26.74<br>　　平均每次设备I&#x2F;O操作只需要0.36毫秒完成,现在却需要10.57毫秒完成，因为发出的请求太多(每秒26.74个)，假如请求时同时发出的，可以这样计算平均等待时间:<br>　　平均等待时间&#x3D;单个I&#x2F;O服务器时间*(1+2+…+请求总数-1)&#x2F;请求总数<br>　　每秒发出的I&#x2F;0请求很多,但是平均队列就4,表示这些请求比较均匀,大部分处理还是比较及时。</p></blockquote><p><strong><code>例八</code>：查看cpu状态</strong></p><pre><code class="bash">$ iostat -c 1 3</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生若只如初见-《围城》</title>
      <link href="/2017/01/03/Fortress-Besieged/"/>
      <url>/2017/01/03/Fortress-Besieged/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fg0jOuF4-dBp5moIX00V4Q0X5C11.jpg" alt="围城"></p><blockquote><p>婚姻是被围困的城堡，城外的人想冲进去，城里的人想逃出来  –法国谚语</p></blockquote><span id="more"></span><p>方鸿渐对于鲍小姐，不堪抵抗；对于苏小姐的垂青，已再纠缠不清（导致方唐感情破裂的导火索）；最后与孙柔嘉的婚姻，因属于现实的无奈吧；至于唐晓芙，方对她应该有着最纯粹的爱意。</p><p>整部小说给我留下深刻印象的就是唐小姐，她在整部小说的占比是非常少的。</p><blockquote><p>总而言之，唐小姐是摩登文明社会里的那桩罕物――一个真正的女孩子。有许多都市女孩子已经是装模作样的早熟的女人，算不得孩子；有许多女孩子只是浑沌痴顽的无性别的孩子，还说不上女人。</p></blockquote><p>唐晓芙的聪明漂亮、活泼可爱，令方鸿渐一见倾心。</p><p>当初，是苏小姐的干预，激起了唐晓芙的逆反心理，不让接近我偏接近，书信往来，见面谈话，时间推移，俩人都投入了真正的感情。</p><p>作为苏的姐妹，唐晓芙骨子里也有跟苏小姐的高傲。</p><blockquote><p>方先生的过去太丰富了！我爱的人，我要能够占领他整个生命，他在碰见我以前，没有过去，留着空白等待我——</p></blockquote><p>方下定决心写信给苏撇清两人关系，苏的狭隘的心理从中挑拨导致方与唐之间的破裂</p><blockquote><p>他象一个受了责骂的孩子那样，泪水在眼睛里打转，却一句话也说不出口。</p></blockquote><p>所以当唐得知方的一些列斑斑劣迹后，愈心痛愈心恨，最后一次见方，连珠炮的发问，又恨方鸿渐为什么不辩护，她的心溶成了苦水。而方鸿渐的悲剧在于，他再次懦弱，该辩解时不辩解，该在屋外多淋雨时而过早走开，接到电话后，不问来人就大声呵斥，俩人都是好面子的人，看不到俩人为这段感情而去采取任何补救措施，而是各自松开了手。两人年轻，都不知退让，任彼此失之交臂。</p><p>从此直到最后，唐也没有再次出现。</p><p>但唐给我们的留下了一个近乎完美的形象，正是因为她没有和方走在一起，没有真实世俗的一面，才能留下那种只如初见的模样。</p><p>生活亦是如此，我们心目中的“女神”、“男神”，完美无缺的人，是那些我们曾经追求不得的人。想想若是得之，经过世俗的一面，ta的完美的形象，还会在你的心中站的稳吗。</p><blockquote><p>唐晓芙这个角色是钱老钟爱的角色，是钱老心中完美的女性形象，简单说就是女神！是围城里任何男人都配不上的，所以不舍得把她许配给任何人。</p></blockquote><div style="text-align:right;width:100%">--杨绛先生</div><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fp_ZMZN4lHRo5ojcpIn11qoATUt3.jpg" alt="钱老和杨先生"><br>《围城》写出了婚姻的一方面，但不是全部，很多人要冲进这座城，自有其道理，城中有争吵，但更有温情。愿诸位在现实生活中，相互欣赏，相敬如宾，如初见一样，相互爱戴，生活一定更加美好</p><p>在新春佳节祝大家幸福美满，阖家欢乐。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（34）: vmstat</title>
      <link href="/2017/01/03/linux-command-34-vmstat/"/>
      <url>/2017/01/03/linux-command-34-vmstat/</url>
      
        <content type="html"><![CDATA[<p>　　vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控。他是对系统的整体情况进行统计，不足之处是无法对某个进程进行深入分析。vmstat 工具提供了一种低开销的系统性能观察方式。因为 vmstat 本身就是低开销工具，在非常高负荷的服务器上，你需要查看并监控系统的健康情况,在控制窗口还是能够使用vmstat 输出结果。在学习vmstat命令前，我们先了解一下Linux系统中关于物理内存和虚拟内存相关信息。</p><span id="more"></span><h3 id="物理内存和虚拟内存区别"><a href="#物理内存和虚拟内存区别" class="headerlink" title="物理内存和虚拟内存区别"></a>物理内存和虚拟内存区别</h3><p>　　我们知道，直接从物理内存读写数据要比从硬盘读写数据要快的多，因此，我们希望所有数据的读取和写入都在内存完成，而内存是有限的，这样就引出了物理内存与虚拟内存的概念。</p><p>　　物理内存就是系统硬件提供的内存大小，是真正的内存，相对于物理内存，在linux下还有一个虚拟内存的概念，虚拟内存就是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为交换空间（Swap Space）。</p><p>　　作为物理内存的扩展，linux会在物理内存不足时，使用交换分区的虚拟内存，更详细的说，就是内核会将暂时不用的内存块信息写到交换空间，这样以来，物理内存得到了释放，这块内存就可以用于其它目的，当需要用到原始的内容时，这些信息会被重新从交换空间读入物理内存。</p><p>　　linux的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。</p><p>　　要深入了解linux内存运行机制，需要知道下面提到的几个方面：</p><p>　　首先，Linux系统会不时的进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux也会交换出暂时不用的内存页面。这可以避免等待交换所需的时间。</p><p>　　其次，linux进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，linux内核根据”最近最经常使用“算法，仅仅将一些不经常使用的页面文件交换到虚拟内存，有时我们会看到这么一个现象：linux物理内存还有很多，但是交换空间也使用了很多。其实，这并不奇怪，例如，一个占用很大内存的进程运行时，需要耗费很多内存资源，此时就会有一些不常用页面文件被交换到虚拟内存中，但后来这个占用很多内存资源的进程结束并释放了很多内存时，刚才被交换出去的页面文件并不会自动的交换进物理内存，除非有这个必要，那么此刻系统物理内存就会空闲很多，同时交换空间也在被使用，就出现了刚才所说的现象了。关于这点，不用担心什么，只要知道是怎么一回事就可以了。</p><p>　　最后，交换空间的页面在使用时会首先被交换到物理内存，如果此时没有足够的物理内存来容纳这些页面，它们又会被马上交换出去，如此以来，虚拟内存中可能没有足够空间来存储这些交换页面，最终会导致linux出现假死机、服务异常等问题，linux虽然可以在一段时间内自行恢复，但是恢复后的系统已经基本不可用了。</p><p>　　因此，合理规划和设计linux内存的使用，是非常重要的。</p><h3 id="虚拟内存原理："><a href="#虚拟内存原理：" class="headerlink" title="虚拟内存原理："></a>虚拟内存原理：</h3><p>　　在系统中运行的每个进程都需要使用到内存，但不是每个进程都需要每时每刻使用系统分配的内存空间。当系统运行所需内存超过实际的物理内存，内核会释放某些进程所占用但未使用的部分或所有物理内存，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。</p><p>　　在Linux内存管理中，主要是通过“调页Paging”和“交换Swapping”来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面保留在内存中供进程使用。交换技术是将整个进程，而不是部分页面，全部交换到磁盘上。</p><p>　　分页(Page)写入磁盘的过程被称作Page-Out，分页(Page)从磁盘重新回到内存的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中(因为已经被Page-Out了)，此时就发生了分页错误（Page Fault）。</p><p>　　当系统内核发现可运行内存变少时，就会通过Page-Out来释放一部分物理内存。经管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态亦被称作thrashing(颠簸)。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ vmstat [-a] [-n] [-S unit] [delay [ count]]$ vmstat [-s] [-n] [-S unit]$ vmstat [-m] [-n] [delay [ count]]$ vmstat [-d] [-n] [delay [ count]]$ vmstat [-p disk partition] [-n] [delay [ count]]$ vmstat [-f]$ vmstat [-V]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用来显示虚拟内存的信息</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">显示活跃和非活跃内存</td></tr><tr><td align="left">-f</td><td align="left">显示从系统启动至今的fork数量</td></tr><tr><td align="left">-m</td><td align="left">显示slabinfo</td></tr><tr><td align="left">-n</td><td align="left">只在开始时显示一次各字段名称</td></tr><tr><td align="left">-s</td><td align="left">显示内存相关统计信息及多种系统活动数量</td></tr><tr><td align="left">delay</td><td align="left">刷新时间间隔。如果不指定，只显示一条结果</td></tr><tr><td align="left">count</td><td align="left">刷新次数。如果不指定刷新次数，但指定了刷新时间间隔，这时刷新次数为无穷</td></tr><tr><td align="left">-d</td><td align="left">显示磁盘相关统计信息</td></tr><tr><td align="left">-p</td><td align="left">显示指定磁盘分区统计信息</td></tr><tr><td align="left">-S</td><td align="left">使用指定单位显示。参数有 k 、K 、m 、M ，分别代表1000、1024、1000000、1048576字节（byte）。默认单位为K（1024 bytes）</td></tr><tr><td align="left">-V</td><td align="left">显示vmstat版本信息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示虚拟内存使用情况</strong></p><pre><code class="bash">$ vmstatprocs   -----------memory----------  ---swap-- -----io---  --system--- -----cpu--- r  b   swpd    free   buff   cache   si   so    bi    bo   in   cs us sy id wa st 0  0      0 7108340 129544 3155916    0    0   184    53  203  995  4  1 95  0  0</code></pre><blockquote><p><strong>说明：</strong><br><code>Procs（进程）：</code><br>r: 运行队列中进程数量<br>b: 等待IO的进程数量<br>Memory（内存）：<br>swpd: 使用虚拟内存大小<br>free: 可用内存大小<br>buff: 用作缓冲的内存大小<br>cache: 用作缓存的内存大小<br><code>Swap：</code><br>si: 每秒从交换区写到内存的大小<br>so: 每秒写入交换区的内存大小<br>IO：（现在的Linux版本块的大小为1024bytes）<br>bi: 每秒读取的块数<br>bo: 每秒写入的块数<br><code>系统：</code><br>in: 每秒中断数，包括时钟中断。<br>cs: 每秒上下文切换数。<br>CPU（以百分比表示）：<br>us: 用户进程执行时间(user time)<br>sy: 系统进程执行时间(system time)<br>id: 空闲时间(包括IO等待时间),中央处理器的空闲时间 。以百分比表示。<br>wa: 等待IO时间<br><strong>备注：</strong> 如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。如果pi，po 长期不等于0，表示内存不足。如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。Linux在具有高稳定性、可靠性的同时，具有很好的可伸缩性和扩展性，能够针对不同的应用和硬件环境调整，优化出满足当前应用需要的最佳性能。因此企业在维护Linux系统、进行系统调优时，了解系统性能分析工具是至关重要的。<br>命令：vmstat 5 5<br>表示在5秒时间内进行5次采样。将得到一个数据汇总他能够反映真正的系统情况。</p></blockquote><p><strong><code>例二</code>：显示活跃和非活跃内存</strong></p><pre><code class="bash">$ vmstat -a 2 5</code></pre><blockquote><p><strong>说明：</strong><br>使用-a选项显示活跃和非活跃内存时，所显示的内容除增加inact和active外，其他显示内容与例子1相同。<br>Memory（内存）：<br>inact: 非活跃内存大小（当使用-a选项时显示）<br>active: 活跃的内存大小（当使用-a选项时显示）</p></blockquote><p><strong><code>例三</code>：查看系统已经fork了多少次</strong></p><pre><code class="bash">$ vmstat -f</code></pre><blockquote><p><strong>说明：</strong><br>这个数据是从&#x2F;proc&#x2F;stat中的processes字段里取得的</p></blockquote><p><strong><code>例四</code>：查看内存使用的详细信息</strong></p><pre><code class="bash">$ vmstat -s</code></pre><blockquote><p><strong>说明：</strong><br>这些信息的分别来自于&#x2F;proc&#x2F;meminfo,&#x2F;proc&#x2F;stat和&#x2F;proc&#x2F;vmstat。</p></blockquote><p><strong><code>例五</code>：查看磁盘的读&#x2F;写</strong></p><pre><code class="bash">$ vmstat -d</code></pre><blockquote><p><strong>说明：</strong><br>这些信息主要来自于&#x2F;proc&#x2F;diskstats.<br>merged:表示一次来自于合并的写&#x2F;读请求,一般系统会把多个连接&#x2F;邻近的读&#x2F;写请求合并到一起来操作.</p></blockquote><p><strong><code>例六</code>：查看&#x2F;dev&#x2F;sda1磁盘的读&#x2F;写</strong></p><pre><code class="bash">$ vmstat -p /dev/sda1</code></pre><blockquote><p><strong>说明：</strong><br>这些信息主要来自于&#x2F;proc&#x2F;diskstats。<br>reads:来自于这个分区的读的次数。<br>read sectors:来自于这个分区的读扇区的次数。<br>writes:来自于这个分区的写的次数。<br>requested writes:来自于这个分区的写请求次数。</p></blockquote><p><strong><code>例七</code>：查看系统的slab信息</strong></p><pre><code class="bash">$ vmstat -m</code></pre><blockquote><p><strong>说明：</strong><br>这组信息来自于&#x2F;proc&#x2F;slabinfo。<br>slab:由于内核会有许多小对象，这些对象构造销毁十分频繁，比如i-node，dentry，这些对象如果每次构建的时候就向内存要一个页(4kb)，而其实只有几个字节，这样就会非常浪费，为了解决这个问题，就引入了一种新的机制来处理在同一个页框中如何分配小存储区，而slab可以对小对象进行分配,这样就不用为每一个对象分配页框，从而节省了空间，内核对一些小对象创建析构很频繁，slab对这些小对象进行缓冲,可以重复利用,减少内存分配次数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（33）: free</title>
      <link href="/2017/01/02/linux-command-33-free/"/>
      <url>/2017/01/02/linux-command-33-free/</url>
      
        <content type="html"><![CDATA[<p>　　free命令可以显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer。在Linux系统监控的工具中，free命令是最经常使用的命令之一。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ free [参数]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　free 命令显示系统使用和空闲的内存情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。共享内存将被忽略</p><!--more --><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">以Byte为单位显示内存使用情况</td></tr><tr><td align="left">-k</td><td align="left">以KB为单位显示内存使用情况</td></tr><tr><td align="left">-m</td><td align="left">以MB为单位显示内存使用情况</td></tr><tr><td align="left">-g</td><td align="left">以GB为单位显示内存使用情况</td></tr><tr><td align="left">-o</td><td align="left">不显示缓冲区调节列</td></tr><tr><td align="left">-s&lt;间隔秒数&gt;</td><td align="left">持续观察内存使用状况</td></tr><tr><td align="left">-t</td><td align="left">显示内存总和列</td></tr><tr><td align="left">-V</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示内存使用情况</strong></p><pre><code class="bash">$ free              total        used        free      shared  buff/cache   availableMem:       12095180     8362640      198460     1379116     3534080     2100004Swap:       8185112       40008     8145104</code></pre><blockquote><p><strong>说明：</strong><br>total:总计物理内存的大小。<br>used:已使用多大。<br>free:可用有多少。<br>Shared:多个进程共享的内存总额。<br>Buffers&#x2F;cached:磁盘缓存的大小。</p></blockquote><p><strong><code>例二</code>：显示内存使用情况</strong></p><pre><code class="bash">$ free -t</code></pre><p><strong><code>例三</code>：周期性的查询内存使用信息</strong></p><pre><code class="bash"># 每10s 执行一次命令$ free -s 10</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（32）: top</title>
      <link href="/2017/01/01/linux-command-32-top/"/>
      <url>/2017/01/01/linux-command-32-top/</url>
      
        <content type="html"><![CDATA[<p>　　top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。下面详细介绍它的使用方法。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ top [参数]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">批处理</td></tr><tr><td align="left">-c</td><td align="left">显示完整的治命令</td></tr><tr><td align="left">-I</td><td align="left">忽略失效过程</td></tr><tr><td align="left">-s</td><td align="left">保密模式</td></tr><tr><td align="left">-S</td><td align="left">累积模式</td></tr><tr><td align="left">-i&lt;时间&gt;</td><td align="left">设置间隔时间</td></tr><tr><td align="left">-u&lt;用户名&gt;</td><td align="left">指定用户名</td></tr><tr><td align="left">-p&lt;进程号&gt;</td><td align="left">指定进程</td></tr><tr><td align="left">-n&lt;次数&gt;</td><td align="left">循环显示的次数</td></tr></tbody></table><h3 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a>top交互命令</h3><p>　　在top 命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了s 选项， 其中一些命令可能会被屏蔽。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">h</td><td align="left">显示帮助画面，给出一些简短的命令总结说明</td></tr><tr><td align="left">k</td><td align="left">终止一个进程。</td></tr><tr><td align="left">i</td><td align="left">忽略闲置和僵死进程。这是一个开关式命令</td></tr><tr><td align="left">q</td><td align="left">退出程序</td></tr><tr><td align="left">r</td><td align="left">重新安排一个进程的优先级别</td></tr><tr><td align="left">S</td><td align="left">切换到累计模式</td></tr><tr><td align="left">s</td><td align="left">改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s</td></tr><tr><td align="left">f或者F</td><td align="left">从当前显示中添加或者删除项目</td></tr><tr><td align="left">o或者O</td><td align="left">改变显示项目的顺序</td></tr><tr><td align="left">l</td><td align="left">切换显示平均负载和启动时间信息</td></tr><tr><td align="left">m</td><td align="left">切换显示内存信息</td></tr><tr><td align="left">t</td><td align="left">切换显示进程和CPU状态信息</td></tr><tr><td align="left">c</td><td align="left">切换显示命令名称和完整命令行</td></tr><tr><td align="left">M</td><td align="left">根据驻留内存大小进行排序</td></tr><tr><td align="left">P</td><td align="left">根据CPU使用百分比大小进行排序</td></tr><tr><td align="left">T</td><td align="left">根据时间&#x2F;累计时间进行排序</td></tr><tr><td align="left">W</td><td align="left">将当前设置写入~&#x2F;.toprc文件中</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示进程信息</strong></p><pre><code class="bash">$ top</code></pre><p><strong>top讲解</strong><br><img src="http://oncj6b2vl.bkt.clouddn.com/FmYyrG-z1EdQG0FMO2c3dKfc5rnA.jpg" alt="top命令"><br><strong>其他技巧</strong></p><ol><li>数字<code>1</code>，可监控每个逻辑CPU的状况</li><li>键盘<code>b</code>（打开&#x2F;关闭加亮效果），运行状态的进程</li><li>键盘<code>x</code> 打开&#x2F;关闭排序列的加亮效果</li><li><code>shift + &gt;</code>或<code>shift + &lt;</code>改变排序列</li></ol><p><strong><code>例二</code>：显示 完整命令</strong></p><pre><code class="bash">$ top -c</code></pre><p><strong><code>例三</code>：以批处理模式显示程序信息</strong></p><pre><code class="bash">$ top -b</code></pre><p><strong><code>例四</code>：以累积模式显示程序信息</strong></p><pre><code class="bash">$ top -S</code></pre><p><strong><code>例五</code>：设置信息更新次数</strong></p><pre><code class="bash"># 表示更新两次后终止更新显示$ top -n 2</code></pre><p><strong><code>例六</code>：设置信息更新时间</strong></p><pre><code class="bash"># 表示更新周期为3秒$ top -d 3</code></pre><p><strong><code>例七</code>：显示指定的进程信息</strong></p><pre><code class="bash">$ top -p 574</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（31）: du</title>
      <link href="/2016/12/31/linux-command-31-du/"/>
      <url>/2016/12/31/linux-command-31-du/</url>
      
        <content type="html"><![CDATA[<p>　　Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的.</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ du [选项][文件]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　显示每个文件和目录的磁盘使用空间。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a或-all</td><td align="left">显示目录中个别文件的大小。</td></tr><tr><td align="left">-b或-bytes</td><td align="left">显示目录或文件大小时，以byte为单位。</td></tr><tr><td align="left">-c或–total</td><td align="left">除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</td></tr><tr><td align="left">-k或–kilobytes</td><td align="left">以KB(1024bytes)为单位输出。</td></tr><tr><td align="left">-m或–megabytes</td><td align="left">以MB为单位输出。</td></tr><tr><td align="left">-s或–summarize</td><td align="left">仅显示总计，只列出最后加总的值。</td></tr><tr><td align="left">-h或–human-readable</td><td align="left">以K，M，G为单位，提高信息的可读性。</td></tr><tr><td align="left">-x或–one-file-xystem</td><td align="left">以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</td></tr><tr><td align="left">-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt;</td><td align="left">显示选项中所指定符号链接的源文件大小。</td></tr><tr><td align="left">-S或–separate-dirs</td><td align="left">显示个别目录的大小时，并不含其子目录的大小。</td></tr><tr><td align="left">-X&lt;文件&gt;或–exclude-from&#x3D;&lt;文件&gt;</td><td align="left">在&lt;文件&gt;指定目录或文件。</td></tr><tr><td align="left">–exclude&#x3D;&lt;目录或文件&gt;</td><td align="left">略过指定的目录或文件。</td></tr><tr><td align="left">-D或–dereference-args</td><td align="left">显示指定符号链接的源文件大小。</td></tr><tr><td align="left">-H或–si</td><td align="left">与-h参数相同，但是K，M，G是以1000为换算单位。</td></tr><tr><td align="left">-l或–count-links</td><td align="left">重复计算硬件链接的文件。</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示目录或者文件所占空间</strong></p><pre><code class="bash">$ du</code></pre><blockquote><p><strong>说明：</strong> 只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小</p></blockquote><p><strong><code>例二</code>：显示指定文件所占空间</strong></p><pre><code class="bash">$ du log2012.log</code></pre><p><strong><code>例三</code>：查看指定目录的所占空间</strong></p><pre><code class="bash">$ du scf</code></pre><p><strong><code>例四</code>：显示多个文件所占空间</strong></p><pre><code class="bash">$ du log30.tar.gz log31.tar.gz</code></pre><p><strong><code>例五</code>：只显示总和的大小</strong></p><pre><code class="bash">$ du -s</code></pre><p><strong><code>例六</code>：方便阅读的格式显示</strong></p><pre><code class="bash">$ du -h test</code></pre><p><strong><code>例七</code>：文件和目录都显示</strong></p><pre><code class="bash">$ du -ah test</code></pre><p><strong><code>例八</code>：显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</strong></p><pre><code class="bash">$ du -c log30.tar.gz log31.tar.gz</code></pre><blockquote><p><strong>说明：</strong> 加上-c选项后，du不仅显示两个目录各自占用磁盘空间的大小，还在最后一行统计它们的总和。</p></blockquote><p><strong><code>例九</code>：按照空间大小排序</strong></p><pre><code class="bash">$ du|sort -nr|more</code></pre><p><strong><code>例十</code>：输出当前目录下各个子目录所使用的空间</strong></p><pre><code class="bash">$ du -h  --max-depth=1</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（30）: df</title>
      <link href="/2016/12/30/linux-command-30-df/"/>
      <url>/2016/12/30/linux-command-30-df/</url>
      
        <content type="html"><![CDATA[<p>　　linux中df命令的功能是用来检查linux服务器的文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ df [选项] [文件]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　显示指定磁盘文件的可用空间。如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">全部文件系统列表</td></tr><tr><td align="left">-h</td><td align="left">方便阅读方式显示</td></tr><tr><td align="left">-H</td><td align="left">等于“-h”，但是计算式，1K&#x3D;1000，而不是1K&#x3D;1024</td></tr><tr><td align="left">-i</td><td align="left">显示inode信息</td></tr><tr><td align="left">-k</td><td align="left">区块为1024字节</td></tr><tr><td align="left">-l</td><td align="left">只显示本地文件系统</td></tr><tr><td align="left">-m</td><td align="left">区块为1048576字节</td></tr><tr><td align="left">–no-sync</td><td align="left">忽略 sync 命令</td></tr><tr><td align="left">-P</td><td align="left">输出格式为POSIX</td></tr><tr><td align="left">–sync</td><td align="left">在取得磁盘信息前，先执行sync命令</td></tr><tr><td align="left">-T</td><td align="left">文件系统类型</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">–block-size&#x3D;&lt;区块大小&gt;</td><td align="left">指定区块大小</td></tr><tr><td align="left">-t&lt;文件系统类型&gt;</td><td align="left">只显示选定文件系统的磁盘信息</td></tr><tr><td align="left">-x&lt;文件系统类型&gt;</td><td align="left">不显示选定文件系统的磁盘信息</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示磁盘使用情况</strong></p><pre><code class="bash">$ df</code></pre><blockquote><p><strong>说明：</strong> linux中df命令的输出清单的第1列是代表文件系统对应的设备文件的路径名（一般是硬盘上的分区）；第2列给出分区包含的数据块（1024字节）的数目；第3，4列分别表示已用的和可用的数据块数目。用户也许会感到奇怪的是，第3，4列块数之和不等于第2列中的块数。这是因为缺省的每个分区都留了少量空间供系统管理员使用。即使遇到普通用户空间已满的情况，管理员仍能登录和留有解决问题所需的工作空间。清单中Use% 列表示普通用户空间使用的百分比，即使这一数字达到100％，分区仍然留有系统管理员使用的空间。最后，Mounted on列表示文件系统的挂载点。</p></blockquote><p><strong><code>例二</code>：以inode模式来显示磁盘使用情况</strong></p><pre><code class="bash">$ df -i</code></pre><p><strong><code>例三</code>：显示指定类型磁盘</strong></p><pre><code class="bash">$ df -t ext3</code></pre><p><strong><code>例四</code>：列出各文件系统的i节点使用情况</strong></p><pre><code class="bash">$ df -ia</code></pre><p><strong><code>例五</code>：列出文件系统的类型</strong></p><pre><code class="bash">$ df -T</code></pre><p><strong><code>例六</code>：以更易读的方式显示目前磁盘空间和使用情况</strong></p><pre><code class="bash">$ df -h</code></pre><blockquote><p><strong>说明：</strong><br>-h更具目前磁盘空间和使用情况 以更易读的方式显示<br>-H根上面的-h参数相同,不过在根式化的时候,采用1000而不是1024进行容量转换<br>-k以单位显示磁盘的使用情况<br>-l显示本地的分区的磁盘空间使用率,如果服务器nfs了远程服务器的磁盘,那么在df上加上-l后系统显示的是过滤nsf驱动器后的结果<br>-i显示inode的使用情况。linux采用了类似指针的方式管理磁盘空间影射.这也是一个比较关键应用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（29）: /etc/group文件详解</title>
      <link href="/2016/12/29/linux-command-29-group/"/>
      <url>/2016/12/29/linux-command-29-group/</url>
      
        <content type="html"><![CDATA[<p>　　Linux &#x2F;etc&#x2F;group文件与&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow文件都是有关于系统管理员对用户和用户组管理时相关的文件。linux &#x2F;etc&#x2F;group文件是有关于系统管理员对用户和用户组管理的文件,linux用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。具有某种共同特征的用户集合起来就是用户组（Group）。用户组（Group）配置文件主要有 &#x2F;etc&#x2F;group和&#x2F;etc&#x2F;gshadow，其中&#x2F;etc&#x2F;gshadow是&#x2F;etc&#x2F;group的加密信息文件。</p><span id="more"></span><p>　　将用户分组是Linux系统中对用户进行管理及控制访问权限的一种手段。每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不 同的组。当一个用户同时是多个组中的成员时，在&#x2F;etc&#x2F;passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>　　用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。此文件的格式是由冒号(:)隔开若干个字段，这些字段具体如下：</p><p>　　组名:口令:组标识号:组内用户列表</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p><strong>组名：</strong> 组名是用户组的名称，由字母或数字构成。与&#x2F;etc&#x2F;passwd中的登录名一样，组名不应重复。<br><strong>口令：</strong> 口令字段存放的是用户组加密后的口令字。一般Linux系统的用户组都没有口令，即这个字段一般为空，或者是<code>*</code>。<br><strong>组标识号：</strong> 组标识号与用户标识号类似，也是一个整数，被系统内部用来标识组。别称GID.<br><strong>组内用户列表：</strong> 是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><pre><code class="bash">$ cat /etc/group</code></pre><blockquote><p><strong>说明：</strong> 我们以root:x:0:root,linuxsir 为例： 用户组root，x是密码段，表示没有设置密码，GID是0,root用户组下包括root、linuxsir以及GID为0的其它用户。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（28）: chown</title>
      <link href="/2016/12/28/linux-command-28-chown/"/>
      <url>/2016/12/28/linux-command-28-chown/</url>
      
        <content type="html"><![CDATA[<p>　　chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ chown [选项]... [所有者][:[组]] 文件...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">显示更改的部分的信息</td></tr><tr><td align="left">-f</td><td align="left">忽略错误信息</td></tr><tr><td align="left">-h</td><td align="left">修复符号链接</td></tr><tr><td align="left">-R</td><td align="left">处理指定目录以及其子目录下的所有文件</td></tr><tr><td align="left">-v</td><td align="left">显示详细的处理信息</td></tr><tr><td align="left">-deference</td><td align="left">作用于符号链接的指向，而不是链接文件本身</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">–reference&#x3D;&lt;目录或文件&gt;</td><td align="left">把指定的目录&#x2F;文件作为参考，把操作的文件&#x2F;目录设置成参考文件&#x2F;目录相同拥有者和群组</td></tr><tr><td align="left">–from&#x3D;&lt;当前用户：当前群组&gt;</td><td align="left">只有当前用户和群组跟指定的用户和群组相同时才进行改变</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：改变拥有者和群组</strong></p><pre><code class="bash">$ chown mail:mail log2012.log</code></pre><p><strong><code>例二</code>：改变文件拥有者和群组</strong></p><pre><code class="bash"># 组可为空，默认为root所在组$ chown root: log2012.log</code></pre><p><strong><code>例三</code>：改变文件群组</strong></p><pre><code class="bash"># 只改变所在组$ chown :mail log2012.log</code></pre><p><strong><code>例四</code>：改变指定目录以及其子目录下的所有文件的拥有者和群组</strong></p><pre><code class="bash">$ chown -R -v root:mail test6</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（27）: chgrp</title>
      <link href="/2016/12/27/linux-command-27-chgrp/"/>
      <url>/2016/12/27/linux-command-27-chgrp/</url>
      
        <content type="html"><![CDATA[<p>　　在lunix系统里，文件或目录的权限的掌控以拥有者及所诉群组来管理。可以使用chgrp指令取变更文件与目录所属群组，这种方式采用群组名称或群组识别码都可以。Chgrp命令就是change group的缩写！要被改变的组名必须要在&#x2F;etc&#x2F;group文件内存在才行。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ chgrp [选项] [组] [文件]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　chgrp命令可采用群组名称或群组识别码的方式改变文件或目录的所属群组。使用权限是超级用户。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">当发生改变时，报告处理信息</td></tr><tr><td align="left">-f</td><td align="left">不显示错误信息</td></tr><tr><td align="left">-R</td><td align="left">处理指定目录以及其子目录下的所有文件</td></tr><tr><td align="left">-v</td><td align="left">运行时显示详细的处理信息</td></tr><tr><td align="left">–dereference</td><td align="left">作用于符号链接的指向，而不是符号链接本身</td></tr><tr><td align="left">–no-dereference</td><td align="left">作用于符号链接本身</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">–reference&#x3D;&lt;文件或者目录&gt;</td><td align="left">设置为和指定的文件或目录的权限一样</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：改变文件的群组属性</strong></p><pre><code class="bash"># 将log2012.log文件由root群组改为bin群组$ chgrp -v bin log2012.log“log2012.log” 的所属组已更改为 bin</code></pre><p><strong><code>例二</code>：根据指定文件改变文件的群组属性</strong></p><pre><code class="bash"># 改变文件log2013.log 的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同$ chgrp --reference=log2012.log log2013.log</code></pre><p><strong><code>例三</code>：改变指定目录以及其子目录下的所有文件的群组属性</strong></p><pre><code class="bash"># 改变指定目录以及其子目录下的所有文件的群组属性$ chgrp -R bin test6</code></pre><p><strong><code>例四</code>：通过群组识别码改变文件群组属性</strong></p><pre><code class="bash"># 通过群组识别码改变文件群组属性，100为users群组的识别码，具体群组和群组识别码可以去/etc/group文件中查看$ chgrp -R 100 test6</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（26）: chmod</title>
      <link href="/2016/12/26/linux-command-26-chmod/"/>
      <url>/2016/12/26/linux-command-26-chmod/</url>
      
        <content type="html"><![CDATA[<p>　　chmod命令用于改变linux系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><span id="more"></span><p>　　Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。</p><p>　　文件或目录的访问权限分为只读，只写和可执行三种。以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。可执行权限表示允许将该文件作为一个程序执行。文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。用户也可根据需要把访问权限设置为需要的任何组合。</p><p>　　有三种不同类型的用户可对文件或目录进行访问：文件所有者，同组用户、其他用户。所有者一般是文件的创建者。所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。</p><p>　　每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限。 例如：</p><pre><code class="bash">$ ls -al-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</code></pre><p>　　第一列共有10个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是d，表示是一个目录。从第二个字符开始到第十个共9个字符，3个字符一组，分别表示了3组用户对文件或者目录的权限。权限字符用横线代表空许可，r代表只读，w代表写，x代表可执行。</p><pre><code class="bash">- rw- r-- r--</code></pre><p>　　表示log2012.log是一个普通文件；log2012.log的属主有读写权限；与log2012.log属主同组的用户只有读权限；其他用户也只有读权限。</p><p>　　确定了一个文件的访问权限后，用户可以利用Linux系统提供的chmod命令来重新设定不同的访问权限。也可以利用chown命令来更改某个文件或目录的所有者。利用chgrp命令来更改某个文件或目录的用户组。</p><p>　　chmod命令是非常重要的，用于改变文件或目录的访问权限。用户用它控制文件或目录的访问权限。chmod命令详细情况如下。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ chmod [-cfvR] [--help] [--version] mode file</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>用于改变文件或目录的访问权限，用它控制文件或目录的访问权限。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">当发生改变时，报告处理信息</td></tr><tr><td align="left">-f</td><td align="left">错误信息不输出</td></tr><tr><td align="left">-R</td><td align="left">处理指定目录以及其子目录下的所有文件</td></tr><tr><td align="left">-v</td><td align="left">运行时显示详细处理信息</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">–reference&#x3D;&lt;目录或者文件&gt;</td><td align="left">设置成具有指定目录或者文件具有相同的权限</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr><tr><td align="left">&lt;权限范围&gt;+&lt;权限设置&gt;</td><td align="left">使权限范围内的目录或者文件具有指定的权限</td></tr><tr><td align="left">&lt;权限范围&gt;-&lt;权限设置&gt;</td><td align="left">删除权限范围的目录或者文件的指定权限</td></tr><tr><td align="left">&lt;权限范围&gt;&#x3D;&lt;权限设置&gt;</td><td align="left">设置权限范围内的目录或者文件的权限为指定的值</td></tr></tbody></table><p><strong>权限范围</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">u</td><td align="left">目录或者文件的当前的用户</td></tr><tr><td align="left">g</td><td align="left">目录或者文件的当前的群组</td></tr><tr><td align="left">o</td><td align="left">除了目录或者文件的当前用户或群组之外的用户或者群组</td></tr><tr><td align="left">a</td><td align="left">所有的用户及群组</td></tr></tbody></table><p><strong>权限代号</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">读权限，用数字4表示</td></tr><tr><td align="left">w</td><td align="left">写权限，用数字2表示</td></tr><tr><td align="left">x</td><td align="left">执行权限，用数字1表示</td></tr><tr><td align="left">-</td><td align="left">删除权限，用数字0表示</td></tr><tr><td align="left">s</td><td align="left">特殊权限》该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</td></tr></tbody></table><blockquote><p><strong>文字设定法</strong></p></blockquote><pre><code class="bash">$ chmod ［who］ ［+ | - | =］ ［mode］ 文件名</code></pre><p><strong>数字设定法</strong><br>　　我们必须首先了解用数字表示的属性的含义：0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是（u）（g）（o）。<br>    例如，如果想让某个文件的属主有“读&#x2F;写”二种权限，需要把4（可读）+2（可写）＝6（读&#x2F;写）。<br>　　数字设定法的一般形式为：<br>　　<code>chmod ［mode］ 文件名</code><br><strong>数字与字符对应关系如下：</strong><br>r&#x3D;4，w&#x3D;2，x&#x3D;1<br>若要rwx属性则4+2+1&#x3D;7<br>若要rw-属性则4+2&#x3D;6；<br>若要r-x属性则4+1&#x3D;7。</p><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：增加文件所有用户组可执行权限</strong></p><pre><code class="bash">$ chmod a+x log2012.log</code></pre><p><strong><code>例二</code>：同时修改不同用户权限</strong></p><pre><code class="bash">$ chmod ug+w,o-x log2012.log</code></pre><p><strong><code>例三</code>：删除文件权限</strong></p><pre><code class="bash">$ chmod a-x log2012.log</code></pre><p><strong><code>例四</code>：使用“&#x3D;”设置权限</strong></p><pre><code class="bash">$ chmod u=x log2012.log</code></pre><p><strong><code>例五</code>：其他</strong></p><pre><code class="bash"># 给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限$ chmod 751 file# 上例的另一种形式$ chmod u=rwx,g=rx,o=x file# 为所有用户分配读权限$ chmod =r file# 同上例$ chmod 444 file# 同上例$ chmod a-wx,a+r   file</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（25）: gzip</title>
      <link href="/2016/12/25/linux-command-25-gzip/"/>
      <url>/2016/12/25/linux-command-25-gzip/</url>
      
        <content type="html"><![CDATA[<p>　　减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。gzip是在Linux系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。gzip不仅可以用来压缩大的、较少使用的文件以节省磁盘空间，还可以和tar命令一起构成Linux操作系统中比较流行的压缩文件格式。据统计，gzip命令对文本文件有60%～70%的压缩率。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ gzip [参数] [文件或者目录]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多出”.gz”的扩展名。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a或–ascii</td><td align="left">使用ASCII文字模式。</td></tr><tr><td align="left">-c或–stdout或–to-stdout</td><td align="left">把压缩后的文件输出到标准输出设备，不去更动原始文件。</td></tr><tr><td align="left">-d或–decompress或—-uncompress</td><td align="left">解开压缩文件。</td></tr><tr><td align="left">-f或–force</td><td align="left">强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接。</td></tr><tr><td align="left">-h或–help</td><td align="left">在线帮助。</td></tr><tr><td align="left">-l或–list</td><td align="left">列出压缩文件的相关信息。</td></tr><tr><td align="left">-L或–license</td><td align="left">显示版本与版权信息。</td></tr><tr><td align="left">-n或–no-name</td><td align="left">压缩文件时，不保存原来的文件名称及时间戳记。</td></tr><tr><td align="left">-N或–name</td><td align="left">压缩文件时，保存原来的文件名称及时间戳记。</td></tr><tr><td align="left">-q或–quiet</td><td align="left">不显示警告信息</td></tr><tr><td align="left">-r或–recursive</td><td align="left">递归处理，将指定目录下的所有文件及子目录一并处理。</td></tr><tr><td align="left">-S&lt;压缩字尾字符串&gt;或—-suffix&lt;压缩字尾字符串&gt;</td><td align="left">更改压缩字尾字符串。</td></tr><tr><td align="left">-t或–test</td><td align="left">测试压缩文件是否正确无误。</td></tr><tr><td align="left">-v或–verbose</td><td align="left">显示指令执行过程。</td></tr><tr><td align="left">-V或–version</td><td align="left">显示版本信息。</td></tr><tr><td align="left">-num</td><td align="left">用指定的数字num调整压缩的速度，-1或–fast表示最快压缩方法（低压缩比），-9或–best表示最慢压缩方法（高压缩比）。系统缺省值为6。</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：把test目录下的每个文件压缩成.gz文件</strong></p><pre><code class="bash"># 忽略目录，只打包其中文件$ gzip *</code></pre><p><strong><code>例二</code>：把例1中每个压缩的文件解压，并列出详细的信息</strong></p><pre><code class="bash">$ gzip -dv *</code></pre><p><strong><code>例三</code>：详细显示例1中每个压缩的文件的信息，并不解压</strong></p><pre><code class="bash">$ gzip -l *</code></pre><p><strong><code>例四</code>：压缩一个tar备份文件，此时压缩文件的扩展名为.tar.gz</strong></p><pre><code class="bash">$ gzip -r log.tar</code></pre><p><strong><code>例五</code>：递归的压缩目录</strong></p><pre><code class="bash">$ gzip -rv test6</code></pre><p><strong><code>例六</code>：递归地解压目录</strong></p><pre><code class="bash">$ gzip -dr test6</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git之reset揭秘</title>
      <link href="/2016/12/24/git-reset/"/>
      <url>/2016/12/24/git-reset/</url>
      
        <content type="html"><![CDATA[<p>本文主要选自于《Pro Git》这本书，加上自己平时使用时的理解整理于此，以此给大家借鉴。<br>本文主要讨论 <code>reset</code> 与 <code>checkout</code>。它们能做很多事情，所以我们要真正理解他们到底在底层做了哪些工作，以便能够恰当的运用它们。</p><span id="more"></span><h2 id="三棵树"><a href="#三棵树" class="headerlink" title="三棵树"></a>三棵树</h2><p>理解 <code>reset</code> 和 <code>checkout</code> 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）</p><table><thead><tr><th align="left">树</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">HEAD</td><td align="left">上一次提交的快照，下一次提交的父结点</td></tr><tr><td align="left">Index</td><td align="left">预期的下一次提交的快照</td></tr><tr><td align="left">Working Directory</td><td align="left">沙盒</td></tr></tbody></table><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p>HEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。 通常，理解 HEAD 的最简方式，就是将它看做 <strong>你的上一次提交</strong> 的快照。</p><p>其实，查看快照的样子很容易。 下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和：</p><pre><code class="bash">$ git cat-file -p HEADtree cfda3bf379e4f8dba8717dee55aab78aef7f4dafauthor Scott Chacon  1301511835 -0700committer Scott Chacon  1301511835 -0700initial commit$ git ls-tree -r HEAD100644 blob a906cb2a4a904a152...   README100644 blob 8f94139338f9404f2...   Rakefile040000 tree 99f1a6d12cb4b6f19...   lib</code></pre><p><code>cat-file</code> 与 <code>ls-tree</code> 是底层命令，它们一般用于底层工作，在日常工作中并不使用。不过它们能帮助我们了解到底发生了什么。</p><h2 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引(Index)"></a>索引(Index)</h2><p>索引是你的 <strong>预期的下一次提交</strong>。 我们也会将这个概念引用为 Git 的 “暂存区域”，这就是当你运行 <code>git commit</code> 时 Git 看起来的样子。</p><p>Git 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。</p><pre><code class="bash">$ git ls-files -s100644 a906cb2a4a904a152e80877d4088654daad0c859 0README100644 8f94139338f9404f26296befa88755fc2598c289 0Rakefile100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0lib/simplegit.rb</code></pre><p>再说一次，我们在这里又用到了 <code>ls-files</code> 这个幕后的命令，它会显示出索引当前的样子。</p><p>确切来说，索引并非技术上的树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。</p><h2 id="工作目录-Working-Directory"><a href="#工作目录-Working-Directory" class="headerlink" title="工作目录(Working Directory)"></a>工作目录(Working Directory)</h2><p>最后，你就有了自己的工作目录。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 <code>.git</code> 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 <strong>沙盒</strong>。在你将修改提交到暂存区并记录到历史之前，可以随意更改。</p><pre><code class="bash">$ tree.├── README├── Rakefile└── lib    └── simplegit.rb1 directory, 3 files</code></pre><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>Git 主要的目的是通过操纵这三棵树来以更加连续的状态记录项目的快照。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FuPJ7H7NQ32SfOF8kjbnzLk6vmEH.png" alt="工作流程"><br>让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 <strong>v1</strong> 版本，将它标记为蓝色。 现在运行 <code>git init</code>，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的分支（<code>master</code> 还不存在）。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FrD7WIEaHU-3MqVa7jIeHVh_j2sf.png" alt="git初始化情况"><br>此时，只有工作目录有内容。</p><p>现在我们想要提交这个文件，所以用 <code>git add</code> 来获取工作目录中的内容，并将其复制到索引中。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fqoqvx7xoY0Ok-U_dSUNdPcrk43t.png" alt="git add之后情况"><br>接着运行 <code>git commit</code>，它首先会移除索引中的内容并将它保存为一个永久的快照，然后创建一个指向该快照的提交对象，最后更新 <code>master</code> 来指向本次提交。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FqPDbSnfFD3LM_3-tSY7OLwtCGSa.png" alt="git commit之后情况"><br>此时如果我们运行 <code>git status</code>，会发现没有任何改动，因为现在三棵树完全相同。</p><p>现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 <strong>v2</strong> 版本，并将它标记为红色。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FoJPPHbaxpKomYmGALsLPgg1NlbZ.png" alt="编辑文件"><br>如果现在运行 <code>git status</code>，我们会看到文件显示在 “Changes not staged for commit,” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 <code>git add</code> 来将它暂存到索引中。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FuF8tzqKZfm6enCohAFGL5rSY8pR.png" alt="git add之后情况"><br>此时，由于索引和 HEAD 不同，若运行 <code>git status</code> 的话就会看到 “Changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 <code>git commit</code> 来完成提交。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fvsca5WLZmAr_ApYX3-dHk312zw8.png" alt="git add之后情况"><br>现在运行 <code>git status</code> 会没有输出，因为三棵树又变得相同了。</p><p>切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 <strong>HEAD</strong> 指向新的分支引用，将 <strong>索引</strong> 填充为该次提交的快照，然后将 <strong>索引</strong> 的内容复制到 工作目录 中。</p><h2 id="重置的作用"><a href="#重置的作用" class="headerlink" title="重置的作用"></a>重置的作用</h2><p>在以下情景中观察 <code>reset</code> 命令会更有意义。</p><p>为了演示这些例子，假设我们再次修改了 <code>file.txt</code> 文件并第三次提交它。 现在的历史看起来是这样的：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Ft27dwjZotq0XD5tYdVqc7tq-ibP.png"><br>让我们跟着 <code>reset</code> 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。</p><h3 id="1-移动-HEAD"><a href="#1-移动-HEAD" class="headerlink" title="1.移动 HEAD"></a>1.移动 HEAD</h3><p><code>reset</code> 做的第一件事是移动 HEAD 的指向。 这与改变 HEAD 自身不同（<code>checkout</code> 所做的）；<code>reset</code> 移动 HEAD 指向的分支。 这意味着如果 HEAD 设置为 <code>master</code> 分支（例如，你正在 <code>master</code> 分支上），运行 <code>git reset 9e5e64a</code> 将会使 <code>master</code> 指向 <code>9e5e64a</code>。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FnlCclgtQ-6JbFSLYJ5aOzZCY7Re.png" alt="git reset --soft"><br>无论你调用了何种形式的带有一个提交的 <code>reset</code>，它首先都会尝试这样做。 使用 <code>reset --soft</code>，它将仅仅停在那儿。</p><p>现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 <code>git commit</code> 命令。 当你在运行 <code>git commit</code> 时，Git 会创建一个新的提交，并移动 HEAD 所指向的分支来使其指向该提交。 当你将它 <code>reset</code> 回 <code>HEAD~</code>（HEAD 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 <code>git commit</code> 来完成 <code>git commit --amend</code> 所要做的事情了。</p><h3 id="2-更新索引-–mixed"><a href="#2-更新索引-–mixed" class="headerlink" title="2.更新索引(–mixed)"></a>2.更新索引(–mixed)</h3><p>注意，如果你现在运行 <code>git status</code> 的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。</p><p>接下来，<code>reset</code> 会用 HEAD 指向的当前快照的内容来更新索引。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fp_egv7ERkdtOGOcillcEgBnvFh7.png" alt="git reset --mixed"><br>如果指定 <code>--mixed</code> 选项，<code>reset</code> 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 <code>git reset HEAD~</code>），这就是命令将会停止的地方。</p><p>现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 <code>git add</code> 和 <code>git commit</code> 的命令执行之前。</p><h3 id="3-更新工作目录"><a href="#3-更新工作目录" class="headerlink" title="3.更新工作目录"></a>3.更新工作目录</h3><p><code>reset</code> 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 –hard 选项，它将会继续这一步。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FisVYp5vIOXZTy1w9t_NPBcHdr8h.png" alt="git reset --hard"><br>现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、<code>git add</code> 和 <code>git commit</code> 命令以及工作目录中的所有工作。</p><p>必须注意，<code>--hard</code> 标记是 <code>reset</code> 命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 <code>--hard</code> 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 <strong>v3</strong> 版本，我们可以通过 <code>reflog</code> 来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。</p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>reset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：</p><ol><li>移动 HEAD 分支的指向 （若指定了 <code>--soft</code>，则到此停止）</li><li>使索引看起来像 HEAD （不带参数或 <code>--mixed</code>，则到此停止）</li><li>使工作目录看起来像索引 (指定了 <code>--hard</code>)</li></ol><h3 id="通过路径来重置"><a href="#通过路径来重置" class="headerlink" title="通过路径来重置"></a>通过路径来重置</h3><p>前面讲述了 <code>reset</code> 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，<code>reset</code> 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。</p><p>现在，假如我们运行 <code>git reset file.txt</code> （这其实是 <code>git reset --mixed HEAD file.txt</code> 的简写形式，因为你既没有指定一个提交的 SHA-1 或分支，也没有指定 <code>--soft</code> 或 <code>--hard</code>），它会：</p><ol><li>移动 HEAD 分支的指向 （已跳过）</li><li>让索引看起来像 HEAD （到此处停止）</li></ol><p>所以它本质上只是将 <code>file.txt</code> 从 HEAD 复制到索引中。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FnXU5yA8N-Xjt7dTPqD0U6ZuNmkf.png" alt="git reset"><br>它还有 <em>取消暂存文件</em> 的实际效果。 如果我们查看该命令的示意图，然后再想想 <code>git add</code> 所做的事，就会发现它们正好相反。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FsgUtPndZWzdhH1uYJLmX6ts7k99.png" alt="git add"></p><p>这就是为什么 <code>git status</code> 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。）</p><p>我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 <code>git reset eb43bf file.txt</code> 的命令即可。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fp5Cq3mjN7l3br62FjGcBfvXIy2b.png" alt="git reset eb43 -- file.txt"><br>它其实做了同样的事情，也就是把工作目录中的文件恢复到 <strong>v1</strong> 版本，运行 <code>git add</code> 添加它，然后再将它恢复到 <strong>v3</strong> 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 <code>git commit</code>，它就会记录一条“将该文件恢复到 <strong>v1</strong> 版本”的更改，尽管我们并未在工作目录中真正地再次拥有它。</p><p>还有一点同 <code>git add</code> 一样，就是 <code>reset</code> 命令也可以接受一个 <code>--patch</code> 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。</p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>我们来看看如何利用这种新的功能来做一些有趣的事情 - 压缩提交。</p><p>假设你的一系列提交信息中有 “oops.”、“WIP” 和 “forgot this file”， 聪明的你就能使用 <code>reset</code> 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 <code>reset</code> 更简单。）</p><p>假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Ft27dwjZotq0XD5tYdVqc7tq-ibP.png" alt="git reset --hard"><br>那么可以运行 <code>git reset --soft HEAD~2</code> 来将 HEAD 分支移动到一个旧一点的提交上（即你想要保留的第一个提交）：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fmv1H8vky1f0AnvlQmFFVphIn5ae.png" alt="git reset --soft HEAD~2"><br>然后只需再次运行 <code>git commit</code>：<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FgODKQfa32czRawEZ64luzMM3TRa.png" alt="git commit"><br>现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 <strong>v1</strong> 版 <code>file-a.txt</code> 的提交，接着第二个提交将 <code>file-a.txt</code> 修改成了 <strong>v3</strong> 版并增加了 <code>file-b.txt</code>。 包含 <strong>v2</strong> 版本的文件已经不在历史中了。</p><h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p>最后，你大概还想知道 <code>checkout</code> 和 <code>reset</code> 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。</p><h3 id="不带路径"><a href="#不带路径" class="headerlink" title="不带路径"></a>不带路径</h3><p>运行 <code>git checkout [branch]</code> 与运行 <code>git reset --hard [branch]</code> 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。</p><p>首先不同于 <code>reset --hard，checkout</code> 对工作目录是安全的，它会通过检查来确保不会将已更改的文件吹走。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 <code>reset --hard</code> 则会不做检查就全面地替换所有东西。</p><p>第二个重要的区别是如何更新 HEAD。 reset 会移动 HEAD 分支的指向，而 checkout 只会移动 HEAD 自身来指向另一个分支。</p><p>例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 HEAD 指向它）。 如果我们运行 <code>git reset master</code>，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 <code>git checkout master</code> 的话，develop 不会移动，HEAD 自身会移动。 现在 HEAD 将会指向 master。</p><p>所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但_做法_是非常不同的。 reset 会移动 HEAD 分支的指向，而 checkout 则移动 HEAD 自身。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/Fpp-EOuRWOiTBtBWkjrvBIGHAlGm.png"></p><h3 id="带路径"><a href="#带路径" class="headerlink" title="带路径"></a>带路径</h3><p>运行 <code>checkout</code> 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 HEAD。 它就像 <code>git reset [branch] file</code> 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 <code>git reset --hard [branch] file</code>（如果 reset 允许你这样运行的话）- 这样对工作目录并不安全，它也不会移动 HEAD。</p><p>此外，同 <code>git reset</code> 和 <code>git add</code> 一样，<code>checkout</code> 也接受一个 –patch 选项，允许你根据选择一块一块地恢复文件内容。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望你现在熟悉并理解了 <code>reset</code> 命令，不过关于它和 <code>checkout</code> 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。</p><p>下面的速查表列出了命令对树的影响。 “HEAD” 一列中的 “REF” 表示该命令移动了 HEAD 指向的分支引用，而‘HEAD’ 则表示只移动了 HEAD 自身。 特别注意 <em>WD Safe?</em> 一列 - 如果它标记为 NO，那么运行该命令之前请考虑一下。</p><table><tr><td></td><td>**head**</td><td>**index**</td><td>**workdir**</td><td>**wd safe**</td></tr><tr><td>**commit level**</td><td colspan="4"></td></tr><tr><td>`reset --soft [commit]`</td><td>ref</td><td>no</td><td>no</td><td>yes</td></tr><tr><td>`reset [commit]`</td><td>ref</td><td>yes</td><td>no</td><td>yes</td></tr><tr><td>`reset --hard [commit]`</td><td>ref</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>`checkout [commit]`</td><td>head</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>**file level**</td><td colspan="4"></td></tr><tr><td>`reset (commit) [file]`</td><td>no</td><td>yes</td><td>no</td><td>yes</td></tr><tr><td>`checkout (commit) [file]`</td><td>no</td><td>yes</td><td>yes</td><td>no</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（24）: tar</title>
      <link href="/2016/12/24/linux-command-24-tar/"/>
      <url>/2016/12/24/linux-command-24-tar/</url>
      
        <content type="html"><![CDATA[<p>　　通过SSH访问服务器，难免会要用到压缩，解压缩，打包，解包等，这时候tar命令就是是必不可少的一个功能强大的工具。linux中最流行的tar是麻雀虽小，五脏俱全，功能强大。</p><span id="more"></span><p>　　tar命令可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p><p>　　首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p><p>　　为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p><p>　　linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ tar [必要参数] [选择参数] [文件]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><p><span><strong>必要参数</strong></span></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-A</td><td align="left">新增压缩文件到已存在的压缩</td></tr><tr><td align="left">-B</td><td align="left">设置区块大小</td></tr><tr><td align="left">-c</td><td align="left">建立新的压缩文件</td></tr><tr><td align="left">-d</td><td align="left">记录文件的差别</td></tr><tr><td align="left">-r</td><td align="left">添加文件到已经压缩的文件</td></tr><tr><td align="left">-u</td><td align="left">添加改变了和现有的文件到已经存在的压缩文件</td></tr><tr><td align="left">-x</td><td align="left">从压缩的文件中提取文件</td></tr><tr><td align="left">-t</td><td align="left">显示压缩文件的内容</td></tr><tr><td align="left">-z</td><td align="left">支持gzip解压文件</td></tr><tr><td align="left">-j</td><td align="left">支持bzip2解压文件</td></tr><tr><td align="left">-Z</td><td align="left">支持compress解压文件</td></tr><tr><td align="left">-v</td><td align="left">显示操作过程</td></tr><tr><td align="left">-l</td><td align="left">文件系统边界设置</td></tr><tr><td align="left">-k</td><td align="left">保留原有文件不覆盖</td></tr><tr><td align="left">-m</td><td align="left">保留文件不被覆盖</td></tr><tr><td align="left">-W</td><td align="left">确认压缩文件的正确性</td></tr><tr><td align="left"><strong>可选参数</strong></td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">设置区块数目</td></tr><tr><td align="left">-C</td><td align="left">切换到指定目录</td></tr><tr><td align="left">-f</td><td align="left">指定压缩文件</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使常见解压-压缩命令"><a href="#使常见解压-压缩命令" class="headerlink" title="使常见解压&#x2F;压缩命令"></a>使常见解压&#x2F;压缩命令</h3><p><strong><code>例一</code>：.tar文件</strong></p><pre><code class="bash">$ tar xvf FileName.tar # 解包$ tar cvf FileName.tar DirName # 打包# 注：tar是打包，不是压缩！</code></pre><p><strong><code>例二</code>：.gz文件</strong></p><pre><code class="bash"># 解压$ gunzip FileName.gz$ gzip -d FileName.gz# 压缩gzip FileName</code></pre><p><strong><code>例三</code>：.tar.gz和.tgz文件</strong></p><pre><code class="bash">$ tar xvf FileName.tar.gz # 解包$ tar cvf FileName.tar.gz DirName # 打包# 注：tar是打包，不是压缩！</code></pre><p><strong><code>例四</code>：.bz2文件</strong></p><pre><code class="bash"># 解压$ bzip2 -d FileName.bz2$ bunzip2 FileName.bz2# 压缩$ bzip2 -z FileName</code></pre><p><strong><code>例五</code>：.tar.bz2文件</strong></p><pre><code class="bash">$ tar jxvf FileName.tar.bz2 # 解压$ tar jcvf FileName.tar.bz2 DirName # 压缩</code></pre><p><strong><code>例六</code>：.bz文件</strong></p><pre><code class="bash"># 解压$ bzip2 -d FileName.bz$ bunzip2 FileName.bz</code></pre><p><strong><code>例七</code>：.tar.bz文件</strong></p><pre><code class="bash">$ tar jxvf FileName.tar.bz # 解压</code></pre><p><strong><code>例八</code>：.Z文件</strong></p><pre><code class="bash">$ uncompress FileName.Z # 解压$ compress FileName # 压缩</code></pre><p><strong><code>例九</code>：.tar.Z文件</strong></p><pre><code class="bash">$ tar Zxvf FileName.tar.Z # 解压$ tar Zcvf FileName.tar.Z DirName # 压缩</code></pre><p><strong><code>例十</code>：.zip文件</strong></p><pre><code class="bash">$ unzip FileName.zip # 解压$ zip FileName.zip DirName # 压缩</code></pre><p><strong><code>例十一</code>：.rar文件</strong></p><pre><code class="bash">$ rar x FileName.rar # 解压$ rar a FileName.rar DirName # 压缩</code></pre><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：将文件全部打包成tar包</strong></p><pre><code class="bash">$ tar -cvf log.tar log2012.log   # 仅打包，不压缩！$ tar -zcvf log.tar.gz log2012.log # 打包后，以 gzip 压缩$ tar -jcvf log.tar.bz2 log2012.log # 打包后，以 bzip2 压缩</code></pre><blockquote><p>在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar包； 如果加 j 参数，则以 .tar.bz2 来作为tar包名。</p></blockquote><p><strong><code>例二</code>：查阅上述 tar包内有哪些文件</strong></p><pre><code class="bash">$ tar -ztvf log.tar.gz# 由于我们使用 gzip 压缩的log.tar.gz，所以要查阅log.tar.gz包内的文件时，就得要加上 z 这个参数了</code></pre><p><strong><code>例三</code>：将tar 包解压缩</strong></p><pre><code class="bash">$ tar -zxvf /opt/soft/test/log.tar.gz# 在预设的情况下，我们可以将压缩档在任何地方解开的</code></pre><p><strong><code>例四</code>：只将 &#x2F;tar 内的 部分文件解压出来</strong></p><pre><code class="bash">$ tar -zxvf /opt/soft/test/log30.tar.gz log2013.log# 我可以透过 tar -ztvf 来查阅 tar 包内的文件名称，如果单只要一个文件，就可以透过这个方式来解压部分文件！</code></pre><p><strong><code>例五</code>：文件备份下来，并且保存其权限</strong></p><pre><code class="bash">$ tar -zcvpf log31.tar.gz log2014.log log2015.log log2016.log# 这个 -p 的属性是很重要的，尤其是当您要保留原本文件的属性时</code></pre><p><strong><code>例六</code>：在 文件夹当中，比某个日期新的文件才备份</strong></p><pre><code class="bash">$ tar -N &quot;2012/11/13&quot; -zcvf log17.tar.gz test</code></pre><p><strong><code>例七</code>：备份文件夹内容是排除部分文件</strong></p><pre><code class="bash">$ tar --exclude scf/service -zcvf scf.tar.gz scf/*</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git操作之高手过招</title>
      <link href="/2016/12/23/git-master/"/>
      <url>/2016/12/23/git-master/</url>
      
        <content type="html"><![CDATA[<p>在使用git的过程中，总有一天你会遇到下面的问题：）<br>这些也是在开发过程中很常见的问题，以下也是作者的经验之谈，有不对的地方还请指出。</p><span id="more"></span><h3 id="最后一次commit信息写错了"><a href="#最后一次commit信息写错了" class="headerlink" title="最后一次commit信息写错了"></a>最后一次commit信息写错了</h3><p>如果只是提交信息写错了信息，可以通过以下命令单独修改提交信息</p><pre><code class="bash">$ git commit --amend</code></pre><blockquote><p><strong>注意：</strong> 通过这样的过程修改提交信息后，相当于删除原来的提交，重新提交了一次。所有如果你在修改前已经将错误的那次提交push到服务端，那在修改后就需要通过 git pull 来合并代码（类似于两个分支了）。<br>通过 <code>git log --graph --oneline</code> 查看就会发现两个分支合并的痕迹</p></blockquote><h3 id="最后一次commit少添加一个文件"><a href="#最后一次commit少添加一个文件" class="headerlink" title="最后一次commit少添加一个文件"></a>最后一次commit少添加一个文件</h3><pre><code class="bash">$ git add file1$ git commit --amend</code></pre><h3 id="最后一次commit多添加一个文件"><a href="#最后一次commit多添加一个文件" class="headerlink" title="最后一次commit多添加一个文件"></a>最后一次commit多添加一个文件</h3><pre><code class="bash">$ git rm --cached file1$ git commit --amend</code></pre><h3 id="移除add过的文件"><a href="#移除add过的文件" class="headerlink" title="移除add过的文件"></a>移除add过的文件</h3><pre><code class="bash">#方法一$ git rm --cache [文件名]#方法二$ git reset head [文件/文件夹]</code></pre><h3 id="回退本地commit（还未push）"><a href="#回退本地commit（还未push）" class="headerlink" title="回退本地commit（还未push）"></a>回退本地commit（还未push）</h3><p>这种情况发生在你的本地仓库，可能你add，commit以后发现代码有点问题，打算取消提交，用到下面命令</p><pre><code class="bash">#只会保留源码（工作区），回退commit(本地仓库)与index（暂存区）到某个版本$ git reset &lt;commit_id&gt;   #默认为 --mixed模式$ git reset --mixed &lt;commit_id&gt;#保留源码（工作区）和index（暂存区），只回退commit（本地仓库）到某个版本$ git reset --soft &lt;commit_id&gt;#源码（工作区）、commit（本地仓库）与index（暂存区）都回退到某个版本$ git reset --hard &lt;commit_id&gt;</code></pre><p>当然有人在push代码以后，也是用reset –hard回退代码到某个版本之前，但是这样会有一个问题，你线上的代码没有变化。</p><blockquote><p>!!!可以通过 git push –force 将本地的回退推送到服务端,但是除非你很清楚在这么做, 不推荐.</p></blockquote><p>所以，这种情况你要使用下面的方式了。</p><h3 id="回退本地commit（已经push）"><a href="#回退本地commit（已经push）" class="headerlink" title="回退本地commit（已经push）"></a>回退本地commit（已经push）</h3><p>对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令</p><pre><code class="bash">$ git revert &lt;commit_id&gt;</code></pre><p><strong>注意：</strong></p><ol><li>git revert 用于反转提交，执行命令时要求工作树必须是干净的。</li><li>git revert 用一个新的提交来消除一个历时提交所做出的修改</li></ol><h3 id="回退单个文件的历史版本"><a href="#回退单个文件的历史版本" class="headerlink" title="回退单个文件的历史版本"></a>回退单个文件的历史版本</h3><pre><code class="bash">#查看历史版本git log 1.txt#回退该文件到指定版本git reset [commit_id] 1.txtgit checkout 1.txt#提交git commit -m &quot;回退1.txt的历史版本&quot;</code></pre><h3 id="修改提交历史中的author和email"><a href="#修改提交历史中的author和email" class="headerlink" title="修改提交历史中的author和email"></a>修改提交历史中的author和email</h3><p>旧的：author:<code>Old-Author</code> email:<code>old@mail.com</code><br>新的：author:<code>New-Author</code> email:<code>new@mail.com</code><br>1.在git仓库内创建下面的脚本，如<code>change.sh</code></p><pre><code class="shell"># !/bin/shgit filter-branch --env-filter &#39;an=&quot;$GIT_AUTHOR_NAME&quot;am=&quot;$GIT_AUTHOR_EMAIL&quot;cn=&quot;$GIT_COMMITTER_NAME&quot;cm=&quot;$GIT_COMMITTER_EMAIL&quot;if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;old@mail.com&quot; ]then    cn=&quot;New-Author&quot;    cm=&quot;new@mail.com&quot;fiif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;old@mail.com&quot; ]then    an=&quot;New-Author&quot;    am=&quot;new@mail.com&quot;fiexport GIT_AUTHOR_NAME=&quot;$an&quot;export GIT_AUTHOR_EMAIL=&quot;$am&quot;export GIT_COMMITTER_NAME=&quot;$cn&quot;export GIT_COMMITTER_EMAIL=&quot;$cm&quot;&#39;</code></pre><p>2.运行脚本</p><pre><code class="bash">$ sh change.sh</code></pre><h3 id="忽略已提交的文件（-iml）"><a href="#忽略已提交的文件（-iml）" class="headerlink" title="忽略已提交的文件（.iml）"></a>忽略已提交的文件（.iml）</h3><ol><li>删除已提交的文件</li></ol><pre><code class="bash"># 删除项目中所有的.iml后缀的文件$ find . -name &quot;*.iml&quot; | xargs rm -f</code></pre><ol start="2"><li>添加<code>.gitignore</code>文件</li></ol><pre><code class="bash">*.iml/**/*.iml</code></pre><h3 id="统计某段时间内每个人的提交量"><a href="#统计某段时间内每个人的提交量" class="headerlink" title="统计某段时间内每个人的提交量"></a>统计某段时间内每个人的提交量</h3><pre><code class="bash"># 查询分支: pgsql-master# 查询日期: 2023-11-30 ~ 2024-11-04# 排除 Merge 的 commit: --no-merges# 按 commit 数量进行排序git log pgsql-master --since=&quot;2023-11-30&quot; --until=&quot;2024-11-04&quot; --no-merges --pretty=&quot;%an&quot; | sort | uniq -c | sort -nr</code></pre><hr><p>持续更新中～～～</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（23）: 用SecureCRT来上传和下载文件</title>
      <link href="/2016/12/23/linux-command-23-%E7%94%A8SecureCRT%E6%9D%A5%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2016/12/23/linux-command-23-%E7%94%A8SecureCRT%E6%9D%A5%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>　　用SSH管理linux服务器时经常需要远程与本地之间交互文件.而直接用SecureCRT自带的上传下载功能无疑是最方便的，SecureCRT下的文件传输协议有ASCII、Xmodem、Zmodem。</p><span id="more"></span><p><strong>文件传输协议</strong><br>　　文件传输是数据交换的主要形式。在进行文件传输时，为使文件能被正确识别和传送，我们需要在两台计算机之间建立统一的传输协议。这个协议包括了文件的识别、传送的起止时间、错误的判断与纠正等内容。常见的传输协议有以下几种：</p><ol><li>ASCII：这是最快的传输协议，单只能传输文本文件。</li><li>Xmodem：这种古老的传输协议速度较慢，但由于使用了CRC错误侦测方法，传输的准确率可高达99.6%。</li><li>Ymodem：这是Xmodem的改良版，使用了1024位区段传送，速度比Xmodem要快</li><li>Zmodem：Zmodem采用了串流式（streaming）传输方式，传输速度较快，而且还具有自动改变区段大小和断点续传、快速错误侦测等功能。这是目前最流行的文件传输协议。</li></ol><p>　　除以上几种外，还有Imodem、Jmodem、Bimodem、Kermit、Lynx等协议，由于没有多数厂商支持，这里就略去不讲。</p><p>　　SecureCRT可以使用linux下的zmodem协议来快速的传送文件,使用非常方便.具体步骤：</p><h3 id="在使用SecureCRT上传下载之前需要给服务器安装lrzsz"><a href="#在使用SecureCRT上传下载之前需要给服务器安装lrzsz" class="headerlink" title="在使用SecureCRT上传下载之前需要给服务器安装lrzsz"></a>在使用SecureCRT上传下载之前需要给服务器安装lrzsz</h3><ul><li>从下面的地址下载 lrzsz-0.12.20.tar.gz</li></ul><p><a href="http://down1.chinaunix.net/distfiles/lrzsz-0.12.20.tar.gz">我是下载地址</a></p><ul><li>查看里面的INSTALL文档了解安装参数说明和细节</li><li>解压文件</li></ul><pre><code class="bash">$ tar zxvf lrzsz-0.12.20.tar.gz</code></pre><ul><li>进入目录，配置编译</li></ul><pre><code class="bash">$ cd lrzsz-0.12.20$ ./configure --prefix=/usr/local/lrzsz$ make$ make install</code></pre><ul><li>建立软链接</li></ul><pre><code class="bash">$ cd /usr/bin$ ln -s /usr/local/lrzsz/bin/lrz rz$ ln -s /usr/local/lrzsz/bin/lsz sz</code></pre><ul><li>测试</li></ul><p>　　运行 rz 弹出 SecureCrt上传窗口，用SecureCRT来上传和下载文件。</p><h3 id="设置SecureCRT上传和下载的默认目录"><a href="#设置SecureCRT上传和下载的默认目录" class="headerlink" title="设置SecureCRT上传和下载的默认目录"></a>设置SecureCRT上传和下载的默认目录</h3><p>　　options-&gt;session options -&gt;Terminal-&gt;Xmodem&#x2F;Zmodem<br>　　右栏directory设置上传和下载的目录</p><h3 id="使用Zmodem从客户端上传文件到linux服务器"><a href="#使用Zmodem从客户端上传文件到linux服务器" class="headerlink" title="使用Zmodem从客户端上传文件到linux服务器"></a>使用Zmodem从客户端上传文件到linux服务器</h3><p>　　用SecureCRT登陆linux终端</p><p>　　选中你要放置上传文件的路径，在目录下然后输入rz命令,SecureCRT会弹出文件选择对话框，在查找范围中找到你要上传的文件，按Add按钮。然后OK就可以把文件上传到linux上了。</p><p>　　或者在Transfer-&gt;Zmodem Upoad list弹出文件选择对话框，选好文件后按Add按钮。然后OK窗口自动关闭。然后在linux下选中存放文件的目录，输入rz命令。liunx就把那个文件上传到这个目录下了。</p><h3 id="使用Zmodem下载文件到客户端"><a href="#使用Zmodem下载文件到客户端" class="headerlink" title="使用Zmodem下载文件到客户端"></a>使用Zmodem下载文件到客户端</h3><pre><code class="bash">$ sz filename</code></pre><p>　　zmodem 接收可以自行启动.下载的文件存放在你设定的默认下载目录下</p><blockquote><p><code>rz</code>，<code>sz</code> 是 Linux&#x2F;Unix 同 Windows 进行 ZModem 文件传输的命令行工具 , windows 端需要支持ZModem的telnet&#x2F;ssh客户端，SecureCRT 就可以用 SecureCRT 登陆到 Unix&#x2F;Linux 主机（telnet或ssh均可）O 运行命令rz，即是接收文件，SecureCRT就会弹出文件选择对话框，选好文件之后关闭对话框，文件就会上传到当前目录 O 运行命令sz file1 file2就是发文件到windows上（保存的目录是可以配置） 比ftp命令方便多了，而且服务器不用再开FTP服务了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（22）: find命令的参数详解</title>
      <link href="/2016/12/22/linux-command-22-find%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>/2016/12/22/linux-command-22-find%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>　　find一些常用参数的一些常用实例和一些具体用法和注意事项。</p><span id="more"></span><h3 id="使用name选项"><a href="#使用name选项" class="headerlink" title="使用name选项"></a>使用name选项</h3><p>　　文件名选项是find命令最常用的选项，要么单独使用该选项，要么和其他选项一起使用。可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来。</p><pre><code class="bash"># 在自己的根目录$HOME中查找文件名符合*.log的文件，使用~作为 &#39;pathname&#39;参数，波浪号~代表了你的$HOME目录。$ find ~ -name &quot;*.log&quot; -print# 在当前目录及子目录中查找所有的‘ *.log‘文件$ find . -name &quot;*.log&quot; -print# 当前目录及子目录中查找文件名以一个大写字母开头的文件$ find . -name &quot;[A-Z]*&quot; -print# 在/etc目录中查找文件名以host开头的文件$ find /etc -name &quot;host*&quot; -print# 想要查找$HOME目录中的文件$ find ~ -name &quot;*&quot; -print$ find . -print# 让系统高负荷运行，就从根目录开始查找所有的文件$ find / -name &quot;*&quot; -print# 在当前目录查找文件名以一个个小写字母开头，最后是4到9加上.log结束的文件$ find . -name &quot;[a-z]*[4-9].log&quot; -print</code></pre><h3 id="用perm选项"><a href="#用perm选项" class="headerlink" title="用perm选项"></a>用perm选项</h3><p>　　按照文件权限模式用-perm选项,按文件权限模式来查找文件的话。最好使用八进制的权限表示法</p><pre><code class="bash"># 在当前目录下查找文件权限位为755的文件$ find . -perm 755 -print</code></pre><p>　　还有一种表达方法：在八进制数字前面要加一个横杠-，表示都匹配，如-007就相当于777，-005相当于555,</p><pre><code class="bash">$ find . -perm -005</code></pre><h3 id="忽略某个目录"><a href="#忽略某个目录" class="headerlink" title="忽略某个目录"></a>忽略某个目录</h3><p>　　如果在查找文件时希望忽略某个目录，因为你知道那个目录中没有你所要查找的文件，那么可以使用-prune选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略。如果希望在test目录下查找文件，但不希望在test&#x2F;test3目录下查找，可以用:</p><pre><code class="bash">$ find test -path &quot;test/test3&quot; -prune -o -print</code></pre><h3 id="使用find查找文件的时候怎么避开某个文件目录"><a href="#使用find查找文件的时候怎么避开某个文件目录" class="headerlink" title="使用find查找文件的时候怎么避开某个文件目录"></a>使用find查找文件的时候怎么避开某个文件目录</h3><p><strong><code>例一</code>：在test 目录下查找不在test4子目录之内的所有文件</strong></p><pre><code class="bash">$ find test -path &quot;test/test4&quot; -prune -o -print</code></pre><blockquote><p><strong>说明：</strong><br>find [-path ..] [expression]<br>在路径列表的后面的是表达式<br>-path “test” -prune -o -print 是 -path “test” -a -prune -o -print 的简写表达式按顺序求值, -a 和 -o 都是短路求值，与 shell 的 &amp;&amp; 和 || 类似如果<br>-path “test” 为真，则求值 -prune , -prune 返回真，与逻辑表达式为真；否则不求值 -prune，与逻辑表达式为假。如果 -path “test” -a -prune 为假，则求值 -print ，-print返回真，或逻辑表达式为真；否则不求值 -print，或逻辑表达式为真。<br>这个表达式组合特例可以用伪码写为:<br>if -path “test” then<br>-prune<br>else<br>-print  </p></blockquote><p><strong><code>例二</code>：避开多个文件夹</strong></p><pre><code class="bash"># 圆括号表示表达式的结合。\ 表示引用，即指示 shell 不对后面的字符作特殊解释，而留给 find 命令去解释其意义$ find test \( -path test/test4 -o -path test/test3 \) -prune -o -print</code></pre><p><strong><code>例三</code>：查找某一确定文件，-name等选项加在-o 之后</strong></p><pre><code class="bash">$ find test \(-path test/test4 -o -path test/test3 \) -prune -o -name &quot;*.log&quot; -print</code></pre><h3 id="使用user和nouser选项"><a href="#使用user和nouser选项" class="headerlink" title="使用user和nouser选项"></a>使用user和nouser选项</h3><pre><code class="bash"># 在$HOME目录中查找文件属主为peida的文件$ find ~ -user peida -print# 在/etc目录下查找文件属主为peida的文件$ find /etc -user peida -print# 为了查找属主帐户已经被删除的文件，可以使用-nouser选项。在/home目录下查找所有的这类文件$ find /home -nouser -print</code></pre><h3 id="使用group和nogroup选项"><a href="#使用group和nogroup选项" class="headerlink" title="使用group和nogroup选项"></a>使用group和nogroup选项</h3><pre><code class="bash"># 在/apps目录下查找属于gem用户组的文件$ find /apps -group gem -print# 查找没有有效所属用户组的所有文件$ find / -nogroup-print</code></pre><h3 id="按照更改时间或访问时间等查找文件"><a href="#按照更改时间或访问时间等查找文件" class="headerlink" title="按照更改时间或访问时间等查找文件"></a>按照更改时间或访问时间等查找文件</h3><p>　　如果希望按照更改时间来查找文件，可以使用mtime,atime或ctime选项。如果系统突然没有可用空间了，很有可能某一个文件的长度在此期间增长迅速，这时就可以用mtime选项来查找这样的文件。<br>用减号<code>-</code>来限定更改时间在距今n日以内的文件，而用加号<code>+</code>来限定更改时间在距今n日以前的文件</p><pre><code class="bash"># 在系统根目录下查找更改时间在5日以内的文件$ find / -mtime -5 -print# 在/var/adm目录下查找更改时间在3日以前的文件$ find /var/adm -mtime +3 -print</code></pre><h3 id="查找比某个文件新或旧的文件"><a href="#查找比某个文件新或旧的文件" class="headerlink" title="查找比某个文件新或旧的文件"></a>查找比某个文件新或旧的文件</h3><p>　　如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项。</p><pre><code class="bash"># 查找更改时间比文件log2012.log新但比文件log2017.log旧的文件$ find -newer log2012.log ! -newer log2017.log# 查找更改时间在比log2012.log文件新的文件$ find . -newer log2012.log -print</code></pre><h3 id="使用type选项"><a href="#使用type选项" class="headerlink" title="使用type选项"></a>使用type选项</h3><pre><code class="bash"># 在/etc目录下查找所有的目录$ find /etc -type d -print# 在当前目录下查找除目录以外的所有类型的文件$ find . ! -type d -print# 在/etc目录下查找所有的符号链接文件$ find /etc -type l -print</code></pre><h3 id="使用size选项"><a href="#使用size选项" class="headerlink" title="使用size选项"></a>使用size选项</h3><p>　　可以按照文件长度来查找文件，这里所指的文件长度既可以用块（block）来计量，也可以用字节来计量。以字节计量文件长度的表达形式为N c；以块计量文件长度只用数字表示即可。<br>在按照文件长度查找文件时，一般使用这种以字节表示的文件长度，在查看文件系统的大小，因为这时使用块来计量更容易转换。</p><pre><code class="bash"># 在当前目录下查找文件长度大于1 M字节的文件$ find . -size +1000000c -print# 在/home/apache目录下查找文件长度恰好为100字节的文件$ find /home/apache -size 100c -print# 在当前目录下查找长度超过10块的文件（一块等于512字节）$ find . -size +10 -print</code></pre><h3 id="使用depth选项"><a href="#使用depth选项" class="headerlink" title="使用depth选项"></a>使用depth选项</h3><p>　　在使用find命令时，可能希望先匹配所有的文件，再在子目录中查找。使用depth选项就可以使find命令这样做。这样做的一个原因就是，当在使用find命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。</p><pre><code class="bash"># find命令从文件系统的根目录开始，查找一个名为CON.FILE的文件# 它将首先匹配所有的文件然后再进入子目录中查找$ find / -name &quot;CON.FILE&quot; -depth -print</code></pre><h3 id="使用mount选项"><a href="#使用mount选项" class="headerlink" title="使用mount选项"></a>使用mount选项</h3><p>　　在当前的文件系统中查找文件（不进入其他文件系统），可以使用find命令的mount选项</p><pre><code class="bash"># 从当前目录开始查找位于本文件系统中文件名以XC结尾的文件$ find . -name &quot;*.XC&quot; -mount -print</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git之SSH与HTTPS免密码配置</title>
      <link href="/2016/12/21/git-ssh-https-verify-configuration/"/>
      <url>/2016/12/21/git-ssh-https-verify-configuration/</url>
      
        <content type="html"><![CDATA[<p>Git作为当前最受欢迎的版本控制软件，使用是很频繁的。但每次使用git push等操作时都要输入密码，实在是挺麻烦的。本文对使用ssh与https两种通讯协议讨论一下免密码配置。<br>注：这个过程在所有操作系统上都是相似的：）</p><span id="more"></span><h2 id="SSH通信协议"><a href="#SSH通信协议" class="headerlink" title="SSH通信协议"></a>SSH通信协议</h2><h3 id="GitHub版"><a href="#GitHub版" class="headerlink" title="GitHub版"></a>GitHub版</h3><p>许多Git服务器都使用SSH公钥进行认证，当然也包括github。<br>首先你需要确认一下自己是否已经拥有密钥了，默认情况下，用户的 SSH 密钥存储在其 <code>~/.ssh</code> 目录下。进入该目录并列出其中内容，你变可以下快速确认自己是否已经拥有密钥：</p><pre><code class="bash">$ cd ~/.ssh$ lsauthorized_keys2  id_rsa       known_hostsconfig            id_rsa.pub</code></pre><p>我们需要寻找一对 <code>id_rsa</code> 或 <code>id_dsa</code> 命名的文件，其中一个带 <code>.pub</code> 扩展名。 ‘.pub’文件是你的公钥，另一个则是私钥。如果没有找不到这样的文件（或者根本就没有<code>.ssh</code>目录），我们可以通过 <code>ssh-keygen</code> 程序来创建它们。</p><pre><code class="bash">#邮箱可以随便填$ ssh-keygen -t rsa -C &quot;xx@xx.com&quot;</code></pre><p>首先 <code>ssh-keygen</code> 会确认密钥的存储位置和文件名（默认是 <code>.ssh/id_rsa</code>）,然后他会要求你输入两次密钥口令，留空即可。所以一般选用默认，全部回车即可。</p><p>接下来我们登陆到GitHub上，右上角小头像-&gt;Setting-&gt;SSH and GPG keys中，点击new SSH key。<br><code>Title：</code>可以随便填写，但最好起的名字能让自己知道这个公钥是哪个设备的。<br><code>Key：</code>将上面生成的<code>.pub</code>文件中的所有内容复制到这里。<br>点击下面的Add SSH key即可。<br>然后你就会发现可以免密码访问了</p><h3 id="Git服务器"><a href="#Git服务器" class="headerlink" title="Git服务器"></a>Git服务器</h3><p>如果服务端是自己搭建的git服务器，生成密钥公钥对的步骤是一样的。<br>然后将生成的 <code>.pub</code> 文件内容，导入到git服务器 <code>/home/git/.ssh/authorized_keys</code> 文件内，一行一个。<br>然后你就会发现git push 不再需要密码了<br>搭建git服务器和相关免登陆的详细步骤可参考我的另一篇 <a href="/2016/10/22/set-up-git-server-on-vps/" title="搭建Git服务器">搭建Git服务器</a></p><h2 id="HTTPS通信协议"><a href="#HTTPS通信协议" class="headerlink" title="HTTPS通信协议"></a>HTTPS通信协议</h2><p>上面讲了SSH方式的免密码，接下来讲一下越来越常用的HTTPS方式的免密码<br>新建文件并保存密码</p><pre><code class="bash">$ touch ~/.git-credentials$ vim ~/.git-credentials</code></pre><p>添加内容</p><pre><code class="bash">https://&#123;username&#125;:&#123;passwd&#125;@github.com</code></pre><p>添加git配置</p><pre><code class="bash">$ git config --global credential.helper store</code></pre><p>查看～&#x2F;.gitconfig文件变化</p><pre><code class="xml">[credential]    helper = store</code></pre><p>然后再尝试一下git push不再在需要密码了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（21）: find命令之xargs</title>
      <link href="/2016/12/21/linux-command-21-find%E5%91%BD%E4%BB%A4%E4%B9%8Bxargs/"/>
      <url>/2016/12/21/linux-command-21-find%E5%91%BD%E4%BB%A4%E4%B9%8Bxargs/</url>
      
        <content type="html"><![CDATA[<p>　　在使用 find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。</p><span id="more"></span><p>　　find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。  </p><p>　　在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高； 而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</strong></p><pre><code class="bash">$ find . -type f -print | xargs file</code></pre><p><strong><code>例二</code>：在整个系统中查找内存信息转储文件(core dump) ，然后把结果保存到&#x2F;tmp&#x2F;core.log 文件中</strong></p><pre><code class="bash">$ find / -name &quot;core&quot; -print | xargs echo &quot;&quot; &gt;/tmp/core.log</code></pre><p><strong><code>例三</code>：在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限</strong></p><pre><code class="bash">$ find . -perm -7 -print | xargs chmod o-w</code></pre><p><strong><code>例四</code>：用grep命令在所有的普通文件中搜索hostname这个词</strong></p><pre><code class="bash">$ find . -type f -print | xargs grep &quot;hostname&quot;</code></pre><p><strong><code>例五</code>：用grep命令在当前目录下的所有普通文件中搜索hostnames这个词</strong></p><pre><code class="bash"># \用来取消find命令中的*在shell中的特殊含义$ find . -name \* -type f -print | xargs grep &quot;hostnames&quot;</code></pre><p><strong><code>例六</code>：使用xargs执行mv</strong></p><pre><code class="bash">$ find . -name &quot;*.log&quot; | xargs -i mv &#123;&#125; test4</code></pre><p><strong><code>例七</code>：find后执行xargs提示xargs: argument line too long解决方法</strong></p><pre><code class="bash"># -l1是一次处理一个；-t是处理之前打印出命令$ find . -type f -atime +0 -print0 | xargs -0 -l1 -t rm -f</code></pre><p><strong><code>例八</code>：使用-i参数默认的前面输出用{}代替，-I参数可以指定其他代替字符，如例子中的[]</strong></p><pre><code class="bash">$  find . -name &quot;file&quot; | xargs -I [] cp [] ..</code></pre><p><strong><code>例九</code>：xargs的-p参数的使用</strong></p><pre><code class="bash"># -p参数会提示让你确认是否执行后面的命令,y执行，n不执行$ find . -name &quot;*.log&quot; | xargs -p -i mv &#123;&#125; ..</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（20）: find命令之exec</title>
      <link href="/2016/12/20/linux-command-20-find%E5%91%BD%E4%BB%A4%E4%B9%8Bexec/"/>
      <url>/2016/12/20/linux-command-20-find%E5%91%BD%E4%BB%A4%E4%B9%8Bexec/</url>
      
        <content type="html"><![CDATA[<p>　　find是我们很常用的一个Linux命令，但是我们一般查找出来的并不仅仅是看看而已，还会有进一步的操作，这个时候exec的作用就显现出来了</p><span id="more"></span><h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><p>　　<code>-exec</code>  参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。</p><p>　　<code>&#123;&#125;</code>  花括号代表前面find查找出来的文件名。</p><p>　　使用find时，只要把想要的操作写在一个文件里，就可以用exec来配合find查找，很方便的。在有些操作系统中只允许-exec选项执行诸如ls或ls -l这样的命令。大多数用户使用这一选项是为了查找旧文件并删除它们。建议在真正执行rm命令删除文件之前，最好先用ls命令看一下，确认它们是所要删除的文件。 exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\，最后是一个分号。为了使用exec选项，必须要同时使用print选项。如果验证一下find命令，会发现该命令只输出从当前路径起的相对路径及文件名。</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：ls -l命令放在find命令的-exec选项中</strong></p><pre><code class="bash"># find命令匹配到了当前目录下的所有普通文件，并在-exec选项中使用ls -l命令将它们列出$ find . -type f -exec ls -l &#123;&#125; \;</code></pre><p><strong><code>例二</code>：在目录中查找更改时间在n日以前的文件并删除它们</strong></p><pre><code class="bash">$ find . -type f -mtime +14 -exec rm &#123;&#125; \;</code></pre><p><strong><code>例三</code>：在目录中查找更改时间在n日以前的文件并删除它们，在删除之前先给出提示</strong></p><pre><code class="bash">$ find . -name &quot;*.log&quot; -mtime +5 -ok rm &#123;&#125; \;</code></pre><p><strong><code>例四</code>：-exec中使用grep命令</strong></p><pre><code class="bash">$ find /etc -name &quot;passwd*&quot; -exec grep &quot;root&quot; &#123;&#125; \;</code></pre><p><strong><code>例五</code>：查找文件移动到指定目录</strong></p><pre><code class="bash">$ find . -name &quot;*.log&quot; -exec mv &#123;&#125; .. \;</code></pre><p><strong><code>例六</code>：用exec选项执行cp命令</strong></p><pre><code class="bash">$ find . -name &quot;*.log&quot; -exec cp &#123;&#125; test3 \;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（19）: find命令概览</title>
      <link href="/2016/12/19/linux-command-19-find%E5%91%BD%E4%BB%A4%E6%A6%82%E8%A7%88/"/>
      <url>/2016/12/19/linux-command-19-find%E5%91%BD%E4%BB%A4%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>　　Linux下find命令在目录结构中搜索文件，并执行指定的操作。Linux下find命令提供了相当多的查找条件，功能很强大。由于find具有强大的功能，所以它的选项也很多，其中大部分选项都值得我们花时间来了解一下。即使系统中含有网络文件系统( NFS)，find命令在该文件系统中同样有效，只你具有相应的权限。 在运行一个非常消耗资源的find命令时，很多人都倾向于把它放在后台执行，因为遍历一个大的文件系统可能会花费很长的时间(这里是指30G字节以上的文件系统)。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ find pathname -options [-print -exec -ok ...]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用于在文件树种查找文件，并作出相应的处理</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pathname</td><td align="left">find命令所查找的目录路径。例如用.来表示当前目录，用&#x2F;来表示系统根目录</td></tr><tr><td align="left">-print</td><td align="left">find命令将匹配的文件输出到标准输出</td></tr><tr><td align="left">-exec</td><td align="left">find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ {  } ;，注意{   }和\；之间的空格</td></tr><tr><td align="left">-ok</td><td align="left">和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行</td></tr></tbody></table><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-name</td><td align="left">按照文件名查找文件</td></tr><tr><td align="left">-perm</td><td align="left">按照文件权限来查找文件</td></tr><tr><td align="left">-prune</td><td align="left">使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略</td></tr><tr><td align="left">-user</td><td align="left">按照文件属主来查找文件</td></tr><tr><td align="left">-group</td><td align="left">按照文件所属的组来查找文件</td></tr><tr><td align="left">-mtime -n +n</td><td align="left">按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前。<br>find命令还有-atime和-ctime 选项，但它们都和-m time选项</td></tr><tr><td align="left">-nogroup</td><td align="left">查找无有效所属组的文件，即该文件所属的组在&#x2F;etc&#x2F;groups中不存在</td></tr><tr><td align="left">-nouser</td><td align="left">查找无有效属主的文件，即该文件的属主在&#x2F;etc&#x2F;passwd中不存在</td></tr><tr><td align="left">-newer file1 ! file2</td><td align="left">查找更改时间比文件file1新但比文件file2旧的文件</td></tr><tr><td align="left">-type</td><td align="left">查找某一类型的文件,诸如：<br>b - 块设备文件<br>d - 目录<br>c - 字符设备文件<br>p - 管道文件<br>l - 符号链接文件<br>f - 普通文件</td></tr><tr><td align="left">-size n：[c]</td><td align="left">查找文件长度为n块的文件，带有c时表示文件长度以字节计。-depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找</td></tr><tr><td align="left">-fstype</td><td align="left">查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件&#x2F;etc&#x2F;fstab中找到，该配置文件中包含了本系统中有关文件系统的信息</td></tr><tr><td align="left">-mount</td><td align="left">在查找文件时不跨越文件系统mount点</td></tr><tr><td align="left">-follow</td><td align="left">如果find命令遇到符号链接文件，就跟踪至链接所指向的文件</td></tr><tr><td align="left">-cpio</td><td align="left">对匹配的文件使用cpio命令，将这些文件备份到磁带设备中</td></tr><tr><td align="left">-amin n</td><td align="left">查找系统中最后N分钟访问的文件</td></tr><tr><td align="left">-atime n</td><td align="left">查找系统中最后n*24小时访问的文件</td></tr><tr><td align="left">-cmin n</td><td align="left">查找系统中最后N分钟被改变文件状态的文件</td></tr><tr><td align="left">-ctime n</td><td align="left">查找系统中最后n*24小时被改变文件状态的文件</td></tr><tr><td align="left">-mmin n</td><td align="left">查找系统中最后N分钟被改变文件数据的文件</td></tr><tr><td align="left">-mtime n</td><td align="left">查找系统中最后n*24小时被改变文件数据的文件</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找指定时间内修改过的文件</strong></p><pre><code class="bash"># 查找48小时内修改过的文件$ find -atime -2</code></pre><p><strong><code>例二</code>：根据关键字查找</strong></p><pre><code class="bash"># 在当前目录查找一.log结尾的文件。 &quot;. &quot;代表当前目录$ find . -name &quot;*.log&quot;</code></pre><p><strong><code>例三</code>：按照目录或文件的权限来查找文件</strong></p><pre><code class="bash"># 查找/opt/soft/test/目录下 权限为 777的文件$ find /opt/soft/test/ -perm 777</code></pre><p><strong><code>例四</code>：按类型查找</strong></p><pre><code class="bash"># 查找当目录，以.log结尾的普通文件$ find . -type f -name &quot;*.log&quot;</code></pre><p><strong><code>例五</code>：查找当前所有目录并排序</strong></p><pre><code class="bash">$ find . -type d | sort</code></pre><p><strong><code>例六</code>：按大小查找文件</strong></p><pre><code class="bash"># 查找当前目录大于1K的文件$ find . -size +1000c -print</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（18）: locate</title>
      <link href="/2016/12/18/linux-command-18-locate/"/>
      <url>/2016/12/18/linux-command-18-locate/</url>
      
        <content type="html"><![CDATA[<p>　　locate 让使用者可以很快速的搜寻档案系统内是否有指定的档案。其方法是先建立一个包括系统内所有档案名称及路径的数据库，之后当寻找时就只需查询这个数据库，而不必实际深入档案系统之中了。在一般的 distribution 之中，数据库的建立都被放在 crontab 中自动执行。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ locate [选择参数] [样式]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　locate命令可以在搜寻数据库时快速找到档案，数据库由updatedb程序来更新，updatedb是由cron daemon周期性建立的，locate命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是locate所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb每天会跑一次，可以由修改crontab来更新设定值。(etc&#x2F;crontab)</p><p>　　locate指定用在搜寻符合条件的档案，它会去储存档案与目录名称的数据库内，寻找合乎范本样式条件的档案或目录录，可以使用特殊字元（如<code>*</code> 或 <code>?</code>等）来指定范本样式，如指定范本为<code>kcpa*ner</code>, locate会找出所有起始字串为kcpa且结尾为ner的档案或目录，如名称为kcpartner若目录录名称为kcpa_ner则会列出该目录下包括 子目录在内的所有档案。</p><p>　　locate指令和find找寻档案的功能类似，但locate是透过update程序将硬盘中的所有档案和目录资料先建立一个索引数据库，在 执行loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理，但也可以直接下达update强迫系统立即修改索引数据库。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-e</td><td align="left">将排除在寻找的范围之外</td></tr><tr><td align="left">-1</td><td align="left">如果 是 1．则启动安全模式。在安全模式下，使用者不会看到权限无法看到的档案。这会始速度减慢，因为 locate 必须至实际的档案系统中取得档案的权限资料</td></tr><tr><td align="left">-f</td><td align="left">将特定的档案系统排除在外，例如我们没有到理要把 proc 档案系统中的档案放在资料库中</td></tr><tr><td align="left">-q</td><td align="left">安静模式，不会显示任何错误讯息</td></tr><tr><td align="left">-n</td><td align="left">至多显示 n个输出</td></tr><tr><td align="left">-r</td><td align="left">使用正规运算式 做寻找的条件</td></tr><tr><td align="left">-o</td><td align="left">指定资料库存的名称</td></tr><tr><td align="left">-d</td><td align="left">指定资料库的路径</td></tr><tr><td align="left">-h</td><td align="left">显示辅助讯息</td></tr><tr><td align="left">-V</td><td align="left">显示程式的版本讯息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找和pwd相关的所有文件</strong></p><pre><code class="bash">$ locate pwd</code></pre><p><strong><code>例二</code>：搜索etc目录下所有以sh开头的文件</strong></p><pre><code class="bash">$ locate /etc/sh</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（17）: whereis</title>
      <link href="/2016/12/17/linux-command-17-whereis/"/>
      <url>/2016/12/17/linux-command-17-whereis/</url>
      
        <content type="html"><![CDATA[<p>　　whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p><span id="more"></span><p>　　和find相比，whereis查找的速度非常快，这是因为linux系统会将 系统内的所有文件都记录在一个数据库文件中，当使用whereis和下面即将介绍的locate时，会从数据库中查找数据，而不是像find命令那样，通 过遍历硬盘来查找，效率自然会很高。</p><p>　　但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ whereis [-bmsu] [BMS 目录名 -f ] 文件名</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。whereis 程序还具有搜索源代码、指定备用搜索路径和搜索不寻常项的能力。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">定位可执行文件</td></tr><tr><td align="left">-m</td><td align="left">定位帮助文件</td></tr><tr><td align="left">-s</td><td align="left">定位源代码文件</td></tr><tr><td align="left">-u</td><td align="left">搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件</td></tr><tr><td align="left">-B</td><td align="left">指定搜索可执行文件的路径</td></tr><tr><td align="left">-M</td><td align="left">指定搜索帮助文件的路径</td></tr><tr><td align="left">-S</td><td align="left">指定搜索源代码文件的路径</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：将和git文件相关的文件都查找出来</strong></p><pre><code class="bash">$ whereis git</code></pre><p><strong><code>例二</code>：只将二进制文件 查找出来</strong></p><pre><code class="bash">$ whereis -b svn</code></pre><blockquote><p><code>whereis -m svn</code> 查出说明文档路径，<code>whereis -s svn</code> 找source源文件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（16）: which</title>
      <link href="/2016/12/16/linux-command-16-which/"/>
      <url>/2016/12/16/linux-command-16-which/</url>
      
        <content type="html"><![CDATA[<p>　　我们经常在linux要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：<br><code>which</code>  查看可执行文件的位置。<br><code>whereis</code> 查看文件的位置。<br><code>locate</code>   配合数据库查看文件位置。<br><code>find</code>   实际搜寻硬盘查询文件名称。<br>　　which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ which 可执行文件名称</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　which指令会在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-n</td><td align="left">指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名</td></tr><tr><td align="left">-p</td><td align="left">与-n参数相同，但此处的包括了文件的路径</td></tr><tr><td align="left">-w</td><td align="left">指定输出时栏位的宽度</td></tr><tr><td align="left">-V</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找文件、显示命令路径</strong></p><pre><code class="bash"># which 是根据使用者所配置的 PATH 变量内的目录去搜寻可运行档的！# 所以，不同的 PATH 配置内容所找到的命令当然不一样的！$ which pwd</code></pre><p><strong><code>例二</code>：用 which 去找出 which</strong></p><pre><code class="bash"># 竟然会有两个 which ，其中一个是 alias 这就是所谓的『命令别名』，意思是输入 which 会等於后面接的那串命令！$ which which</code></pre><p><strong><code>例三</code>：找出 cd 这个命令</strong></p><pre><code class="bash"># cd 这个常用的命令竟然找不到啊！为什么呢？这是因为 cd 是bash 内建的命令！# 但是 which 默认是找 PATH 内所规范的目录，所以当然一定找不到的！$ which cd</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（15）: tail</title>
      <link href="/2016/12/15/linux-command-15-tail/"/>
      <url>/2016/12/15/linux-command-15-tail/</url>
      
        <content type="html"><![CDATA[<p>　　tail 命令从指定点开始将文件写到标准输出.使用tail命令的-f选项可以方便的查阅正在改变的日志文件,tail -f filename会把filename里最尾部的内容显示在屏幕上,并且不但刷新,使你看到最新的文件内容.</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">tail[必要参数][选择参数][文件]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-f</td><td align="left">循环读取</td></tr><tr><td align="left">-q</td><td align="left">不显示处理信息</td></tr><tr><td align="left">-v</td><td align="left">显示详细的处理信息</td></tr><tr><td align="left">-c&lt;数目&gt;</td><td align="left">显示的字节数</td></tr><tr><td align="left">-n&lt;行数&gt;</td><td align="left">显示行数</td></tr><tr><td align="left">–pid&#x3D;PID</td><td align="left">与-f合用,表示在进程ID,PID死掉之后结束</td></tr><tr><td align="left">-q, –quiet, –silent</td><td align="left">从不输出给出文件名的首部</td></tr><tr><td align="left">-s, –sleep-interval&#x3D;S</td><td align="left">与-f合用,表示在每次反复的间隔休眠S秒</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示文件末尾内容</strong></p><pre><code class="bash"># 显示文件最后5行内容$ tail -n 5 log2014.log</code></pre><p><strong><code>例二</code>：循环查看文件内容</strong></p><pre><code class="bash">$ tail -f test.log</code></pre><p><strong><code>例三</code>：从第5行开始显示文件</strong></p><pre><code class="bash">$ tail -n +5 log2014.log</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（14）: head</title>
      <link href="/2016/12/14/linux-command-14-head/"/>
      <url>/2016/12/14/linux-command-14-head/</url>
      
        <content type="html"><![CDATA[<p>　　head 与 tail 就像它的名字一样的浅显易懂，它是用来显示开头或结尾某个数量的文字区块，head 用来显示档案的开头至标准输出中，而 tail 想当然尔就是看档案的结尾。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">head [参数]... [文件]...  </code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　head 用来显示档案的开头至标准输出中，默认head命令打印其相应文件的开头10行。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-q</td><td align="left">隐藏文件名</td></tr><tr><td align="left">-v</td><td align="left">显示文件名</td></tr><tr><td align="left">-c&lt;字节&gt;</td><td align="left">显示字节数</td></tr><tr><td align="left">-n&lt;行数&gt;</td><td align="left">显示的行数</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示文件的前n行</strong></p><pre><code class="bash">$ head -n 5 log2014.log</code></pre><p><strong><code>例二</code>：显示文件前n个字节</strong></p><pre><code class="bash">$ head -c 20 log2014.log</code></pre><p><strong><code>例三</code>：文件的除了最后n个字节以外的内容</strong></p><pre><code class="bash">$ head -c -32 log2014.log</code></pre><p><strong><code>例四</code>：输出文件除了最后n行的全部内容</strong></p><pre><code class="bash">$ head -n -6 log2014.log</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（13）: less</title>
      <link href="/2016/12/13/linux-command-13-less/"/>
      <url>/2016/12/13/linux-command-13-less/</url>
      
        <content type="html"><![CDATA[<p>　　less 工具也是对文件或其它输出进行分页显示的工具，应该说是linux正统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹性。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 [pageup] [pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ less [参数]  文件</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">&lt;缓冲区大小&gt; 设置缓冲区的大小</td></tr><tr><td align="left">-e</td><td align="left">当文件显示结束后，自动离开</td></tr><tr><td align="left">-f</td><td align="left">强迫打开特殊文件，例如外围设备代号、目录和二进制文件</td></tr><tr><td align="left">-g</td><td align="left">只标志最后搜索的关键词</td></tr><tr><td align="left">-i</td><td align="left">忽略搜索时的大小写</td></tr><tr><td align="left">-m</td><td align="left">显示类似more命令的百分比</td></tr><tr><td align="left">-N</td><td align="left">显示每行的行号</td></tr><tr><td align="left">-o &lt;文件名&gt;</td><td align="left">将less 输出的内容在指定文件中保存起来</td></tr><tr><td align="left">-Q</td><td align="left">不使用警告音</td></tr><tr><td align="left">-s</td><td align="left">显示连续空行为一行</td></tr><tr><td align="left">-S</td><td align="left">行过长时间将超出部分舍弃</td></tr><tr><td align="left">-x &lt;数字&gt;</td><td align="left">将“tab”键显示为规定的数字空格</td></tr><tr><td align="left">&#x2F;字符串</td><td align="left">向下搜索“字符串”的功能</td></tr><tr><td align="left">?字符串</td><td align="left">向上搜索“字符串”的功能</td></tr><tr><td align="left">n</td><td align="left">重复前一个搜索（与 &#x2F; 或 ? 有关）</td></tr><tr><td align="left">N</td><td align="left">反向重复前一个搜索（与 &#x2F; 或 ? 有关）</td></tr><tr><td align="left">b</td><td align="left">向后翻一页</td></tr><tr><td align="left">d</td><td align="left">向后翻半页</td></tr><tr><td align="left">h</td><td align="left">显示帮助界面</td></tr><tr><td align="left">Q</td><td align="left">退出less 命令</td></tr><tr><td align="left">u</td><td align="left">向前滚动半页</td></tr><tr><td align="left">y</td><td align="left">向前滚动一行</td></tr><tr><td align="left">空格键</td><td align="left">滚动一行</td></tr><tr><td align="left">回车键</td><td align="left">滚动一页</td></tr><tr><td align="left">[pagedown]</td><td align="left">向下翻动一页</td></tr><tr><td align="left">[pageup]</td><td align="left">向上翻动一页</td></tr></tbody></table><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="全屏导航"><a href="#全屏导航" class="headerlink" title="全屏导航"></a>全屏导航</h4><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ctrl + F</td><td align="left">向前移动一屏</td></tr><tr><td align="left">ctrl + B</td><td align="left">向后移动一屏</td></tr><tr><td align="left">ctrl + D</td><td align="left">向前移动半屏</td></tr><tr><td align="left">ctrl + U</td><td align="left">向后移动半屏</td></tr></tbody></table><h4 id="单行导航"><a href="#单行导航" class="headerlink" title="单行导航"></a>单行导航</h4><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">j</td><td align="left">向前移动一行</td></tr><tr><td align="left">k</td><td align="left">向后移动一行</td></tr></tbody></table><h4 id="其他导航"><a href="#其他导航" class="headerlink" title="其他导航"></a>其他导航</h4><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">G</td><td align="left">移动到最后一行</td></tr><tr><td align="left">g</td><td align="left">移动到第一行</td></tr><tr><td align="left">q &#x2F; ZZ</td><td align="left">退出 less 命令</td></tr></tbody></table><h4 id="其它有用的命令"><a href="#其它有用的命令" class="headerlink" title="其它有用的命令"></a>其它有用的命令</h4><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">v</td><td align="left">使用配置的编辑器编辑当前文件</td></tr><tr><td align="left">h</td><td align="left">显示 less 的帮助文档</td></tr><tr><td align="left">&amp;pattern</td><td align="left">仅显示匹配模式的行，而不是整个文件</td></tr></tbody></table><h4 id="标记导航"><a href="#标记导航" class="headerlink" title="标记导航"></a>标记导航</h4><blockquote><p>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置</p></blockquote><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ma</td><td align="left">使用 a 标记文本的当前位置</td></tr><tr><td align="left">‘a</td><td align="left">导航到标记 a 处</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查看文件</strong></p><pre><code class="bash">$ less log2013.log</code></pre><p><strong><code>例二</code>：ps查看进程信息并通过less分页显示</strong></p><pre><code class="bash">$ ps -ef |less</code></pre><p><strong><code>例三</code>：查看命令历史使用记录并通过less分页显示</strong></p><pre><code class="bash">$ history | less</code></pre><p><strong><code>例三</code>：浏览多个文件</strong></p><pre><code class="bash">$ Less log2013.log log2014.log</code></pre><blockquote><p>输入 ：n后，切换到 log2014.log<br>输入 ：p 后，切换到log2013.log</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（12）: more</title>
      <link href="/2016/12/12/linux-command-12-more/"/>
      <url>/2016/12/12/linux-command-12-more/</url>
      
        <content type="html"><![CDATA[<p>　　more命令，功能类似 cat ，cat命令是整个文件的内容从上到下显示在屏幕上。 more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能 。more命令从前向后读取文件，因此在启动时就加载整个文件。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ more [-dlfpcsu ] [-num ] [+/ pattern] [+ linenum] [file ... ]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　more命令和cat的功能一样都是查看文件里的内容，但有所不同的是more可以按页来查看文件的内容，还支持直接跳转行等功能。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+n</td><td align="left">从笫n行开始显示</td></tr><tr><td align="left">-n</td><td align="left">定义屏幕大小为n行</td></tr><tr><td align="left">+&#x2F;pattern</td><td align="left">每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示</td></tr><tr><td align="left">-c</td><td align="left">从顶部清屏，然后显示</td></tr><tr><td align="left">-d</td><td align="left">提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</td></tr><tr><td align="left">-l</td><td align="left">忽略Ctrl+l（换页）字符</td></tr><tr><td align="left">-p</td><td align="left">通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</td></tr><tr><td align="left">-s</td><td align="left">把连续的多个空行显示为一行</td></tr><tr><td align="left">-u</td><td align="left">把文件内容中的下画线去掉</td></tr></tbody></table><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Enter</td><td align="left">向下n行，需要定义。默认为1行</td></tr><tr><td align="left">Ctrl+F</td><td align="left">向下滚动一屏</td></tr><tr><td align="left">空格键</td><td align="left">向下滚动一屏</td></tr><tr><td align="left">Ctrl+B</td><td align="left">返回上一屏</td></tr><tr><td align="left">&#x3D;</td><td align="left">输出当前行的行号</td></tr><tr><td align="left">：f</td><td align="left">输出文件名和当前行的行号</td></tr><tr><td align="left">V</td><td align="left">调用vi编辑器</td></tr><tr><td align="left">!命令</td><td align="left">调用Shell，并执行命令</td></tr><tr><td align="left">q</td><td align="left">退出more</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：显示文件中从第3行起的内容</strong></p><pre><code class="bash">$ more +3 log2012.log</code></pre><p><strong><code>例二</code>：从文件中查找第一个出现”day3”字符串的行，并从该处前两行开始显示输出</strong></p><pre><code class="bash">$ more +/day3 log2012.log</code></pre><p><strong><code>例三</code>：设定每屏显示行数</strong></p><pre><code class="bash">$ more -5 log2012.log</code></pre><p><strong><code>例四</code>：列一个目录下的文件，由于内容太多，我们应该学会用more来分页显示。这得和管道 | 结合起来</strong></p><pre><code class="bash">$ ls -l  | more -5</code></pre><blockquote><p><strong>说明：</strong>每页显示5个文件信息，按 Ctrl+F 或者 空格键 将会显示下5条文件信息。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（11）: nl</title>
      <link href="/2016/12/11/linux-command-11-nl/"/>
      <url>/2016/12/11/linux-command-11-nl/</url>
      
        <content type="html"><![CDATA[<p>　　nl命令在linux系统中用来计算文件中行号。nl 可以将输出的文件内容自动的加上行号！其默认的结果与 cat -n 有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ nl [选项]... [文件]...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　nl 命令读取 File 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。 在输出中，nl 命令根据您在命令行中指定的标志来计算左边的行。 输入文本必须写在逻辑页中。每个逻辑页有头、主体和页脚节（可以有空节）。 除非使用 -p 标志，nl 命令在每个逻辑页开始的地方重新设置行号。 可以单独为头、主体和页脚节设置行计算标志（例如，头和页脚行可以被计算然而文本行不能）。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">种类</th><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">-b a</td><td align="left">表示不论是否为空行，也同样列出行号(类似 cat -n)</td></tr><tr><td align="left"></td><td align="left">-b t</td><td align="left">如果有空行，空的那一行不要列出行号(默认值)</td></tr><tr><td align="left">-n</td><td align="left">-n ln</td><td align="left">行号在萤幕的最左方显示</td></tr><tr><td align="left"></td><td align="left">-n rn</td><td align="left">行号在自己栏位的最右方显示，且不加 0</td></tr><tr><td align="left"></td><td align="left">-n rz</td><td align="left">行号在自己栏位的最右方显示，且加 0</td></tr><tr><td align="left">-w</td><td align="left">-w</td><td align="left">行号栏位的占用的位数</td></tr><tr><td align="left">-p</td><td align="left">-p</td><td align="left">在逻辑定界符处不重新开始计算</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：用 nl 列出 log2012.log 的内容</strong></p><pre><code class="bash"># 文件中的空白行，nl 不会加上行号$ nl log2012.log</code></pre><p><strong><code>例二</code>：用 nl 列出 log2012.log 的内容，空本行也加上行号</strong></p><pre><code class="bash">$ nl -b a log2012.log</code></pre><p><strong><code>例三</code>：让行号前面自动补上0,统一输出格式</strong></p><pre><code class="bash">$ nl -b a -n rz log2014.log</code></pre><blockquote><p>nl -b a -n rz 命令行号默认为六位，要调整位数可以加上参数 -w 3 调整为3位。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（10）: cat</title>
      <link href="/2016/12/10/linux-command-10-cat/"/>
      <url>/2016/12/10/linux-command-10-cat/</url>
      
        <content type="html"><![CDATA[<p>　　cat命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ cat [选项] [文件]...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p><strong>cat主要有三大功能</strong></p><ol><li>一次显示整个文件:<code>cat filename</code></li><li>从键盘创建一个文件:<code>cat &gt; filename</code> 只能创建新文件,不能编辑已有文件.</li><li>将几个文件合并为一个文件:<code>cat file1 file2 &gt; file</code></li></ol><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-A, –show-all</td><td align="left">等价于 -vET</td></tr><tr><td align="left">-b, –number-nonblank</td><td align="left">对非空输出行编号</td></tr><tr><td align="left">-e</td><td align="left">等价于 -vE</td></tr><tr><td align="left">-E, –show-ends</td><td align="left">在每行结束处显示 $</td></tr><tr><td align="left">-n, –number</td><td align="left">对输出的所有行编号,由1开始对所有输出的行数编号</td></tr><tr><td align="left">-s, –squeeze-blank</td><td align="left">有连续两行以上的空白行，就代换为一行的空白行</td></tr><tr><td align="left">-t</td><td align="left">与 -vT 等价</td></tr><tr><td align="left">-T, –show-tabs</td><td align="left">将跳格字符显示为 ^I</td></tr><tr><td align="left">-u</td><td align="left">(被忽略)</td></tr><tr><td align="left">-v, –show-nonprinting</td><td align="left">使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</strong></p><pre><code class="bash">$ cat -n log2012.log log2013.log</code></pre><p><strong><code>例二</code>：把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</strong></p><pre><code class="bash">$ cat -b log2012.log log2013.log log.log</code></pre><p><strong><code>例三</code>：把 log2012.log 的文件内容加上行号后输入 log.log 这个文件里</strong></p><pre><code class="bash">$ cat -n log2012.log &gt; log.log</code></pre><p><strong><code>例四</code>：使用here doc来生成文件</strong></p><pre><code class="bash">$ cat &gt;log.txt &lt;&lt;EOF&gt; Hello&gt; World&gt; Linux&gt; PWD=$(pwd)&gt; EOF</code></pre><p><strong><code>例五</code>：tac (反向列示)</strong></p><pre><code class="bash">$ tac log.txtPWD=/opt/soft/testLinuxWorldHello</code></pre><blockquote><p>tac 是将 cat 反写过来，所以他的功能就跟 cat 相反， cat 是由第一行到最后一行连续显示在萤幕上，而 tac 则是由最后一行到第一行反向在萤幕上显示出来！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（9）: touch</title>
      <link href="/2016/12/09/linux-command-9-touch/"/>
      <url>/2016/12/09/linux-command-9-touch/</url>
      
        <content type="html"><![CDATA[<p>　　linux的touch命令不常用，一般在使用make的时候可能会用到，用来修改文件时间戳，或者新建一个不存在的文件。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ touch [选项]... 文件...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　touch命令参数可更改文档或目录的日期时间，包括存取时间和更改时间。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">或–time&#x3D;atime或–time&#x3D;access或–time&#x3D;use 只更改存取时间</td></tr><tr><td align="left">-c</td><td align="left">或–no-create 不建立任何文档</td></tr><tr><td align="left">-d</td><td align="left">使用指定的日期时间，而非现在的时间</td></tr><tr><td align="left">-f</td><td align="left">此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题</td></tr><tr><td align="left">-m</td><td align="left">或–time&#x3D;mtime或–time&#x3D;modify 　只更改变动时间</td></tr><tr><td align="left">-r</td><td align="left">把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同</td></tr><tr><td align="left">-t</td><td align="left">使用指定的日期时间，而非现在的时间</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：创建不存在的文件</strong></p><pre><code class="bash">$ touch 1.txt</code></pre><p><strong><code>例二</code>：更新1.txt的时间和2.txt时间戳相同</strong></p><pre><code class="bash">$ touch -r 1.txt 2.txt</code></pre><p><strong><code>例三</code>：设定文件的时间戳</strong></p><pre><code class="bash">$ touch -t 201211142234.50 1.txt</code></pre><p><strong><code>例四</code>：创建不存在的文件</strong></p><pre><code class="bash">$ touch 1.txt</code></pre><blockquote><p><strong>说明：</strong> <code>-t  time</code> 使用指定的时间值 time 作为指定文件相应时间戳记的新值．此处的 time规定为如下形式的十进制数:    [[CC]YY]MMDDhhmm[.SS] 这里，CC为年数中的前两位，即”世纪数”；YY为年数的后两位，即某世纪中的年数．如果不给出CC的值，则touch   将把年数CCYY限定在1969–2068之内．MM为月数，DD为天将把年数CCYY限定在1969–2068之内．MM为月数，DD为天数，hh 为小时数(几点)，mm为分钟数，SS为秒数．此处秒的设定范围是0–61，这样可以处理闰秒．这些数字组成的时间是环境变量TZ指定的时区中的一个时 间．由于系统的限制，早于1970年1月1日的时间是错误的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（8）: cp</title>
      <link href="/2016/12/08/linux-command-8-cp/"/>
      <url>/2016/12/08/linux-command-8-cp/</url>
      
        <content type="html"><![CDATA[<p>　　cp命令用来复制文件或者目录，是Linux系统中最常用的命令之一。一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ cp [选项]... [-T] 源 目的$ cp [选项]... -t 目录 源...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a,–archive</td><td align="left">为每个已存在的目标文件创建备份</td></tr><tr><td align="left">-f, –force</td><td align="left">如果目标文件无法打开则将其移除并重试(当 -n 选项存在时则不需再选此项)</td></tr><tr><td align="left">-i, –interactive</td><td align="left">覆盖前询问(使前面的 -n 选项失效)</td></tr><tr><td align="left">-H</td><td align="left">跟随源文件中的命令行符号链接</td></tr><tr><td align="left">-l, –link</td><td align="left">链接文件而不复制</td></tr><tr><td align="left">-L, –dereference</td><td align="left">总是跟随符号链接</td></tr><tr><td align="left">-n, –no-clobber</td><td align="left">不要覆盖已存在的文件(使前面的 -i 选项失效)</td></tr><tr><td align="left">-P, –no-dereference</td><td align="left">不跟随源文件中的符号链接</td></tr><tr><td align="left">-p</td><td align="left">等于–preserve&#x3D;模式,所有权,时间戳</td></tr><tr><td align="left">-R, -r, –recursive</td><td align="left">复制目录及目录内的所有项目</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：复制单个文件到目标目录，文件在目标文件中存在，会询问覆盖</strong></p><pre><code class="bash"># 在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。$ cp 1.txt test5</code></pre><p><strong><code>例二</code>：复制整个目录</strong></p><pre><code class="bash"># 注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。$ cp -a test3 test5</code></pre><p><strong><code>例三</code>：复制的 log.log 建立一个连结档 log_link.log</strong></p><pre><code class="bash">$ cp -s log.log log_link.log</code></pre><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（7）: mv</title>
      <link href="/2016/12/07/linux-command-7-mv/"/>
      <url>/2016/12/07/linux-command-7-mv/</url>
      
        <content type="html"><![CDATA[<p>　　mv命令是move的缩写，可以用来移动文件或者将文件改名（move (rename) files），是Linux系统下常用的命令，经常用来备份文件或者目录</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ mv [选项] 源文件或目录 目标文件或目录</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　视mv命令中第二个参数类型的不同（是目标文件还是目标目录），mv命令将文件重命名或将其移至一个新的目录中。当第二个参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录名），它将所给的源文件或目录重命名为给定的目标文件名。当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。在跨文件系统移动文件时，mv先拷贝，再将原有文件删除，而链至该文件的链接也将丢失。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">若需覆盖文件，则覆盖前先行备份。</td></tr><tr><td align="left">-f</td><td align="left">force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</td></tr><tr><td align="left">-i</td><td align="left">若目标文件 (destination) 已经存在时，就会询问是否覆盖！</td></tr><tr><td align="left">-u</td><td align="left">若目标文件已经存在，且 source 比较新，才会更新(update)</td></tr><tr><td align="left">-t</td><td align="left">–target-directory&#x3D;DIRECTORY move all SOURCE arguments into DIRECTORY，即指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后。</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：文件改名</strong></p><pre><code class="bash">$ mv test.txt test1.txt</code></pre><p><strong><code>例二</code>：移动文件</strong></p><pre><code class="bash">#将文件test.txt 移动到/usr/doc目录下$ mv test.txt /usr/doc</code></pre><p><strong><code>例三</code>：将文件log1.txt,log2.txt,log3.txt移动到目录&#x2F;usr&#x2F;doc中</strong></p><pre><code class="bash">$ mv log1.txt log2.txt log3.txt /usr/doc$ mv -t /usr/doc log1.txt log2.txt log3.txt</code></pre><p><strong><code>例四</code>：将文件file1改名为file2，如果file2已经存在，则询问是否覆盖</strong></p><pre><code class="bash">$ mv -i log1.txt log2.txt</code></pre><p><strong><code>例五</code>：将文件file1改名为file2，即使file2存在，也是直接覆盖掉</strong></p><pre><code class="bash">$ mv -f log3.txt log2.txt</code></pre><p><strong><code>例六</code>：目录的移动</strong></p><pre><code class="bash">#将doc下的product目录移动到/usr/doc目录下$ mv doc/product /usr/doc</code></pre><p><strong><code>例七</code>：移动当前文件夹下的所有文件到上一级目录</strong></p><pre><code class="bash">$ mv * ../</code></pre><p><strong><code>例八</code>：文件被覆盖前做简单备份，前面加参数-b</strong></p><pre><code class="bash">$ mv log1.txt -b log2.txt</code></pre><blockquote><p>-b不接受参数，mv会去读取环境变量VERSION_CONTROL来作为备份策略。<br>–backup该选项指定如果目标文件存在时的动作，共有四种备份策略：</p></blockquote><ol><li>CONTROL&#x3D;none或off : 不备份。</li><li>CONTROL&#x3D;numbered或t：数字编号的备份</li><li>CONTROL&#x3D;existing或nil：如果存在以数字编号的备份，则继续编号备份m+1…n：执行mv操作前已存在以数字编号的文件log2.txt.<del>1</del>，那么再次执行将产生log2.txt<del>2</del>，以次类推。如果之前没有以数字编号的文件，则使用下面讲到的简单备份。</li><li>CONTROL&#x3D;simple或never：使用简单备份：在被覆盖前进行了简单备份，简单备份只能有一份，再次被覆盖时，简单备份也会被覆盖。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（6）: rmdir</title>
      <link href="/2016/12/06/linux-command-6-rmdir/"/>
      <url>/2016/12/06/linux-command-6-rmdir/</url>
      
        <content type="html"><![CDATA[<p>　　今天学习一下linux中命令： rmdir命令。rmdir是常用的命令，该命令的功能是删除空目录，一个目录被删除之前必须是空的。（注意，rm - r dir命令可代替rmdir，但是有很大危险性。）删除某目录时也必须具有对父目录的写权限。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ rmdir [选项]... 目录...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　该命令从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对父目录的写权限。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">- p</td><td align="left">递归删除目录dirname，当子目录删除后其父目录为空时，也一同被删除。如果整个路径被删除或者由于某种原因保留部分路径，则系统在标准输出上显示相应的信息</td></tr><tr><td align="left">-v, –verbose</td><td align="left">显示指令执行过程</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：rmdir 不能删除非空目录</strong></p><pre><code class="bash">$ rmdir docrmdir: doc: 目录非空</code></pre><p><strong><code>例二</code>：rmdir -p 当子目录被删除后使它也成为空目录的话，则顺便一并删除</strong></p><pre><code class="bash">$ rmdir -p log/product</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（5）: rm</title>
      <link href="/2016/12/05/linux-command-5-rm/"/>
      <url>/2016/12/05/linux-command-5-rm/</url>
      
        <content type="html"><![CDATA[<p>　　rm是常用的命令，该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变。<br>rm是一个危险的命令，使用的时候要特别当心，尤其对于新手，否则整个系统就会毁在这个命令（比如在&#x2F;（根目录）下执行rm * -rf）。所以，我们在执行rm之前最好先确认一下在哪个目录，到底要删除什么东西，操作时保持高度清醒的头脑。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ rm [选项] 文件...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-f, –force</td><td align="left">忽略不存在的文件，从不给出提示</td></tr><tr><td align="left">-i, –interactive</td><td align="left">进行交互式删除</td></tr><tr><td align="left">-r, -R, –recursive</td><td align="left">指示rm将参数中列出的全部目录和子目录均递归地删除</td></tr><tr><td align="left">-v, –verbose</td><td align="left">详细显示进行的步骤</td></tr><tr><td align="left">–help</td><td align="left">显示此帮助信息并退出</td></tr><tr><td align="left">–version</td><td align="left">输出版本信息并退出</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：删除文件file，系统会先询问是否删除</strong></p><pre><code class="bash">$ rm file</code></pre><p><strong><code>例二</code>：强行删除file，系统不再提示</strong></p><pre><code class="bash">$ rm -f file</code></pre><p>**<code>例三</code>：删除任何.log文件；删除前逐一询问确认 **</p><pre><code class="bash">$ rm -i *.log</code></pre><p><strong><code>例四</code>：对test文件夹进行递归删除</strong></p><pre><code class="bash">$ rm -r test</code></pre><p><strong><code>例五</code>：递归删除，系统不用一一确认</strong></p><pre><code class="bash">$ rm -rf test</code></pre><p><strong><code>例六</code>：删除以 -f 开头的文件</strong></p><pre><code class="bash">$ rm -- -f</code></pre><p><strong><code>例七</code>：自定义回收站功能</strong></p><pre><code class="bash">#下面的操作过程模拟了回收站的效果，即删除文件的时候只是把文件放到一个临时目录中，这样在需要的时候还可以恢复过来。$ myrm()&#123; D=/tmp/$(date +%Y%m%d%H%M%S); mkdir -p $D; mv &quot;$@&quot; $D &amp;&amp; echo &quot;moved to $D ok&quot;; &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（4）: mkdir</title>
      <link href="/2016/12/04/linux-command-4-mkdir/"/>
      <url>/2016/12/04/linux-command-4-mkdir/</url>
      
        <content type="html"><![CDATA[<p>　　linux mkdir 命令用来创建指定的名称的目录，要求创建目录的用户在当前目录中具有写权限，并且指定的目录名不能是当前目录中已有的目录。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ mkdir [选项] 目录...</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　通过 mkdir 命令可以实现在指定位置创建以 DirName(指定的文件名)命名的文件夹或目录。要创建文件夹或目录的用户必须对所创建的文件夹的父文件夹具有写权限。并且，所创建的文件夹(目录)不能与其父目录(即父文件夹)中的文件名重名，即同一个目录下不能有同名的(区分大小写)。</p><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-m, –mode&#x3D;模式</td><td align="left">设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask</td></tr><tr><td align="left">-p, –parents</td><td align="left">可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录</td></tr><tr><td align="left">-v, –verbose</td><td align="left">每次创建新目录都显示信息</td></tr><tr><td align="left">–help</td><td align="left">显示此帮助信息并退出</td></tr><tr><td align="left">–version</td><td align="left">输出版本信息并退出</td></tr></tbody></table><h3 id="命令是实例"><a href="#命令是实例" class="headerlink" title="命令是实例"></a>命令是实例</h3><p><strong><code>例一</code>：创建一个空目录</strong></p><pre><code class="bash">$ mkdir test</code></pre><p><strong><code>例二</code>：递归创建多个目录</strong></p><pre><code class="bash">#在当前目录创建一个嵌套文件夹test1/test11$ mkdir -p test1/test11</code></pre><p><strong><code>例三</code>：创建权限为777的目录</strong></p><pre><code class="bash">$ mkdir -m 777 test</code></pre><p><strong><code>例四</code>：创建新目录都显示信息</strong></p><pre><code class="bash">$ mkdir -v test</code></pre><p><strong><code>例五</code>：一个命令创建项目的目录结构</strong></p><pre><code class="bash">$ mkdir -vp scf/&#123;lib/,bin/,doc/&#123;info,product&#125;,logs/&#123;info,product&#125;,service/deploy/&#123;info,product&#125;&#125;mkdir: 已创建目录 “scf”mkdir: 已创建目录 “scf/lib”mkdir: 已创建目录 “scf/bin”mkdir: 已创建目录 “scf/doc”mkdir: 已创建目录 “scf/doc/info”mkdir: 已创建目录 “scf/doc/product”mkdir: 已创建目录 “scf/logs”mkdir: 已创建目录 “scf/logs/info”mkdir: 已创建目录 “scf/logs/product”mkdir: 已创建目录 “scf/service”mkdir: 已创建目录 “scf/service/deploy”mkdir: 已创建目录 “scf/service/deploy/info”mkdir: 已创建目录 “scf/service/deploy/product”[root@localhost test]# tree scf/scf/|-- bin|-- doc|   |-- info|   `-- product|-- lib|-- logs|   |-- info|   `-- product`-- service    `-- deploy        |-- info        `-- product12 directories, 0 files</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（3）: pwd</title>
      <link href="/2016/12/03/linux-command-3-pwd/"/>
      <url>/2016/12/03/linux-command-3-pwd/</url>
      
        <content type="html"><![CDATA[<p>　　Linux中用 pwd 命令来查看”当前工作目录“的完整路径。 简单得说，每当你在终端进行操作时，你都会有一个当前工作目录。<br>　　在不太确定当前位置时，就会使用pwd来判定当前目录在文件系统内的确切位置。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ pwd [选项]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　查看”当前工作目录“的完整路径</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p>一般情况下不带任何参数<br>如果目录是链接时：<br>格式：pwd -P 显示出实际路径，而非使用链接（link） 的路径</p><h3 id="实用实例"><a href="#实用实例" class="headerlink" title="实用实例"></a>实用实例</h3><p><strong><code>例一</code>：用 pwd 命令查看当前工作目录的完整路径</strong></p><pre><code class="bash">$ pwd/home/faker</code></pre><p><strong><code>例二</code>：目录连接链接时，pwd -P  显示出实际路径，而非使用连接（link）路径；pwd显示的是连接路径</strong></p><pre><code class="bash">#目录为链接时，输出链接路径$ pwd -L#目录为链接时，输出物理路径$ pwd -P/home/faker</code></pre><p><strong><code>例三</code>：当前目录被删除了，而pwd命令仍然显示那个目录</strong></p><pre><code class="bash">$ cd /opt/soft$ rm ../soft -rf$ pwd/opt/soft$ /bin/pwd/bin/pwd: couldnt find directory entry in “..” with matching i-node/home/faker</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（2）: cd</title>
      <link href="/2016/12/02/linux-command-2-cd/"/>
      <url>/2016/12/02/linux-command-2-cd/</url>
      
        <content type="html"><![CDATA[<p>　　Linux cd 命令可以说是Linux中最基本的命令语句，其他的命令语句要进行操作，都是建立在使用 cd 命令上的。所以，学习Linux 常用命令，首先就要学好 cd 命令的使用方法技巧。</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="bash">$ cd [目录名]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　切换当前目录至目标目录</p><h3 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a>常用范例</h3><p><strong><code>例一</code>：进入系统根目录</strong></p><pre><code class="bash">$ cd /</code></pre><p><strong><code>例二</code>：进入父级目录</strong></p><pre><code class="bash">$ cd ..$ cd ..//</code></pre><p><strong><code>例三</code>：使用 cd 命令进入当前用户主目录</strong></p><pre><code class="bash">$ cd$ cd ~</code></pre><p><strong><code>例四</code>：跳转到指定目录</strong></p><pre><code class="bash">$ cd /usr/bin</code></pre><p><strong><code>例五</code>：返回进入此目录之前所在的目录</strong></p><pre><code class="bash">$ cd -</code></pre><p><strong><code>例六</code>：把上个命令的参数作为cd参数使用</strong></p><pre><code class="bash">$ cd !$</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令（1）: ls</title>
      <link href="/2016/12/01/linux-command-1-ls/"/>
      <url>/2016/12/01/linux-command-1-ls/</url>
      
        <content type="html"><![CDATA[<p>　　ls命令是linux下最常用的命令。ls命令就是list的缩写，缺省下ls用来打印出当前目录的清单，如果ls指定其他目录，那么就会显示指定目录里的文件及文件夹清单。 通过ls命令不仅可以查看linux文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)、查看目录信息等等。ls命令在日常的linux操作中用的很多!</p><span id="more"></span><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre><code class="shell">$ ls [选项] [目录名]</code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>列出目标目录中所有的子目录和文件。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-a,–all</td><td align="left">列出目录下的所有文件，包括以 . 开头的隐含文件</td></tr><tr><td align="left">-A</td><td align="left">同-a，但不列出“.”(表示当前目录)和“..”(表示当前目录的父目录)。</td></tr><tr><td align="left">-c  配合 -lt</td><td align="left">根据 ctime 排序及显示 ctime (文件状态最后更改的时间)配合 -lt：显示 ctime 但根据名称排序否则：根据 ctime 排序</td></tr><tr><td align="left">-C</td><td align="left">每栏由上至下列出项目</td></tr><tr><td align="left">-color[&#x3D;WHEN]</td><td align="left">控制是否使用色彩分辨文件。WHEN 可以是’never’、’always’或’auto’其中之一</td></tr><tr><td align="left">-d,–directory</td><td align="left">将目录象文件一样显示，而不是显示其下的文件。</td></tr><tr><td align="left">-D,–dired</td><td align="left">产生适合 Emacs 的 dired 模式使用的结果</td></tr><tr><td align="left">-f</td><td align="left">对输出的文件不进行排序，-aU 选项生效，-lst 选项失效</td></tr><tr><td align="left">-g</td><td align="left">类似 -l,但不列出所有者</td></tr><tr><td align="left">-G, –no-group</td><td align="left">不列出任何有关组的信息</td></tr><tr><td align="left">-h,–human-readable</td><td align="left">以容易理解的格式列出文件大小 (例如 1K 234M 2G)</td></tr><tr><td align="left">–si</td><td align="left">类似 -h,但文件大小取 1000 的次方而不是 1024</td></tr><tr><td align="left">-H, –dereference-command-line</td><td align="left">使用命令列中的符号链接指示的真正目的地</td></tr><tr><td align="left">–indicator-style&#x3D;&lt;方式&gt;</td><td align="left">指定在每个项目名称后加上指示符号&lt;方式&gt;：none (默认)，classify (-F)，file-type (-p)</td></tr><tr><td align="left">-i, –inode</td><td align="left">印出每个文件的 inode 号</td></tr><tr><td align="left">-I,–ignore&#x3D;样式</td><td align="left">不印出任何符合 shell 万用字符&lt;样式&gt;的项目</td></tr><tr><td align="left">-k</td><td align="left">即 –block-size&#x3D;1K,以 k 字节的形式表示文件的大小</td></tr><tr><td align="left">-l</td><td align="left">除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。</td></tr><tr><td align="left">-L, –dereference</td><td align="left"></td></tr><tr><td align="left">-m</td><td align="left">所有项目以逗号分隔，并填满整行行宽</td></tr><tr><td align="left">-o</td><td align="left">类似 -l,显示文件的除组信息外的详细信息。</td></tr><tr><td align="left">-r, –reverse</td><td align="left">依相反次序排列</td></tr><tr><td align="left">-R, –recursive</td><td align="left">同时列出所有子目录层</td></tr><tr><td align="left">-s,–size</td><td align="left">以块大小为单位列出所有文件的大小</td></tr><tr><td align="left">-S</td><td align="left">根据文件大小排序</td></tr><tr><td align="left">–sort&#x3D;WORD</td><td align="left">可选用的 WORD 和它们代表的相应选项： <br>extension -X status -c<br>none -U time -t<br>size -S atime -u<br>time -t access -u<br>version -v use -u</td></tr><tr><td align="left">-t</td><td align="left">以文件修改时间排序</td></tr><tr><td align="left">-u</td><td align="left">配合 -lt:显示访问时间而且依访问时间排序<br>配合 -l:显示访问时间但根据名称排序<br>否则：根据访问时间排序</td></tr><tr><td align="left">-U</td><td align="left">不进行排序;依文件系统原有的次序列出项目</td></tr><tr><td align="left">-v</td><td align="left">根据版本进行排序</td></tr><tr><td align="left">-w, –width&#x3D;COLS</td><td align="left">自行指定屏幕宽度而不使用目前的数值</td></tr><tr><td align="left">-x</td><td align="left">逐行列出项目而不是逐栏列出</td></tr><tr><td align="left">-X</td><td align="left">根据扩展名排序</td></tr><tr><td align="left">-1</td><td align="left">每行只列出一个文件</td></tr><tr><td align="left">–help</td><td align="left">显示此帮助信息并离开</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息并离开</td></tr></tbody></table><h3 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a>常用范例</h3><p><strong><code>例一</code>：列出&#x2F;home&#x2F;faker&#x2F; 文件夹下的所有文件和目录的详细资料</strong></p><pre><code class="bash">$ ls -l -R /home/faker$ ls -lR /home/faker</code></pre><p><strong><code>例二</code>：列出当前目录中所有以“t”开头的目录的详细内容，可以使用如下命令</strong></p><pre><code class="bash">$ ls -l t*</code></pre><p><strong><code>例三</code>：只列出文件下的子目录</strong></p><pre><code class="bash">$ ls -F /opt/soft |grep /$</code></pre><p><strong><code>例四</code>：列出文件下的子目录详细情况</strong></p><pre><code class="bash">$ ls -l /opt/soft | grep &quot;^d&quot;</code></pre><p><strong><code>例五</code>：列出目前工作目录下所有名称是s 开头的文件，愈新的排愈后面，可以使用如下命令</strong></p><pre><code class="bash">$ ls -ltr s*</code></pre><p><strong><code>例六</code>：列出目前工作目录下所有档案及目录;目录于名称后加”&#x2F;“, 可执行档于名称后加<code>*</code></strong></p><pre><code class="bash">$ ls -AF</code></pre><p><strong><code>例七</code>：计算当前目录下的文件数和目录数</strong></p><pre><code class="bash">$ ls -l * |grep &quot;^-&quot;|wc -l    ---文件个数$ ls -l * |grep &quot;^d&quot;|wc -l    ---目录个数</code></pre><p><strong><code>例八</code>：在ls中列出文件的绝对路径</strong></p><pre><code class="bash">$ ls | sed &quot;s:^:`pwd`/:&quot;</code></pre><p><strong><code>例九</code>：列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</strong></p><pre><code class="bash">$ find $PWD -maxdepth 1 | xargs ls -ld</code></pre><p><strong><code>例十</code>：列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</strong></p><pre><code class="bash">$ find $PWD -maxdepth 1 | xargs ls -ld</code></pre><p><strong><code>例十</code>：递归列出当前目录下的所有文件（包括隐藏文件）的绝对路径</strong></p><pre><code class="bash">$ find $PWD | xargs ls -ld</code></pre><p><strong><code>例十</code>：指定文件时间输出格式</strong></p><pre><code class="bash">$ ls -tl --time-style=full-iso$ ls -ctl --time-style=long-iso</code></pre><pre><code class="bash">2016-08-05 22:17:06.020535551 +08002016-10-29 12:03</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery之checkbox|radio|select操作</title>
      <link href="/2016/11/23/jQuery-checkbox-radio-select/"/>
      <url>/2016/11/23/jQuery-checkbox-radio-select/</url>
      
        <content type="html"><![CDATA[<p>jQuery1.6中添加了prop方法,看起来和用起来都和attr方法一样,但是在一些特殊情况下,attribute和properties的区别非常大,在jQuery1.6之前，.attr()方法在获取一些attributes的时候使用了property值，这样会导致一些不一致的行为。在jQuery1.6中，.prop()方法提供了一中明确的获取property值得方式，这样.attr()方法仅返回attributes。 –摘自jQuery API文档</p><span id="more"></span><h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><pre><code class="html">&lt;input type=&#39;checkbox&#39; value=&#39;1&#39;/&gt;&lt;input type=&#39;checkbox&#39; value=&#39;2&#39;/&gt;&lt;input type=&#39;checkbox&#39; value=&#39;3&#39;/&gt;</code></pre><pre><code class="javascript">$(&quot;input[type=checkbox]&quot;)                    //获取所有的checkbox$(&quot;input[type=checkbox]:checked&quot;)            //获取所有的被选中的checkbox$(&quot;input[type=checkbox]:not(:checked)&quot;)      //获取所有未被选中的checkbox$(&quot;input[type=checkbox]&quot;).not(&quot;:checked&quot;)    //获取所有未被选中的checkbox$(&quot;input[type=checkbox]:first&quot;)              //获取第一个checkbox的value值$(&quot;input[type=checkbox]:checked&quot;).length     //获取被选中checkbox的数量$(&quot;input[type=checkbox]:first&quot;).prop(&quot;checked&quot;)               //判断第一个checkbox是否被选中$(&quot;input[type=checkbox]:first&quot;).prop(&quot;checkbox&quot;,true)         //选中第一个checkbox$(&quot;input[type=checkbox]:not(:checked)&quot;).prop(&quot;checked&quot;,true) //全选$(&quot;input[type=checkbox]:checkbox&quot;).prop(&quot;checked&quot;,false)     //都不选中//反选$(&quot;input[type=checkbox]&quot;).each(function()&#123;    if($(this).prop(&quot;checked&quot;))&#123;        $(this).prop(&quot;checked&quot;,false);    &#125;else&#123;        $(this).prop(&quot;checked&quot;,true);    &#125;&#125;)</code></pre><h2 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h2><pre><code class="html">&lt;input type=&#39;radio&#39; name=&#39;rank&#39; value=&#39;1&#39; /&gt;&lt;input type=&#39;radio&#39; name=&#39;rank&#39; value=&#39;2&#39; /&gt;&lt;input type=&#39;radio&#39; name=&#39;rank&#39; value=&#39;3&#39; /&gt;</code></pre><pre><code class="javascript">$(&quot;input[type=radio]&quot;)                 //获取所有的radio$(&quot;input[type=radio]:checked&quot;)         //获取被选中的radio$(&quot;input[type=radio]:not(:checkbox)&quot;)  //获取所有没有被选中的radio$(&quot;input[type=radio]:checked&quot;).val()   //获取被选中的radio的value值$(&quot;input[type=radio]:first&quot;).prop(&quot;checked&quot;)       //判断第一个radio是否被选中$(&quot;input[type=radio]:first&quot;).prop(&quot;checked&quot;,true)  //选中第一个radio</code></pre><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><pre><code class="html">&lt;select&gt;    &lt;option value=&#39;1&#39;&gt;1&lt;/option&gt;    &lt;option value=&#39;2&#39;&gt;2&lt;/option&gt;    &lt;option value=&#39;4&#39;&gt;3&lt;/option&gt;&lt;/select&gt;</code></pre><pre><code class="javascript">$(&quot;select option:selected&quot;)        //获取被选中的option$(&quot;select&quot;).val()                  //获取选中option的value值$(&quot;select option:selected&quot;).text() //获取被选中的option的text值$(&quot;select option:first&quot;).prop(&quot;selected&quot;)           //判断第一个option是否被选中$(&quot;select option:first&quot;).prop(&quot;selected&quot;,true)      //选中第一个option$(&quot;select option:selected&quot;).prop(&quot;selected&quot;,false)  //取消当前选中,然后默认选中第一个</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery选择器与节点操作</title>
      <link href="/2016/11/22/jQuery-selector/"/>
      <url>/2016/11/22/jQuery-selector/</url>
      
        <content type="html"><![CDATA[<p>jQuery 是一个 JavaScript 函数库。jQuery的语法设计使得许多操作变得容易，如操作文档对象（document）、选择文档对象模型（DOM）元素、创建动画效果、处理事件、以及开发Ajax程序。jQuery也提供了给开发人员在其上创建插件的能力。这使开发人员可以对底层交互与动画、高级效果和高级主题化的组件进行抽象化。</p><span id="more"></span><h2 id="jQuery获取元素"><a href="#jQuery获取元素" class="headerlink" title="jQuery获取元素"></a>jQuery获取元素</h2><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><pre><code class="JavaScript">//元素选择器 &lt;div &gt;$(&quot;div&quot;)</code></pre><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><pre><code class="JavaScript">//id选择器 &lt;div id=&#39;id&#39;&gt;$(&quot;#id&quot;) $(&quot;div#id&quot;)</code></pre><h3 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h3><pre><code class="javascript">//class选择器 &lt;div class=&#39;class&#39;&gt;$(&quot;.class&quot;) $(&quot;div.class&quot;)</code></pre><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><pre><code class="html">&lt;li class=&#39;check&#39; type=&#39;li_01&#39;&gt;&lt;/li&gt;&lt;li type=&#39;li_02&#39;&gt;&lt;/li&gt;&lt;li type=&#39;li_03&#39;&gt;&lt;/li&gt;</code></pre><pre><code class="javascript">//通过属性获取 如果属性值为有特殊字符，一定要加引号$(&quot;[type]&quot;)                  //获取有type属性的元素$(&quot;[type=&#39;li_01&#39;]&quot;)          //获取type值等于&#39;li_01&#39;的元素$(&quot;[type!=&#39;li_01&#39;]&quot;)         //获取type值不等于&#39;li_01&#39;的元素$(&quot;[type*=&#39;li&#39;]&quot;)            //模糊匹配 获取type值包含&#39;li&#39;的元素$(&quot;[type^=&#39;li&#39;]&quot;)            //模糊匹配 获取type值以&#39;li&#39;开始的元素$(&quot;[type$=&#39;01&#39;]&quot;)            //模糊匹配 获取type值以&#39;01&#39;结尾的元素$(&quot;li[class=&#39;check&#39;][type]&quot;) //获取多个条件同时满足的元素</code></pre><h3 id="选择器"><a href="#选择器" class="headerlink" title="* 选择器"></a>* 选择器</h3><pre><code class="javascript">//遍历form下的所有元素,将其margin设置0$(&#39;form *&#39;).css(&#39;margin&#39;,&#39;0px&#39;)</code></pre><h3 id="并列选择器"><a href="#并列选择器" class="headerlink" title="并列选择器"></a>并列选择器</h3><pre><code class="javascript">$(&#39;p, div&#39;).css(&#39;color&#39;,&#39;red&#39;); //将p元素和div元素的字体颜色设置为red</code></pre><h3 id="层叠选择器"><a href="#层叠选择器" class="headerlink" title="层叠选择器"></a>层叠选择器</h3><pre><code class="html">&lt;div class=&#39;a&#39;&gt;                  &lt;!-- 父级div --&gt;    &lt;div class=&#39;a1&#39;&gt;             &lt;!-- 子级div1 --&gt;        &lt;div class=&#39;a11&#39;&gt;&lt;/div&gt;  &lt;!-- 孙级div1 --&gt;    &lt;/div&gt;       &lt;div class=&#39;a2&#39;&gt;&lt;/div&gt;       &lt;!-- 子级div2 --&gt;    &lt;div class=&#39;a3&#39;&gt;&lt;/div&gt;       &lt;!-- 子级div3 --&gt;    &lt;span&gt;&lt;/span&gt;                &lt;!-- 子级span1 --&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">$(&quot;.a div&quot;)       //选择class=a的元素下所有的div 即选择到子级div1,2,3 孙级div1$(&quot;.a &gt; div&quot;)     //选择class=a的元素的所有子div元素, 即选择到子级div1,2,3;$(&quot;div + span&quot;)   //选择所有的div元素的下一个input元素节点,即选择到:子级div3$(&quot;.a1 ~ div&quot;)    //同胞选择器,返回class为a2的标签元素的所有属于同一个父元素的div标签,即div1,2,3</code></pre><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><pre><code class="html">&lt;ul&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;    &lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><pre><code class="javascript">$(&quot;li:first&quot;)     //选择所有li元素的第一个$(&quot;li:last&quot;)      //选择所有li元素的最后一个$(&quot;li:even&quot;)      //选择所有li元素的第0,2,4... ...个元素(序号从0开始)$(&quot;li:odd&quot;)       //选择所有li元素的第1,3,5... ...个元素$(&quot;li:eq(2)&quot;)     //选择所有li元素中的第三个(即序号为2)$(&quot;li:gt(3)&quot;)     //选择所有li元素中序号大于3的li元素$(&quot;li:ll(2)&quot;)     //选择所有li元素中序号小于2的li元素</code></pre><pre><code class="html">&lt;input type=&quot;checkbox&quot; /&gt;&lt;input type=&quot;checkbox&quot; /&gt;</code></pre><pre><code class="javascript">$(&quot;input[type=&#39;checkbox&#39;]:checked&quot;)        //获取所有已被选中的type等于checkbox的input元素$(&quot;input[type=&#39;checkbox&#39;]:not(:checked)&quot;)  //获取所有未被选中的type等于checkbox的input元素</code></pre><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><pre><code class="javascript">$(&quot;div:contains(&#39;Faker&#39;)&quot;)     //选择所有div中含有Faker文本的元素$(&quot;div:empty&quot;)                 //选择所有div中为空(不包含任何元素/文本)的元素$(&quot;div:has(&#39;p&#39;)&quot;)              //选择所有div中包含p元素的元素$(&quot;div:parent&quot;)                //选择所有的含有子元素或文本的div</code></pre><h3 id="可视化过滤器"><a href="#可视化过滤器" class="headerlink" title="可视化过滤器"></a>可视化过滤器</h3><pre><code class="javascript">$(&quot;div:hidden&quot;)            //选择所有被hidden的div元素$(&quot;div:not(:hidden)&quot;)      //选择所有没有被hidden的div元素$(&quot;div:visible&quot;)           //所有可视化的div元素$(&quot;div:not(:visible)&quot;)     //所有非可视化的div元素</code></pre><h3 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h3><pre><code class="html">&lt;body&gt;    &lt;div class=&#39;d1&#39;&gt;        &lt;div class=&#39;d11&#39;&gt;            &lt;div class=&#39;d111&#39;&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><pre><code class="javascript">$(&quot;body div:first-child&quot;)  //返回所有的body元素下 所有div 为父元素的第一个元素 的元素.//:first 与 :first-child 的区别用法//$(&quot;body div:first&quot;)只匹配到第一个合适的元素 即只匹配到 d1//$(&quot;body div:first-child&quot;) 匹配所有合适的元素:d1是body的第一个元素,d11是d1的第一个元素..//所以匹配到d1,d11,d111$(&quot;div span:last-child&quot;)   //返回所有的body元素下 所有div 为父元素的最后一个元素 的元素.//:last 与 :last-child 的区别参考first$(&quot;div button:only-child&quot;) //如果button是它父级元素的唯一子元素,此button将会被匹配</code></pre><h3 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a>表单元素选择器</h3><pre><code class="javascript">$(&quot;:input&quot;)    //选择所有的表单输入元素，包括input, textarea, select 和 button$(&quot;:text&quot;)     //选择所有的text input元素$(&quot;:password&quot;) //选择所有的password input元素$(&quot;:radio&quot;)    //选择所有的radio input元素$(&quot;:checkbox&quot;) //选择所有的checkbox input元素$(&quot;:submit&quot;)   //选择所有的submit input元素$(&quot;:image&quot;)    //选择所有的image input元素$(&quot;:reset&quot;)    //选择所有的reset input元素$(&quot;:button&quot;)   //选择所有的button input元素$(&quot;:file&quot;)     //选择所有的file input元素$(&quot;:hidden&quot;)   //选择所有类型为hidden的input元素或表单的隐藏域</code></pre><h3 id="表单元素过滤器"><a href="#表单元素过滤器" class="headerlink" title="表单元素过滤器"></a>表单元素过滤器</h3><pre><code class="javascript">$(&quot;:enabled&quot;)               //选择所有的可操作的表单元素$(&quot;:disabled&quot;)              //选择所有的不可操作的表单元素$(&quot;:checked&quot;)               //选择所有的被checked的表单元素$(&quot;select option:selected&quot;) //选择所有的select 的子元素中被selected的元素</code></pre><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="获取和操作节点属性"><a href="#获取和操作节点属性" class="headerlink" title="获取和操作节点属性"></a>获取和操作节点属性</h3><pre><code class="html">&lt;a href=&#39;index.html&#39; data-type=&#39;a&#39; style=&quot;color:red;&quot;&gt;index&lt;/a&gt;&lt;input value=&#39;user&#39; /&gt;</code></pre><pre><code class="javascript">$(&quot;a&quot;).attr(&quot;href&quot;);               //获取href属性值$(&quot;a&quot;).attr(&quot;href&quot;,&quot;about.html&quot;);  //设置href属性值$(&quot;a&quot;).data(&quot;type&quot;);               //获取data-type属性值$(&quot;a&quot;).css(&quot;color&quot;);               //通过key(color/display/....)获取css值$(&quot;a&quot;).css(&quot;color&quot;,&quot;black&quot;);       //通过key/value 设置css属性$(&quot;a&quot;).text();                     //获取a的文本节点值$(&quot;a&quot;).text(&quot;Index.html&quot;);         //设置a的文本节点值$(&quot;input&quot;).val();                  //获取input的value值$(&quot;input&quot;).val(&quot;username&quot;);        //设置input的value值</code></pre><h3 id="插入节点的方法"><a href="#插入节点的方法" class="headerlink" title="插入节点的方法"></a>插入节点的方法</h3><pre><code class="html">&lt;div class=&quot;head&quot;&gt;    &lt;span&gt;Faker&lt;span&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">$(&quot;.head&quot;).append(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;)  //在.head中的最后插入一段html//结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt;$(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).appendTo(&quot;.head&quot;) //在.head中的最后插入一段html,//结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt;$(&quot;.head&quot;).prepend(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;)  //在.head中的开始插入一段html,//结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;/div&gt;$(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).prependTo(&quot;.head&quot;)  //在.head中的开始插入一段html,//结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;/div&gt;$(&quot;.head *:first&quot;).after(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;)  //在.head中的第一个元素后插入一段html,//结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt;$(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).insertAfter(&quot;.head *:first&quot;)  //在.head中的第一个元素后插入一段html,//结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt;$(&quot;.head *:first&quot;).before(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;)  //在.head中的第一个元素前插入一段html,//结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;/div&gt;$(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).insertBefore(&quot;.head *:first&quot;)  //在.head中的第一个元素后插入一段html,//结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;/div&gt;</code></pre><h3 id="load-方法"><a href="#load-方法" class="headerlink" title="$.load()方法"></a>$.load()方法</h3><blockquote><p>在指定位置加载请求回来的html页面</p></blockquote><pre><code class="html">&lt;div class=&quot;head&quot;&gt;&lt;/div&gt;</code></pre><pre><code class="javascript">$(&quot;.head&quot;).load(url[,data][,callback])url:           请求HTML页面的URL地址data(可选):     请求的key/value参数callback(可选)  请求完成的回调函数</code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea常用快捷键</title>
      <link href="/2016/11/05/idea-shortcuts/"/>
      <url>/2016/11/05/idea-shortcuts/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工欲善其事 , 必先利其器</p></blockquote><span id="more"></span><p>Idea作为IDE是相当niubility,但是要运用自如还得掌握一些常用快捷键,才能在开发过程中运用自如<br>以下是idea的默认快捷键,如果英语能力没有问题,可以在Help-&gt;Keymap Reference 查看官方文档<br>当然作为一款优秀的IDE,怎么会少了自定义快捷键(File-&gt;Setting-&gt;Keymap,可通过动作名&#x2F;快捷键组合双向查找)<br>好了,下面是博主在Java相关开发过程中常用到的一些快捷键</p><h2 id="常用快捷键组合"><a href="#常用快捷键组合" class="headerlink" title="常用快捷键组合"></a>常用快捷键组合</h2><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table><thead><tr><th align="left">序号</th><th align="left">快捷键组合</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"></td><td align="left">Ctrl+D</td><td align="left">重复光标所在行&#x2F;或选中部分</td></tr><tr><td align="left"></td><td align="left">Ctrl+C</td><td align="left">复制光标所在行&#x2F;或选中部分</td></tr><tr><td align="left"></td><td align="left">Ctrl+V</td><td align="left">粘贴</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+V</td><td align="left">选择粘贴最近5次复制的内容</td></tr><tr><td align="left"></td><td align="left">Ctrl+X</td><td align="left">删除光标所在行&#x2F;或选中部分</td></tr><tr><td align="left"></td><td align="left">Ctrl+Y</td><td align="left">删除光标所在行&#x2F;或选中行</td></tr><tr><td align="left"></td><td align="left">Shift+Enter</td><td align="left">向下插入新行</td></tr><tr><td align="left"></td><td align="left">Alt+Shift+↑&#x2F;↓</td><td align="left">移动当前行到上&#x2F;下一行</td></tr><tr><td align="left"></td><td align="left">Ctrl+Alt+←&#x2F;→</td><td align="left">定位到上&#x2F;下一次光标位置</td></tr><tr><td align="left"></td><td align="left">Ctrl+I</td><td align="left">实现接口方法</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+o</td><td align="left">删除没用的import</td></tr><tr><td align="left"></td><td align="left">Ctrl+O</td><td align="left">重写父类方法</td></tr><tr><td align="left"></td><td align="left">Ctrl+W</td><td align="left">选中当前单词</td></tr><tr><td align="left"></td><td align="left">Ctrl+P</td><td align="left">提示参数</td></tr><tr><td align="left"></td><td align="left">Ctrl+Q</td><td align="left">查看方法&#x2F;类的注释文档</td></tr><tr><td align="left"></td><td align="left">Ctrl+Alt+L</td><td align="left">格式化当前模板</td></tr><tr><td align="left"></td><td align="left">Ctrl+&#x2F;</td><td align="left">注释当前行,或选中行</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+&#x2F;</td><td align="left">注释选中部分</td></tr><tr><td align="left"></td><td align="left">&#x2F;**+回车(类&#x2F;方法&#x2F;属性前)</td><td align="left">添加注释</td></tr></tbody></table><h3 id="搜索-替换"><a href="#搜索-替换" class="headerlink" title="搜索&#x2F;替换"></a>搜索&#x2F;替换</h3><table><thead><tr><th align="left">序号</th><th align="left">快捷键组合</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"></td><td align="left">Ctrl+N</td><td align="left">通过类名(文件名)的关键字快速打开文件(仅限.java文件)</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+N</td><td align="left">通过文件名关键字快速打开文件</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+N(两次)</td><td align="left">通过文件名关键字快速打开文件(包括非本项目内文件,如Maven引入的)</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+Alt+N</td><td align="left">通过关键字(包括类名&#x2F;方法名&#x2F;url映射)快速打开文件,定位到类名&#x2F;方法名&#x2F;url映射的方法</td></tr><tr><td align="left"></td><td align="left">Ctrl+F</td><td align="left">搜索关键字(支持正则)在当前文件</td></tr><tr><td align="left"></td><td align="left">F3</td><td align="left">找下一个</td></tr><tr><td align="left"></td><td align="left">Shift+F3</td><td align="left">找上一个</td></tr><tr><td align="left"></td><td align="left">Ctrl+R</td><td align="left">替换关键字(支持正则)在当前文件</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+F</td><td align="left">在所有文件(可以指定过滤文件)中查找关键字(支持正则)</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+R</td><td align="left">在所有文件(可以指定过滤文件)中替换关键字(支持正则)</td></tr></tbody></table><h3 id="debugging"><a href="#debugging" class="headerlink" title="debugging"></a>debugging</h3><table><thead><tr><th align="left">序号</th><th align="left">快捷键组合</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"></td><td align="left">F8</td><td align="left">Step over(跳过下一行)</td></tr><tr><td align="left"></td><td align="left">F7</td><td align="left">Step into(跳入当前行调用的方法体内)</td></tr><tr><td align="left"></td><td align="left">Shift+F7</td><td align="left">Smart Step into(跳过)</td></tr></tbody></table><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntellijIDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web.xml详解</title>
      <link href="/2016/10/24/web-xml/"/>
      <url>/2016/10/24/web-xml/</url>
      
        <content type="html"><![CDATA[<p>web.xml文件是用来配置:欢迎页、servlet、filter、listener等的. 当你的web项目工程没用到这些时,你可以不用web.xml文件来配置你的web工程。<br>如果项目中有多项标签,其加载顺序依次是:context-param &gt;&gt; listener &gt;&gt; filter &gt;&gt; servlet(同类多个节点出现顺序依次加载)</p><span id="more"></span><ol><li>web.xml先读取context-param和listener这两种节点；</li><li>然后容器创建一个ServletContext(上下文)，应用于整个项目；</li><li>容器会将读取到的context-param转化为键值对并存入servletContext；</li><li>根据listener创建监听；</li><li>容器会读取，根据指定的类路径来实例化过滤器；</li><li>此时项目初始化完成；</li><li>在发起第一次请求是，servlet节点才会被加载实例化。</li></ol><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><h3 id="context-param"><a href="#context-param" class="headerlink" title="context-param"></a>context-param</h3><p>context-param节点是web.xml中用于配置应用于整个web项目的​上下文。包括两个子节点，其中param-name 设定上下文的参数名称。必须是唯一名称；param-value 设定的参数名称的值。</p><p>读取节点的方法如下：</p><pre><code class="xml">$&#123;initParam.参数名&#125;</code></pre><p>Servlet中String paramValue&#x3D;getServletContext().getInitParameter(“参数名”)​</p><p>web.xml中配置spring必须使用listener节点，但context-param节点可有可无，如果缺省则默认contextConfigLocation路径为“&#x2F;WEB-INF&#x2F;applicationContext.xml”；如果有多个xml文件，使用”,“分隔</p><h3 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h3><pre><code class="xml">&lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt;&lt;/listener&gt;</code></pre><p>为web应用程序定义监听器，监听器用来监听各种事件，比如：application和session事件，所有的监听器按照相同的方式定义，功能取决去它们各自实现的接口，常用的Web事件接口有如下几个：<br><code>ServletContextListener</code>：用于监听Web应用的启动和关闭；<br><code>ServletContextAttributeListener</code>：用于监听ServletContext范围（application）内属性的改变；<br><code>ServletRequestListener</code>：用于监听用户的请求；<br><code>ServletRequestAttributeListener</code>：用于监听ServletRequest范围（request）内属性的改变；<br><code>HttpSessionListener</code>：用于监听用户session的开始和结束；<br><code>HttpSessionAttributeListener</code>：用于监听HttpSession范围（session）内属性的改变。</p><p>配置Listener只要向Web应用注册Listener实现类即可，无序配置参数之类的东西，因为Listener获取的是Web应用ServletContext（application）的配置参数。为Web应用配置Listener的两种方式：</p><ol><li>使用@WebListener修饰Listener实现类即可。</li><li>在web.xml文档中使用进行配置。</li></ol><h3 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h3><p>servlet即配置所需用的servlet，用于处理及响应客户的请求。容器的Context对象对请求路径(URL)做出处理，去掉请求URL的上下文路径后，按路径映射规则和Servlet映射路径（）做匹配，如果匹配成功，则调用这个Servlet处理请求。</p><h4 id="为Servlet命名："><a href="#为Servlet命名：" class="headerlink" title="为Servlet命名："></a>为Servlet命名：</h4><pre><code class="xml">&lt;servlet&gt;  &lt;servlet-name&gt;servlet&lt;/servlet-name&gt;  &lt;servlet-class&gt;org.whatisjava.TestServlet&lt;/servlet-class&gt;  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;</code></pre><h4 id="为Servlet定制URL"><a href="#为Servlet定制URL" class="headerlink" title="为Servlet定制URL"></a>为Servlet定制URL</h4><pre><code class="xml">&lt;servlet-mapping&gt;&lt;servlet-name&gt;servlet&lt;/servlet-name&gt;&lt;url-pattern&gt;*.do&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><h4 id="Load-on-startup"><a href="#Load-on-startup" class="headerlink" title="Load-on-startup"></a>Load-on-startup</h4><p>Load-on-startup 元素在web应用启动的时候指定了servlet被加载的顺序，它的值必须是一个整数。如果它的值是一个负整数或是这个元素不存在，那么容器会在该servlet被调用的时候，加载这个servlet 。如果值是正整数或零，容器在配置的时候就加载并初始化这个servlet，容器必须保证值小的先被加载。如果值相等，容器可以自动选择先加载谁。<br>当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；<br>当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。<br>正数的值越小，启动该servlet的优先级越高。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>设置过滤器:如编码过滤器,过滤所有资源</p><pre><code class="xml">&lt;filter&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;init-param&gt;        &lt;param-name&gt;forceEncoding&lt;/param-name&gt;        &lt;param-value&gt;true&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;</code></pre><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>设置会话(Session)过期时间,其中时间以分钟为单位,加入设置60分超时:</p><pre><code class="xml">&lt;session-config&gt;    &lt;session-timeout&gt;60&lt;/session-timeout&gt;&lt;/session-config&gt;</code></pre><h3 id="welcom-file-list"><a href="#welcom-file-list" class="headerlink" title="welcom-file-list"></a>welcom-file-list</h3><pre><code class="xml">&lt;welcome-file-list&gt;  &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;  &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;</code></pre><blockquote><p>PS:指定了两个欢迎页面,显示时按顺序从第一个找起，如果第一个存在，就显示第一个，后面的不起作用。如果第一个不存在，就找第二个，以此类推。如果都没有就404.</p></blockquote><h4 id="关于欢迎页面："><a href="#关于欢迎页面：" class="headerlink" title="关于欢迎页面："></a>关于欢迎页面：</h4><p>访问一个网站时，默认看到的第一个页面就叫欢迎页，一般情况下是由首页来充当欢迎页的。一般情况下，我们会在web.xml中指定欢迎页。但 web.xml并不是一个Web的必要文件，没有web.xml，网站仍然是可以正常工作的。只不过网站的功能复杂起来后，web.xml的确有非常大用处，所以，默认创建的动态web工程在WEB-INF文件夹下面都有一个web.xml文件。</p><h3 id="error-page"><a href="#error-page" class="headerlink" title="error-page"></a>error-page</h3><pre><code class="xml">&lt;!-- 错误码 --&gt;&lt;error-page&gt;    &lt;error-code&gt;404&lt;/error-code&gt;    &lt;location&gt;/error404.jsp&lt;/location&gt;&lt;/error-page&gt;&lt;!-- 错误类型 --&gt;&lt;error-page&gt;    &lt;exception-type&gt;java.lang.Exception&lt;exception-type&gt;    &lt;location&gt;/exception.jsp&lt;location&gt;&lt;/error-page&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> javaee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Git服务器搭建blog</title>
      <link href="/2016/10/23/hexo-git-server-blog/"/>
      <url>/2016/10/23/hexo-git-server-blog/</url>
      
        <content type="html"><![CDATA[<p>博主最近在服务器上搭建Hexo发布平台，感觉整个搭建过程和搭建思想蛮有意思，在此记录一下，供猿友参考<br>Hexo 是一个快速，简单，功能强大，主题社区特别庞大的开源blog框架-》<a href="https://hexo.io/">官网</a><br>本次搭建是通过在服务器上搭建Git服务器来实现一键发布blog</p><span id="more"></span><h2 id="搭建思路"><a href="#搭建思路" class="headerlink" title="搭建思路"></a>搭建思路</h2><p><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FjUDxVksbmykVH1wvQJc4h57wMrQ.jpg" alt="图解"></p><ol><li>客户端就是自己的电脑,可以把hexo的静态资源目录当成一个git仓库.</li><li>首先配置好远程git仓库,通过 hexo d 将静态网站资源push到远程git仓库</li><li>git仓库接收到push处理完成后,自动触发post-receive这个钩子.</li><li>执行钩子内容,进入到 &#x2F;var&#x2F;www&#x2F;blog 目录(也是一个git仓库),拉取刚才hexo推送到git服务端的静态网站资源.</li><li>配置nginx,将80端口映射到 &#x2F;var&#x2F;www&#x2F;blog 目录.</li><li>就可以直接通过ip访问到静态blog了</li></ol><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="在服务器上安装git并创建git远程仓库-如-blog-git"><a href="#在服务器上安装git并创建git远程仓库-如-blog-git" class="headerlink" title="在服务器上安装git并创建git远程仓库 如 blog.git"></a>在服务器上安装git并创建git远程仓库 如 <code>blog.git</code></h4><p>搭建过程移步 <a href="/2016/10/22/set-up-git-server-on-vps/" title="搭建Git服务器">搭建Git服务器</a></p><h4 id="在-config-yml-中配置git服务器"><a href="#在-config-yml-中配置git服务器" class="headerlink" title="在 _config.yml 中配置git服务器"></a>在 <code>_config.yml</code> 中配置git服务器</h4><pre><code class="xml">deploy:    type: git    repo: git@server:/home/git/blog.git    branch: master</code></pre><p>如果ssh端口不是默认的22的话，如下配置,8080改为自己服务器上ssh端口</p><pre><code class="xml">deploy:    type: git    repo: ssh://git@server:8080/home/git/blog.git    branch: master</code></pre><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>现在已经可以使用 <code>hexo d</code> 将hexo中的生成的静态资源发送到远程服务器中，接下来我们要配置nginx来配置静态web。<br>安装过程可以自行Google，在此只说明nginx如何配置静态web<br>首先创建一个目录作为存放web资源（hexo生成的）的目录，如： <code>/var/www/blog</code></p><pre><code class="bash">cd /var/www#创建blog目录，并克隆blog.git仓库的内容git clone /home/git/blog.git blog</code></pre><p>找到 <code>nginx.conf</code> 添加以下信息</p><pre><code class="xml">server &#123;    listen 80;    charset utf-8;    root   /var/www/blog;    index  index.htm index.html index.jsp;&#125;</code></pre><pre><code class="bash">#重启并加载配置文件$ nginx -s reload</code></pre><h4 id="配置git服务器hooks"><a href="#配置git服务器hooks" class="headerlink" title="配置git服务器hooks"></a>配置git服务器hooks</h4><p>这个钩子的作用是，当git服务器接受客户端push完成更新，执行此文件内容</p><pre><code class="bash">#创建并编辑post-receive$ vim blog.git/hooks/post-receive</code></pre><p>内容如下</p><pre><code class="bash">#!/bin/shunset GIT_DIR #还原环境变量，否则会拉不到代码cd /var/www/bloggit pull origin master #拉取最新代码</code></pre><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><p>在本地的hexo下执行 <code>hexo d</code><br>查看 &#x2F;var&#x2F;www&#x2F;blog文件夹内的内容也发生变化</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+GitHub Pages搭建属于自己的blog</title>
      <link href="/2016/10/22/hexo-gitHub-pages-create-own-blog/"/>
      <url>/2016/10/22/hexo-gitHub-pages-create-own-blog/</url>
      
        <content type="html"><![CDATA[<p>Hexo是一个快速，简单，功能强大的开源博客框架-》<a href="https://hexo.io/">官网</a><br>GitHub Pages 是一个不受限的网站空间。<br>两者相得益彰。给那些喜欢自己折腾的人提供一些借鉴。</p><span id="more"></span><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>博主使用系统：Deepin Linux 15.3桌面版<br>安装 node与npm</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><pre><code class="bash">npm install hexo-cli -g</code></pre><h3 id="初始化blog"><a href="#初始化blog" class="headerlink" title="初始化blog"></a>初始化blog</h3><pre><code class="bash">hexo init blog</code></pre><p>至此，本地blog已经创建完成，是不是很简单，简单到没朋友</p><h3 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h3><p>可以在<a href="https://hexo.io/themes/">hexo官网</a>查看自己喜欢的主题<br>通过git clone [url] themes&#x2F;xxx 将主题克隆到本地，<br>修改 <code>_config.yml</code> 中的theme：xxx</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code class="bash">#创建一个新的文章$ hexo new &quot;文章名&quot;#生成静态文件$ hexo generate#将一个草稿发布出去$ hexo publish [layout] &lt;filename&gt;#启动一个本地服务器$ hexo server</code></pre><p>更多命令移步<a href="https://hexo.io/docs/commands.html">官方文档</a></p><h3 id="搭建github-pages"><a href="#搭建github-pages" class="headerlink" title="搭建github pages"></a>搭建github pages</h3><p>本地blog已经搭建完成，现在可以发布到github pages上</p><h4 id="注册github账户"><a href="#注册github账户" class="headerlink" title="注册github账户"></a>注册github账户</h4><p>到<a href="https://github.com/">github官网</a>注册一个github账户</p><h4 id="配置登录免密码"><a href="#配置登录免密码" class="headerlink" title="配置登录免密码"></a>配置登录免密码</h4><p>移步 <a href="/2016/12/21/git-ssh-https-verify-configuration/" title="Git之SSH与HTTPS免密码配置">Git之SSH与HTTPS免密码配置</a></p><h4 id="创建github远程仓库"><a href="#创建github远程仓库" class="headerlink" title="创建github远程仓库"></a>创建github远程仓库</h4><p>在github上创建一个仓库 <code>xxx.github.io</code> xxx为自己的github用户名</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><pre><code class="bash">$ npm install hexo-deployer-git --save</code></pre><h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><p>修改 <code>_comfig.yml</code>,xxx为你的用户名</p><pre><code class="xml">deploy:   type: git   repo: git@github.com:xxx/xxx.github.io.git   branch: master</code></pre><h4 id="推送服务器"><a href="#推送服务器" class="headerlink" title="推送服务器"></a>推送服务器</h4><pre><code class="bash">$ hexo deploy</code></pre><blockquote><p>若出现<code>ERROR Deployer not found: git</code>报错，请执行上面安装插件步骤</p></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>打开 <code>xxx.github.io</code> ，就能看到你的blog了</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Git服务器</title>
      <link href="/2016/10/22/set-up-git-server-on-vps/"/>
      <url>/2016/10/22/set-up-git-server-on-vps/</url>
      
        <content type="html"><![CDATA[<p>最近由于准备在公司的服务器上面搭建静态博客（Hexo），然后需要先搭建一个git服务器作为转接，整个过程看似顺利，十几分钟就搭建完成，不过最后在验证这块卡了两个小时，在此记录下来，供准备搭建git服务器的新手小伙伴们借鉴。</p><span id="more"></span><h2 id="搭建git服务器"><a href="#搭建git服务器" class="headerlink" title="搭建git服务器"></a>搭建git服务器</h2><p>通过ssh链接到服务器，开始进行操作</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在服务器上安装 git</p><pre><code class="bash">$ sudo apt-get install git</code></pre><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>创建 git 用户，用来运行git服务</p><pre><code class="bash">$ sudo adduser git</code></pre><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>创建证书，免密码登录：<br>收集所有需要登录的用户的公钥（<code>id_rsa.pub</code>）文件，把所有公钥导入到 <code>/home/git/.ssh/authorized_keys</code> 文件内，一行一个。<br>如果个人的git中的公钥已经连接了其他服务器如：github，可以参考 <a href="/2016/09/30/computer-mutiple-github-account/" title="一个客户端设置多个github账号">一个客户端设置多个github账号</a></p><blockquote><p><strong>注意：一定要通过下面的命令将该文件其他用户的所有权限移除，否则会出现文章尾部问题</strong></p></blockquote><pre><code class="bash">$ chmod 600 authorized_keys</code></pre><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>初始化git仓库</p><pre><code class="bash">$ git init --bare test.git</code></pre><p>git创建一个裸仓库，裸仓库没有工作区，因为服务器上的git仓库纯粹为了共享，所有不能让用户直接登录到服务器上去改工作区，并且服务器的git仓库通常以 <code>.git</code> 结尾。然后，修改owner改为git：</p><pre><code class="bash">$ sudo chown -R git:git test.git</code></pre><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>禁用shell登录：<br>处于安全的考虑，第二步创建的git用户不允许登录shell，这可以通过编辑 <code>/etc/passwd</code> 文件完成。</p><pre><code class="bash">git:x:1003:1003::/home/git:/bin/bash</code></pre><p>改为</p><pre><code class="bash">git:x:1003:1003::/home/git:/usr/bin/git-shell</code></pre><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>克隆远程仓库：<br>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：</p><pre><code class="bash">$ git clone git@server:/home/git/test.git</code></pre><p>如果服务器的ssh端口不是默认的22的话，比如说6789，可以这样写：</p><pre><code class="bash">$ git clone ssh://git@server:6789/home/git/test.git</code></pre><h2 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h2><p>本来根据文档，根据广大猿友的经验，我的搭建之路已经完成了，然后最后一步出现了问题。每次跟服务器进行交互(clone,pull,push)，都让我输入git的密码，也就是说，我配置的ssh没有生效。然后就开始到处找原因，重新生成rsa，提升authorized_keys权限，重新创建服务器git账户，重新。。。。。</p><p>翻遍了 Stack Overflow 和 segmentfault ,两个小时过去了，问题仍然没有进展，这么简单的东西，问题到底出在哪里。</p><p>就在心灰意冷，准备放弃的时候，不知道是哪里来的灵感，准备把 authorized_keys 文件的其他用户的权限删掉，然后就能用了，后就能用了，就能用了，能用了，用了，了～～～～，命令如下，不想多说话，我想静静。</p><pre><code class="bash">$ chmod 600 authorized_keys</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给GitHub上的项目贡献代码</title>
      <link href="/2016/10/13/contributing-to-open-source-on-github/"/>
      <url>/2016/10/13/contributing-to-open-source-on-github/</url>
      
        <content type="html"><![CDATA[<p>最近一直在使用 <code>hexo</code> 的一款主题 <code>yelee</code> ，但是发现它的代码块由于空行不占位导致的显示错位，所以就去GitHub上翻issue，果然有好多人都在反映这个问题，并且作者已经打上bug标签，事情应该就马上结束了，就去忙别的了。这两天又去逛了一下issue，发现这个bug仍然屹立在那里，强迫症又犯了，趁着今天工作不怎么忙，就把这个bug解决了。然后问题来了，怎么才能给作者贡献代码呢。</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>首先通过 <code>git clone</code> 将项目克隆到本地（我早已拉下来，跳过此步骤）</li><li><code>git pull</code> 拉取最新代码（将所有的change都同步到本地）</li><li>将 原项目 <code>fork</code> 到 自己的github上,并复制代码url</li><li>在本地添加第二个仓库地址：<code>git remote add [nickname] [your url]</code></li></ol><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ol><li>修改bug 或 新增功能</li><li><code>git commit [file1] [file2] ... -m [message]</code> 本地提交代码</li></ol><h2 id="同步到github中并发到原项目"><a href="#同步到github中并发到原项目" class="headerlink" title="同步到github中并发到原项目"></a>同步到github中并发到原项目</h2><ol><li><code>git push [nickname]</code> 将代码 push 到自己的项目里，nickname就是添加的第二个仓库的名字</li><li>自己项目内，点击 pull requests -》 new pull request 将本次修改提交到原项目进行同步。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL常用操作</title>
      <link href="/2016/10/12/PostgreSQL-2/"/>
      <url>/2016/10/12/PostgreSQL-2/</url>
      
        <content type="html"><![CDATA[<h2 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h2><pre><code class="bash">\h: #查看SQL命令的解释，比如\h select。\?: #查看psql命令列表。\l: #列出所有数据库。\c [database_name]: #连接其他数据库。\d: #列出当前数据库的所有表格。\d [table_name]: #列出某一张表格的结构。\du: #列出所有用户。\e: #打开文本编辑器。\conninfo: #列出当前数据库和连接的信息。</code></pre><span id="more"></span><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>基本的数据库操作，就是使用一般的SQL语言</p><pre><code class="SQL"># 创建新表CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);# 插入数据INSERT INTO user_tbl(name, signup_date) VALUES(&#39;张三&#39;, &#39;2013-12-22&#39;);# 选择记录SELECT * FROM user_tbl;# 更新数据UPDATE user_tbl set name = &#39;李四&#39; WHERE name = &#39;张三&#39;;# 删除记录DELETE FROM user_tbl WHERE name = &#39;李四&#39; ;# 添加栏位ALTER TABLE user_tbl ADD email VARCHAR(40);# 更新结构ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;# 更名栏位ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;# 删除栏位ALTER TABLE user_tbl DROP COLUMN email;# 表格更名ALTER TABLE user_tbl RENAME TO backup_tbl;# 删除表格DROP TABLE IF EXISTS backup_tbl;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL初体验</title>
      <link href="/2016/10/12/PostgreSQL-1/"/>
      <url>/2016/10/12/PostgreSQL-1/</url>
      
        <content type="html"><![CDATA[<h2 id="创建操作系统用户"><a href="#创建操作系统用户" class="headerlink" title="创建操作系统用户"></a>创建操作系统用户</h2><p>创建一个新的Linux用户：dbuser</p><pre><code class="bash">$sudo adduser dbuser #创建一个新的Linux用户：dbuser</code></pre><span id="more"></span><h2 id="登录PostgreSQL控制台"><a href="#登录PostgreSQL控制台" class="headerlink" title="登录PostgreSQL控制台"></a>登录PostgreSQL控制台</h2><p>切换到postgres用户</p><pre><code class="bash">$sudo su - postgres #切换到postgres用户</code></pre><p>系统用户postgres以同名数据库用户的身份，登录数据库</p><pre><code class="bash">$psql #系统用户postgres以同名数据库用户的身份，登录数据库</code></pre><p>成功登录到控制台后，显示 <code>postgres=#</code></p><blockquote><p>注意：后面分号不能省略</p></blockquote><pre><code class="bash">\password postgres #给postgres用户设置密码</code></pre><p>创建数据库用户dbuser</p><pre><code class="bash">CREATE USER dbuser WITH PASSWORD &#39;dbuser&#39;; #创建数据库用户dbuser</code></pre><p>创建用户数据库，这里为exampledb，并指定所有者为dbuser。</p><pre><code class="bash">CREATE DATABASE exampledb OWNER dbuser; #创建用户数据库，这里为exampledb，并指定所有者为dbuser。</code></pre><p>将exampledb数据库的所有权限都赋予dbuser</p><pre><code class="bash">GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser; #将exampledb数据库的所有权限都赋予dbuser</code></pre><p>推出控制台（也可以直接按ctrl+D）</p><pre><code class="bash">\q #退出控制台</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL的介绍与安装</title>
      <link href="/2016/10/12/PostgreSQL-3/"/>
      <url>/2016/10/12/PostgreSQL-3/</url>
      
        <content type="html"><![CDATA[<p>由于工作认识了PostgreSQL，在此系统学习一下这个数据库，本文除博主实践所得以外，大量译于 <a href="https://www.postgresql.org/docs/9.6/static/">官方文档</a></p><h2 id="PostgreSQL是什么"><a href="#PostgreSQL是什么" class="headerlink" title="PostgreSQL是什么"></a>PostgreSQL是什么</h2><blockquote><p>PostgreSQL 是一个基于 <code>POSTGRES, Version 4.2</code> 的对象关系数据库系统（ORDBMS），由加州大学伯克利分校计算机科学系开发。<br>PostgreSQL 是一个开源的数据库，因为自由许可，任何人都可以免费的使用、修改、分发 PostgreSQL 数据库用于任何目的。</p></blockquote><span id="more"></span><p><strong>它支持大部分的SQL标准并提供了许多流行的功能：</strong></p><ol><li>复杂查询（complex queries）</li><li>外键（foreign keys）</li><li>触发器（triggers）</li><li>可更新的视图（updatable views）</li><li>事务完整性（transactional integrity）</li><li>多版本并发控制（multiversion concurrency control）</li></ol><p><strong>用户也可以给PostgreSQL扩展很多东西，比如：</strong></p><ol><li>数据类型（data types）</li><li>函数（functions）</li><li>运算符（operators）</li><li>聚合函数（aggregate functions）</li><li>索引方法（index methods）</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="博主开发环境："><a href="#博主开发环境：" class="headerlink" title="博主开发环境："></a>博主开发环境：</h3><ul><li>系统 ：深度Linux 15.3 桌面版</li><li>PostgreSQL ：9.4</li></ul><h3 id="通过apt-get安装"><a href="#通过apt-get安装" class="headerlink" title="通过apt-get安装"></a>通过apt-get安装</h3><pre><code class="bash">$ apt-get install postgresql-9.4</code></pre><p>仓库有许多不同的包（包括第三方插件），最常见、最重要的包（根据需要替换版本号）：</p><ol><li>postgresql-client-9.4 - 客户端库和二进制文件</li><li>postgresql-9.4 - 核心数据库服务器</li><li>postgresql-contrib-9.4 - 提供额外的模块</li><li>libpq-dev - C语言前端开发库和头文件</li><li>postgresql-server-dev-9.4 - C语言后端开发库和头文件</li><li>pgadmin3 - pgAdmin III 图形化管理工具</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeMarker语法详解</title>
      <link href="/2016/10/05/FreeMarker/"/>
      <url>/2016/10/05/FreeMarker/</url>
      
        <content type="html"><![CDATA[<p>FreeMarker是一款 <strong>模板引擎</strong> :即一种基于模板和要改变的数据，并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。<br>FreeMarker模板文件主要有4部分组成</p><ol><li><strong>文本</strong>，直接输出的部分</li><li><strong>注释</strong>，即&lt;#–…–&gt;格式不会输出</li><li><strong>插值</strong>（Interpolation）：即${..}或者#{..}格式的部分,将使用数据模型中的部分替代输出</li><li><strong>FTL指令</strong>：FreeMarker指令，和HTML标记类似，名字前加#予以区分，不会输出。</li></ol><span id="more"></span><h2 id="一些规则"><a href="#一些规则" class="headerlink" title="一些规则"></a>一些规则</h2><h3 id="FTL指令规则"><a href="#FTL指令规则" class="headerlink" title="FTL指令规则"></a>FTL指令规则</h3><p>FreeMarker有三种FTL标签，这和HTML的标签是完全类似的<br>     开始标签：&lt;#directivename parameters&gt;<br>     结束标签：&lt;&#x2F;#directivename&gt;<br>     空标签： &lt;#directivename parameters &#x2F;&gt;<br>     实际上，使用标签时前面的#符号也可能变成@，如果该指令是一个用户指令而不是系统内建指令时，应将#符号改为@符号</p><h3 id="插值规则"><a href="#插值规则" class="headerlink" title="插值规则"></a>插值规则</h3><p>FreeMarker的插值有如下两种类型<br>    1、通用插值：${expr}<br>    2、数字格式化插值：#{expr}或者#{expr;format}<br>通用插值，有可以分为四种情况<br>    a、插值结果为字符串值：直接输出表达式结果<br>    b、插值结果为数字值：根据默认格式(#setting 指令设置)将表达式结果转换成文本输出。可以使用内建的字符串函数格式单个插值，例如</p><pre><code class="c">&lt;#setting number_format = &quot;currency&quot; /&gt;&lt;#assign str = 42 /&gt;$&#123;str&#125;$&#123;str?string&#125;$&#123;str?string.number&#125;$&#123;str?string.currency&#125;$&#123;str?string.percent&#125;$&#123;str?string.computer&#125;日期处理$&#123;openingTime?string.short&#125;$&#123;openingTime?string.medium&#125;$&#123;openingTime?string.long&#125;$&#123;openingTime?string.full&#125;$&#123;nextDiscountDay?string.short&#125;$&#123;nextDiscountDay?string.medium&#125;$&#123;nextDiscountDay?string.long&#125;$&#123;nextDiscountDay?string.full&#125;$&#123;lastUpdated?string.short&#125;$&#123;lastUpdated?string.medium&#125;$&#123;lastUpdated?string.long&#125;$&#123;lastUpdated?string.full&#125;$&#123;lastUpdated?string(&quot;yyyy-MM-dd HH:mm:ss zzzz&quot;)&#125;$&#123;lastUpdated?string(&quot;EEE, MMM d, &#39;&#39;yy&quot;)&#125;$&#123;lastUpdated?string(&quot;EEEE, MMMM dd, yyyy, hh:mm:ss a &#39;(&#39;zzz&#39;)&#39;&quot;)&#125;</code></pre><h3 id="if-elseif-elseif"><a href="#if-elseif-elseif" class="headerlink" title="if,elseif,elseif"></a>if,elseif,elseif</h3><pre><code class="c">&lt;#if condition&gt;……&lt;#elseif condition2&gt;……&lt;#else&gt;……&lt;/#if&gt;</code></pre><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch,case"></a>switch,case</h3><pre><code class="c">&lt;#switch value&gt;    &lt;#case refValue1&gt;           ...           &lt;#break&gt;    &lt;#case refValue2&gt;           ...           &lt;#break&gt;    ...    &lt;#case refValueN&gt;           ...           &lt;#break&gt;    &lt;#default&gt;         ...  &lt;/#switch&gt;  &lt;#t&gt; 去掉左右空白和回车换行  &lt;#lt&gt;去掉左边空白和回车换行  &lt;#rt&gt;去掉右边空白和回车换行  &lt;#nt&gt;取消上面的效果  </code></pre><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><pre><code class="c">&lt;#list sequence as item&gt;  ...  &lt;#if item = &quot;spring&quot;&gt;  &lt;#break&gt;&lt;/#if&gt;  ...  &lt;/#list&gt;  </code></pre><blockquote><p>iterm_index:当前值得下标，从0开始<br>item_has_next:判断list是否还有值</p></blockquote><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><pre><code class="c">&lt;#include filename [options]&gt;</code></pre><blockquote><p>options 包含两个属性<br>encoding&#x3D;”GBK”<br>parse&#x3D;”true” 是否作为ftl语法解析，默认是true<br>示例：&lt;#include “&#x2F;common&#x2F;copyright.ftl” encoding&#x3D;”GBK” parse&#x3D;”true”&gt;</p></blockquote><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><pre><code class="c">&lt;#import path as hash&gt;</code></pre><blockquote><p>类似于java里的import,它导入文件，然后就可以在当前文件里使用被导入文件里的宏组件</p></blockquote><h3 id="compress"><a href="#compress" class="headerlink" title="compress"></a>compress</h3><pre><code class="c">&lt;#compress&gt;    ...  &lt;/#compress&gt;</code></pre><h3 id="escape-noescape"><a href="#escape-noescape" class="headerlink" title="escape, noescape"></a>escape, noescape</h3><pre><code class="c">&lt;#escape identifier as expression&gt;    ...    &lt;#noescape&gt;...&lt;/#noescape&gt;    ...  &lt;/#escape&gt;  </code></pre><blockquote><p>主要使用在相似的字符串变量输出，比如某一个模块的所有字符串输出都必须是html安全的，这个时候就可以使用该表达式<br>示例：</p></blockquote><pre><code class="c">&lt;#escape x as x?html&gt;    First name: $&#123;firstName&#125;    &lt;#noescape&gt;Last name: $&#123;lastName&#125;&lt;/#noescape&gt;    Maiden name: $&#123;maidenName&#125;  &lt;/#escape&gt;  </code></pre><p>相同表达式</p><pre><code class="c">First name: $&#123;firstName?html&#125;  Last name: $&#123;lastName &#125;  Maiden name: $&#123;maidenName?html&#125;  </code></pre><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><pre><code class="c">&lt;#assign name=value&gt;  &lt;#-- 或则 --&gt;  &lt;#assign name1=value1 name2=value2 ... nameN=valueN&gt;  &lt;#-- 或则 --&gt;  &lt;#assign same as above... in namespacehash&gt;  &lt;#-- 或则 --&gt;  &lt;#assign name&gt;    capture this  &lt;/#assign&gt;  &lt;#-- 或则 --&gt;  &lt;#assign name in namespacehash&gt;    capture this  &lt;/#assign&gt;  </code></pre><blockquote><p>生成变量,并且给变量赋值</p></blockquote><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><pre><code class="c">&lt;#global name=value&gt;  &lt;#--或则--&gt;  &lt;#global name1=value1 name2=value2 ... nameN=valueN&gt;  &lt;#--或则--&gt;  &lt;#global name&gt;    capture this  &lt;/#global&gt;  </code></pre><blockquote><p>全局赋值语法，利用这个语法给变量赋值，那么这个变量在所有的namespace [A1] 中是可见的, 如果这个变量被当前的assign 语法覆盖 如&lt;#global x&#x3D;2&gt; &lt;#assign x&#x3D;1&gt; 在当前页面里x&#x3D;2 将被隐藏，或者通过${.global.x} 来访问</p></blockquote><h3 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h3><pre><code class="c">&lt;#setting name=value&gt;  </code></pre><blockquote><p>用来设置整个系统的一个环境<br>locale<br>number_format<br>boolean_format<br>date_format , time_format , datetime_format<br>time_zone<br>classic_compatible</p></blockquote><h3 id="macro-nested-return"><a href="#macro-nested-return" class="headerlink" title="macro, nested, return"></a>macro, nested, return</h3><pre><code class="c">&lt;#macro name param1 param2 ... paramN&gt;    ...    &lt;#nested loopvar1, loopvar2, ..., loopvarN&gt;    ...    &lt;#return&gt;    ...  &lt;/#macro&gt;  </code></pre><h3 id="t-lt-rt"><a href="#t-lt-rt" class="headerlink" title="t, lt, rt"></a>t, lt, rt</h3><pre><code class="c">&lt;#t&gt; 去掉左右空白和回车换行  &lt;#lt&gt;去掉左边空白和回车换行  &lt;#rt&gt;去掉右边空白和回车换行  &lt;#nt&gt;取消上面的效果  </code></pre>]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式详解</title>
      <link href="/2016/10/04/regular-expression/"/>
      <url>/2016/10/04/regular-expression/</url>
      
        <content type="html"><![CDATA[<h2 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h2><blockquote><p>本文旨在更加简洁清晰的展现正则表达式， <code>第一部分</code> 是对正则表达式语法的简洁介绍， <code>第二部分</code> 则是常用正则表达式的示例。</p></blockquote><span id="more"></span><h2 id="简介及语法"><a href="#简介及语法" class="headerlink" title="简介及语法"></a>简介及语法</h2><h3 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么"></a>正则表达式是什么</h3><blockquote><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p></blockquote><blockquote><p>正则表达式语言由两种基本字符类型组成：原义（正常）<code>文本字符</code>和<code>元字符</code>。元字符使正则表达式具有处理能力。</p></blockquote><h3 id="常用元字符"><a href="#常用元字符" class="headerlink" title="常用元字符"></a>常用元字符</h3><table><thead><tr><th align="left">元字符</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>.</code></td><td align="left">匹配除换行符以外的任意字符</td></tr><tr><td align="left"><code>\w</code></td><td align="left">匹配字母或数字或下划线或汉字</td></tr><tr><td align="left"><code>\s</code></td><td align="left">匹配任意的空白符，包括空格，制表符（Tab），换行符，中文全角空格等）</td></tr><tr><td align="left"><code>\d</code></td><td align="left">匹配数字</td></tr><tr><td align="left"><code>\b</code></td><td align="left">匹配单词的开始或结束</td></tr><tr><td align="left"><code>^</code></td><td align="left">匹配字符串的开始</td></tr><tr><td align="left"><code>$</code></td><td align="left">匹配字符串的结束</td></tr></tbody></table><h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><blockquote><p>如果你想查找元字符本身的话，比如你查找 <code>.</code> ,或者 <code>*</code> ,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用 <code>\</code> 来取消这些字符的特殊意义。因此，你应该使用 <code>\.</code> 和 <code>\*</code> 。当然，要查找 <code>\</code> 本身，你也得用 <code>\\</code> .<br>例如： <code>deerchao\.net</code> 匹配 <strong>deerchao.net</strong>，<code>C:\\Windows</code> 匹配 <strong>C:\Windows</strong> 。</p></blockquote><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><blockquote><p>你已经看过了前面的 <code>*</code> , <code>+</code> , <code>&#123;2&#125;</code> , <code>&#123;5,12&#125;</code> 这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)</p></blockquote><table><thead><tr><th align="left">元字符</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>*</code></td><td align="left">重复零次或更多次</td></tr><tr><td align="left"><code>+</code></td><td align="left">重复一次或更多次</td></tr><tr><td align="left"><code>?</code></td><td align="left">重复零次或一次</td></tr><tr><td align="left"><code>&#123;n&#125;</code></td><td align="left">重复n次</td></tr><tr><td align="left"><code>&#123;n,&#125;</code></td><td align="left">重复n次或更多次</td></tr><tr><td align="left"><code>&#123;n,m&#125;</code></td><td align="left">重复n到m次</td></tr></tbody></table><blockquote><p>下面是一些重复的示例：<br><code>Windows\d+</code> 匹配Windows后面跟1个或更多数字<br><code>^\w+</code> 匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</p></blockquote><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><blockquote><p>要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？<br>很简单，你只需要在方括号里列出它们就行了，像 <code>[aeiou]</code> 就匹配任何一个英文元音字母， <code>[.?!]</code> 匹配标点符号(.或?或!)。<br>我们也可以轻松地指定一个字符范围，像 <code>[0-9]</code> 代表的含意与 <code>\d</code> 就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于 <code>\w</code> （如果只考虑英文的话）。<br>下面是一个更复杂的表达式： <code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code> 。<br>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。</p></blockquote><h3 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h3><blockquote><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。<br>示例： <code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code><br>这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。<br>示例： <code>\d&#123;5&#125;-\d&#123;4&#125;|\d&#123;5&#125;</code><br>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个示例是因为它能说明一个问题：<strong>使用分枝条件时，要注意各个条件的顺序</strong>。如果你把它改成 <code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code> 的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p></blockquote><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><blockquote><p>重复单个字符，直接在字符后面加上限定符就行了。但如果想要重复多个字符，我们可以用小括号来指定 <strong>子表达式</strong>(也叫作<strong>分组</strong>)。<br><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code> 是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它： <code>\d&#123;1,3&#125;</code> 匹配1到3位的数字， <code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code> 匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字 <code>(\d&#123;1,3&#125;)</code> 。<br>不幸的是，它也将匹配 <em>256.300.888.999</em> 这种不可能存在的IP地址。我们只能使用冗长的分组，选择，字符串来描述一个 <strong>正确的IP地址：</strong> <code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</code></p></blockquote><h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><blockquote><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p></blockquote><table><thead><tr><th align="left">元字符</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>\W</code></td><td align="left">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td align="left"><code>\S</code></td><td align="left">匹配任意不是空白符的字符</td></tr><tr><td align="left"><code>\D</code></td><td align="left">匹配任意非数字的字符</td></tr><tr><td align="left"><code>\B</code></td><td align="left">匹配不是单词开头或结束的位置</td></tr><tr><td align="left"><code>[^x]</code></td><td align="left">匹配除了x以外的任意字符</td></tr><tr><td align="left"><code>[^aeiou]</code></td><td align="left">匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><blockquote><p>示例： <code>\S+</code> 匹配不包含空白符的字符串。 <code>&lt;a[^&gt;]+&gt;</code> 匹配用尖括号括起来的以a开头的字符串。</p></blockquote><h3 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h3><blockquote><p>使用小括号指定一个子表达式后，<strong>匹配这个子表达式</strong> 的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个 <strong>组号</strong>，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。<br> <strong>后向引用</strong> 用于重复搜索前面某个分组匹配的文本。<br>示例： <code>\b(\w+)\b\s+\1\b</code> 可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字 <code>\b(\w+)\b</code> ，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符<code>\s+</code>，最后是分组1中捕获的内容（也就是前面匹配的那个单词） <code>\1</code> 。<br>你也可以自己指定子表达式的 <strong>组名</strong>.要指定一个子表达式的组名，请使用这样的语法： <code>(?&lt;Word&gt;\w+)</code> (或者把尖括号换成 <code>&#39;</code> 也行： <code>(?&#39;Word&#39;\w+))</code>,这样就把<code>\w+</code>的组名指定为 <strong>Word</strong> 了。要反向引用这个分组捕获的内容，你可以使用 <code>\k&lt;Word&gt;</code> ,所以上一个示例也可以写成这样： <code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code> 。</p></blockquote><h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><blockquote><p>接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为 <strong>零宽断言</strong>。<br><code>(?=exp)</code> 也叫 <strong>零宽度正预测先行断言</strong>，它断言自身出现的位置的后面能匹配表达式exp。比如<code>\b\w+(?=ing\b)</code>，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找 <em>I’m singing while you’re dancing.</em> 时，它会匹配 sing 和 danc 。<br><code>(?&lt;=exp)</code> 也叫 <strong>零宽度正回顾后发断言</strong> ，它断言自身出现的位置的前面能匹配表达式exp。比如 <code>(?&lt;=\bre)\w+\b</code> 会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找 <em>reading a book</em> 时，它匹配ading。<br>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分： <code>((?&lt;=\d)\d&#123;3&#125;)+\b</code> ，用它对1234567890进行查找时结果是234567890。<br>下面这个示例同时使用了这两种断言： <code>(?&lt;=\s)\d+(?=\s)</code> 匹配以空白符间隔的数字( <strong>再次强调，不包括这些空白符</strong> )。</p></blockquote><h3 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h3><blockquote><p>前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：<br><code>\b\w*q[^u]\w*\b</code> 匹配 <em>包含后面不是字母u的字母q的单词</em> 。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的 <code>\w*\b</code> 将会匹配下一个单词，于是 <code>\b\w*q[^u]\w*\b</code> 就能匹配整个Iraq fighting。<strong>负向零宽断言</strong> 能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题： <code>\b\w*q(?!u)\w*\b</code> 。<br><strong>零宽度负预测先行断言</strong>(?!exp)，断言此位置的后面不能匹配表达式exp。例如： <code>\d&#123;3&#125;(?!\d)</code> 匹配三位数字，而且这三位数字的后面不能是数字； <code>\b((?!abc)\w)+\b</code> 匹配不包含连续字符串abc的单词。<br>同理，我们可以用(?&lt;!exp),*<em>零宽度负回顾后发断言来断言** 此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。<br>一个更复杂的示例：&#96;(?&lt;&#x3D;&lt;(\w+)&gt;).</em>(?&#x3D;&lt;/\1&gt;)<code> 匹配不包含属性的简单HTML标签内里的内容。</code>(?&lt;&#x3D;&lt;(\w+)&gt;)<code>指定了这样的 **前缀**：被尖括号括起来的单词(比如可能是&lt;b&gt;)，然后是.</code>*<code>(任意的字符串),最后是一个 **后缀**</code>(?&#x3D;&lt;/\1&gt;)<code>。注意后缀里的 \/ ，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的 </code>(\w+)&#96; 匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。</p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote><p>小括号的另一种用途是通过语法(?#comment)来包含注释。例如：<code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code>。<br>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：<br>      <code>(?&lt;=</code>    # 断言要匹配的文本的前缀<br>      <code>&lt;(\w+)&gt;</code> # 查找尖括号括起来的字母或数字(即HTML&#x2F;XML标签)<br>      <code>)</code>       # 前缀结束<br>      <code>.*</code>      # 匹配任意文本<br>      <code>(?=</code>     # 断言要匹配的文本的后缀<br>      <code>&lt;\/\1&gt;</code>  # 查找尖括号括起来的内容：前面是一个”&#x2F;“，后面是先前捕获的标签<br>      <code>)</code>       # 后缀结束</p></blockquote><h3 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h3><blockquote><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配 <strong>尽可能多</strong> 的字符。以这个表达式为例： <code>a.*b</code> ，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为 <strong>贪婪匹配</strong>。<br>有时，我们更需要 <strong>懒惰匹配</strong>，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号 ? 。这样 <code>.*?</code> 就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。<br>示例： <code>a.*?b</code> 匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。</p></blockquote><table><thead><tr><th align="left">语法</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>*?</code></td><td align="left">重复任意次，但尽可能少重复</td></tr><tr><td align="left"><code>+?</code></td><td align="left">重复1次或更多次，但尽可能少重复</td></tr><tr><td align="left"><code>??</code></td><td align="left">重复0次或1次，但尽可能少重复</td></tr><tr><td align="left"><code>&#123;n,m&#125;?</code></td><td align="left">重复n到m次，但尽可能少重复</td></tr><tr><td align="left"><code>&#123;n,&#125;?</code></td><td align="left">重复n次以上，但尽可能少重复</td></tr></tbody></table><h3 id="其他元字符"><a href="#其他元字符" class="headerlink" title="其他元字符"></a>其他元字符</h3><table><thead><tr><th align="left">元字符</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>\a</code></td><td align="left">报警字符(打印它的效果是电脑嘀一声)</td></tr><tr><td align="left"><code>\b</code></td><td align="left">通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td align="left"><code>\t</code></td><td align="left">制表符，Tab</td></tr><tr><td align="left"><code>\r</code></td><td align="left">回车</td></tr><tr><td align="left"><code>\v</code></td><td align="left">竖向制表符</td></tr><tr><td align="left"><code>\f</code></td><td align="left">换页符</td></tr><tr><td align="left"><code>\n</code></td><td align="left">换行符</td></tr><tr><td align="left"><code>\e</code></td><td align="left">Escape</td></tr><tr><td align="left"><code>\0nn</code></td><td align="left">ASCII代码中八进制代码为nn的字符</td></tr><tr><td align="left"><code>\xnn</code></td><td align="left">ASCII代码中十六进制代码为nn的字符</td></tr><tr><td align="left"><code>\unnnn</code></td><td align="left">Unicode代码中十六进制代码为nnnn的字符</td></tr><tr><td align="left"><code>\cN</code></td><td align="left">ASCII控制字符。比如\cC代表Ctrl+C</td></tr><tr><td align="left"><code>\A</code></td><td align="left">字符串开头(类似^，但不受处理多行选项的影响)</td></tr><tr><td align="left"><code>\Z</code></td><td align="left">字符串结尾或行尾(不受处理多行选项的影响)</td></tr><tr><td align="left"><code>\z</code></td><td align="left">字符串结尾(类似$，但不受处理多行选项的影响)</td></tr><tr><td align="left"><code>\G</code></td><td align="left">当前搜索的开头</td></tr><tr><td align="left"><code>\p&#123;name&#125;</code></td><td align="left">Unicode中命名为name的字符类，例如\p{IsGreek}</td></tr><tr><td align="left"><code>(?&gt;exp)</code></td><td align="left">贪婪子表达式</td></tr><tr><td align="left"><code>(?&lt;x&gt;-&lt;y&gt;exp)</code></td><td align="left">平衡组</td></tr><tr><td align="left"><code>(?im-nsx:exp)</code></td><td align="left">在子表达式exp中改变处理选项</td></tr><tr><td align="left"><code>(?im-nsx)</code></td><td align="left">为表达式后面的部分改变处理选项</td></tr><tr><td align="left"><a href="%60(?(exp)yes%7Cno)%60">1</a></td><td align="left">把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</td></tr><tr><td align="left"><code>(?(exp)yes)</code></td><td align="left">同上，只是使用空表达式作为no</td></tr><tr><td align="left"><a href="%60(?(name)yes%7Cno)%60">2</a></td><td align="left">如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</td></tr><tr><td align="left"><code>(?(name)yes)</code></td><td align="left">同上，只是使用空表达式作为no</td></tr></tbody></table><blockquote></blockquote><h2 id="正则表达式常用实例"><a href="#正则表达式常用实例" class="headerlink" title="正则表达式常用实例"></a>正则表达式常用实例</h2><h3 id="账号-密码"><a href="#账号-密码" class="headerlink" title="账号&#x2F;密码"></a>账号&#x2F;密码</h3><pre><code class="java">帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线) = &quot;^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$&quot;密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线) = &quot;^[a-zA-Z]\w&#123;5,17&#125;$&quot;强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间) = &quot;^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$&quot;</code></pre><h3 id="字符串校验"><a href="#字符串校验" class="headerlink" title="字符串校验"></a>字符串校验</h3><pre><code class="java">汉字 = &quot;^[\u4e00-\u9fa5]&#123;0,&#125;$&quot;;英文和数字 = &quot;^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$&quot;;长度为3-20的所有字符 = &quot;^.&#123;3,20&#125;$&quot;；由26个英文字母组成的字符串 = &quot;^[A-Za-z]+$&quot;；由26个大写英文字母组成的字符串 = &quot;^[A-Z]+$&quot;；由26个小写英文字母组成的字符串 = &quot;^[a-z]+$&quot;；由数字和26个英文字母组成的字符串 = &quot;^[A-Za-z0-9]+$&quot;；由数字、26个英文字母或者下划线组成的字符串 = &quot;^\w+$ 或 ^\w&#123;3,20&#125;$&quot;；中文、英文、数字包括下划线 = &quot;^[\u4E00-\u9FA5A-Za-z0-9_]+$&quot;；中文、英文、数字但不包括下划线等符号 = &quot;^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$&quot;；禁止输入含有~的字符 = &quot;[^~\x22]+&quot;；</code></pre><h3 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h3><pre><code class="java">/** * 手机号码 * 移动：134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188 * 联通：130,131,132,145,152,155,156,1709,171,176,185,186 * 电信：133,134,153,1700,177,180,181,189 */String MOBILE = &quot;^1(3[0-9]|4[57]|5[0-35-9]|7[01678]|8[0-9])\\d&#123;8&#125;$&quot;;/** * 中国移动：China Mobile * 134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188 */String CM = &quot;^1(3[4-9]|4[7]|5[0-27-9]|7[0]|7[8]|8[2-478])\\d&#123;8&#125;$&quot;;/** * 中国联通：China Unicom * 130,131,132,145,152,155,156,1709,171,176,185,186 */String CU = &quot;^1(3[0-2]|4[5]|5[56]|709|7[1]|7[6]|8[56])\\d&#123;8&#125;$&quot;;/** * 中国电信：China Telecom * 133,134,153,1700,177,180,181,189 */String CT = &quot;^1(3[34]|53|77|700|8[019])\\d&#123;8&#125;$&quot;;</code></pre><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><pre><code class="java">String IPREGEXP = &quot;((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)&quot;;</code></pre><h3 id="EMAIL地址"><a href="#EMAIL地址" class="headerlink" title="EMAIL地址"></a>EMAIL地址</h3><pre><code class="java">Email地址 = &quot;^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&quot;;</code></pre><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><pre><code class="java">域名 = &quot;[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?&quot;;InternetURL = &quot;[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$&quot;</code></pre><h3 id="身份证"><a href="#身份证" class="headerlink" title="身份证"></a>身份证</h3><pre><code class="java">身份证号(15位、18位数字) = &quot;^\d&#123;15&#125;|\d&#123;18&#125;$&quot;短身份证号码(数字、字母x结尾) = &quot;^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$&quot;</code></pre><h3 id="数字类校验"><a href="#数字类校验" class="headerlink" title="数字类校验"></a>数字类校验</h3><pre><code class="java">数字 = &quot;^[0-9]*$&quot;;n位的数字 = &quot;^\d&#123;n&#125;$&quot;;至少n位的数字 = &quot;^\d&#123;n,&#125;$&quot;;m-n位的数字 = &quot;^\d&#123;m,n&#125;$&quot;;零和非零开头的数字 = &quot;^(0|[1-9][0-9]*)$&quot;;非零开头的最多带两位小数的数字 = &quot;^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$&quot;;带1-2位小数的正数或负数 = &quot;^(\-)?\d+(\.\d&#123;1,2&#125;)?$&quot;;正数、负数、和小数 = &quot;^(\-|\+)?\d+(\.\d+)?$&quot;;有两位小数的正实数 = &quot;^[0-9]+(.[0-9]&#123;2&#125;)?$&quot;;有1~3位小数的正实数 = &quot;^[0-9]+(.[0-9]&#123;1,3&#125;)?$&quot;;非零的正整数 = &quot;^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$&quot;;非零的负整数 = &quot;^\-[1-9][]0-9&quot;*$&quot; 或 &quot;^-[1-9]\d*$&quot;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2016/10/02/git-command/"/>
      <url>/2016/10/02/git-command/</url>
      
        <content type="html"><![CDATA[<p>经常用到Git，但是很多命令记不住，将其整理于此。（大量摘自网络）</p><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要要记住60~100个命令。<br><img src="https://cdn.jsdelivr.net/gh/yelog/assets/images/FlWMWzIX9WE7PW-7eyeq8uaEJ_3p.png" alt="git常用命令"></p><span id="more"></span><p>下面整理的 Git 命令清单。几个专业名词的译名如下。</p><pre><code class="xml">Workspace：工作区Index / Stage：暂存区Repository：仓库区（本地仓库）Remote：远程仓库</code></pre><h2 id="新建版本仓库"><a href="#新建版本仓库" class="headerlink" title="新建版本仓库"></a>新建版本仓库</h2><pre><code class="bash"># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史, -o 给远程仓库起名:faker,默认origin$ git clone [-o faker] [url]</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><pre><code class="bash"># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;# 设置大小写敏感（windows不区分大小写的解决办法）$ git config core.ignorecase  false</code></pre><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h2><pre><code class="bash"># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><pre><code class="bash"># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><pre><code class="bash"># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 列出所有本地分支，并展示没有分支最后一次提交的信息$ git branch -v# 列出所有本地分支，并展示没有分支最后一次提交的信息和远程分支的追踪情况$ git branch -vv# 列出所有已经合并到当前分支的分支$ git branch --merged# 列出所有还没有合并到当前分支的分支$ git branch --no-merged# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个与远程分支同名的分支，并切换到该分支$ git checkout --track [branch-name]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream-to=[remote-branch]$ git branch --set-upstream [branch] [remote-branch] # 已被弃用# 合并指定分支到当前分支$ git merge [branch]# 中断此次合并（你可能不想处理冲突）$ git merge --abort# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]#新增远程分支 远程分支需先在本地创建,再进行推送$ git push origin [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><pre><code class="bash"># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h2 id="查看信息-搜索"><a href="#查看信息-搜索" class="headerlink" title="查看信息&#x2F;搜索"></a>查看信息&#x2F;搜索</h2><pre><code class="bash"># 显示有变更的文件$ git status [-sb] #s:short,给一个短格式的展示，b:展示当前分支# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 图形化显示所有分支$ git log --oneline --graph --all# 显示在分支2而不在分支1中的提交$ git log [分支1]..[分支2]$ git log ^[分支1] [分支2]$ git log [分支2] --not [分支1]# 显示两个分支不同时包含的提交$ git log [分支1]...[分支2]# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog# 搜索你工作目录的文件，输出匹配行号$ git grep -n [关键字]# 搜索你工作目录的文件，输出每个文件包含多少个匹配$ git grep --count [关键字]# 优化阅读$ git grep --break --heading [关键字]# 查询iCheck这个字符串那次提交的$ git log -SiCheck --oneline# 查询git_deflate_bound函数每一次的变更$ git log -L :git_deflate_bound:zlib.c</code></pre><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><pre><code class="bash"># 下载远程仓库的所有变动 [shortname] 为远程仓库的shortname, 如origin,为空时:默认origin$ git fetch [shortname]# 显示所有远程仓库$ git remote -v#显式地获得远程引用的完整列表 [shortname] 为远程仓库的shortname, 如origin,为空时:默认origin$ git ls-remote [shortname]# 显示某个远程仓库的信息 [remote] 为远程仓库的shortname, 如origin$ git remote show [shortname]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 重命名一个远程仓库（shortname）$ git remote rename [旧仓库名] [新仓库名]# 删除一个远程链接$ git remote rm [shortname] [url]$ git remote remove [shortname] [url]# 修改远程仓库地址$ git remote set-url [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地当前分支到远程仓库git push [remote]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 推送所有分支到远程仓库$ git push [remote] --all# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force</code></pre><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><pre><code class="bash"># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .#只会保留源码（工作区），回退commit(本地仓库)与index（暂存区）到某个版本$ git reset &lt;commit_id&gt;   #默认为 --mixed模式$ git reset --mixed &lt;commit_id&gt;#保留源码（工作区）和index（暂存区），只回退commit（本地仓库）到某个版本$ git reset --soft &lt;commit_id&gt;#源码（工作区）、commit（本地仓库）与index（暂存区）都回退到某个版本$ git reset --hard &lt;commit_id&gt;# 恢复到最后一次提交的状态$ git reset --hard HEAD# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 将工作区和暂存区的代码全都存储起来了$ git stash [save]# 只保存工作区，不存储暂存区$ git stash --keep-index# 存储工作区、暂存区和未跟踪文件$ git stash -u$ git stash --include-untracked# 不存储所有改动的东西，但会交互式的提示那些改动想要被储藏、哪些改动需要保存在工作目录中$ git stash --patch# 不指定名字，Git认为指定最近的储藏，将存储的代码（工作区和暂存区）都应用到工作区$ git stash apply [stash@&#123;2&#125;]# 存储的工作区和暂存区的代码应用到工作区和暂存区$ git stash apply [stash@&#123;2&#125;] --index# 将存储的代码（工作区和暂存区）都应用到工作区，并从栈上扔掉他$ git stash pop# 删除stash@&#123;2&#125;的存储$ git stash drop [stash@&#123;2&#125;]# 获取储藏的列表$ git stash list# 移除工作目录中所有未跟踪的文件及口口那个的子目录，不会移除.gitiignore忽略的文件$ git clean -f -d</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code class="bash"># 生成一个可供发布的压缩包$ git archive</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个客户端设置多个github账号</title>
      <link href="/2016/09/30/computer-mutiple-github-account/"/>
      <url>/2016/09/30/computer-mutiple-github-account/</url>
      
        <content type="html"><![CDATA[<p>最近想要使用自己的GitHub搭建Hexo博客，同时还要使用工作的GitHub开发项目，所以在网上找寻了一些文章，在此将自己的搭建过程记录一下。</p><span id="more"></span><h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><p>两个GitHub账号（假设两个账号为one,two）<br>取消Git全局设置</p><pre><code class="bash">$ git config --global --unset user.name$ git config --global --unset user.email</code></pre><h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><p>生成<code>id_rsa</code>私钥，<code>id_rsa.pub</code>公钥。one可以直接回车，默认生成 id_rsa 和 id_rsa.pub 。</p><pre><code class="bash">$ ssh-keygen -t rsa -C &quot;one@xx.com&quot;</code></pre><p>添加two会出现提示输入文件名，输入与默认配置不一样的文件名，如：id_rsa_two。</p><pre><code class="bash">$ cd ~/.ssh$ ssh-keygen -t rsa -C &quot;two@126.com&quot;  #  之后会提示输入文件名</code></pre><p>GitHub添加公钥 id_rsa.pub 、 id_rsa_two.pub，分别登陆one,two的账号，在 Account Settings 的 SSH Keys 里，点 <code>Add SSH Keys</code> ，将公钥(.pub文件)中的内容粘贴到 Key 中，并输入 Title。<br>添加 ssh Key</p><pre><code class="bash">$ ssh-add ~/.ssh/id_rsa$ ssh-add ~/.ssh/id_rsa_two</code></pre><p>可以在添加前使用下面命令删除所有的 key</p><pre><code class="bash">$ ssh-add -D</code></pre><p>最后可以通过下面命令，查看 key 的设置</p><pre><code class="bash">$ ssh-add -l</code></pre><h2 id="修改ssh-config文件"><a href="#修改ssh-config文件" class="headerlink" title="修改ssh config文件"></a>修改ssh config文件</h2><pre><code class="bash">$ cd ~/.ssh/$ touch config</code></pre><p>打开 .ssh 文件夹下的 <code>config</code> 文件，进行配置</p><pre><code class="yml">#  defaultHost github.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa#  twoHost two.github.com  #  前缀名可以任意设置HostName github.comUser gitIdentityFile ~/.ssh/id_rsa_two</code></pre><ul><li>这里必须采用这样的方式设置，否则 push 时会出现以下错误:</li></ul><blockquote><p>ERROR: Permission to two&#x2F;two.github.com.git denied to one.</p></blockquote><p>简单分析下原因，我们可以发现 ssh 客户端是通过类似:</p><pre><code class="bash">git@github.com:one/one.github.com.git</code></pre><p>这样的 Git 地址中的 User 和 Host 来识别使用哪个本地私钥的。<br>很明显，如果 User 和 Host 始终为 git 和 github.com，那么就只能使用一个私钥。<br>所以需要上面的方式配置，每个账号使用了自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，这样 ssh 在连接时就可以区别不同的账号了。</p><pre><code class="bash">$ ssh -T git@github.com        #  测试one ssh连接# Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access.$ ssh -T git@two.github.com    #  测试two ssh连接# Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>但是这样还没有完，下面还有关联的设置。</p><h2 id="在Git项目中配置账号关联"><a href="#在Git项目中配置账号关联" class="headerlink" title="在Git项目中配置账号关联"></a>在Git项目中配置账号关联</h2><p>可以用 <code>git init</code> 或者 <code>git clone</code> 创建本地项目<br>分别在one和two的git项目目录下，使用下面的命令设置名字和邮箱</p><pre><code class="bash">$ git config user.name &quot;__name__&quot;            #  __name__ 例如 one$ git config user.email &quot;__email__&quot;          #  __email__ 例如 one@126.com</code></pre><p>注意：由于我不知道Hexo怎样配置 局部的config，所以，我将two的config使用全局，而工作目录配置局部。</p><pre><code class="bash">$ git config --global user.name &quot;__name__&quot;            #  __name__ 例如 two$ git config --global user.email &quot;__email__&quot;          #  __email__ 例如 two@126.com</code></pre><p>查看git项目的配置</p><pre><code class="bash">$ git config --list</code></pre><p>查看 one 的 remote.origin.url&#x3D;<a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;">&#x67;&#x69;&#116;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;</a>:one&#x2F;one.github.com.git<br>查看 two 的 remote.origin.url&#x3D;<a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#109;">&#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#46;&#99;&#111;&#109;</a>:two&#x2F;two.github.com.git<br>由于 one 使用的是默认的 Host ，所以不需要修改，但是 two 使用的是 two.github.com ，则需要进行修改</p><pre><code class="bash">$ git remote rm origin$ git remote add origin git@two.github.com:two/two.github.com.git</code></pre><p>我在Hexo中的配置（使用two账号）</p><pre><code class="yml">deploy:    type: git    repo: git@two.github.com:two/two.github.io.git    branch: master</code></pre><h2 id="上传更改"><a href="#上传更改" class="headerlink" title="上传更改"></a>上传更改</h2><p>上面所有的设置无误后，可以修改代码，然后上传了。</p><pre><code class="bash">$ git add -A$ git commit -m &quot;your comments&quot;$ git push</code></pre><p>如果遇到warning</p><blockquote><p>warning: push.default is unset; its implicit value is changing in Git 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use…</p></blockquote><p>推荐使用</p><pre><code class="bash">$ git config --global push.default simple</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
